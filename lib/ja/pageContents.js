[{
    "id": 1,
    "parent": null,
    "path": "/ja/",
    "title": "マニュアルトップページ",
    "breadcrumb": "トップ"
}, {
    "id": 2,
    "parent": "/ja/",
    "path": "/ja/for-novices/",
    "title": "INTER-Mediatorをはじめよう",
    "breadcrumb": "はじめよう",
    "body": "これから始める方はこちらをご覧ください。ダウンロードとインストール方法、試用や学習用途として利用できるバーチャルマシンのダウンロードリンクと利用方法、スタートアップガイド、ハンズオンセッション手順書があります。"
}, {
    "id": 3,
    "parent": "/ja/",
    "path": "/ja/practices/",
    "title": "プラクティス",
    "breadcrumb": "プラクティス",
    "body": "実際の開発時に発生するニーズに近い形式のテーマをもとにしてサンプルプログムを作成し、その動作をみながら個別の機能をどのように実現しているかを示すものです。書籍で言えば「クックブック」といった名称で紹介されるような内容です。"
}, {
    "id": 4,
    "parent": "/ja/",
    "path": "/ja/for-developers/",
    "title": "開発ガイド",
    "breadcrumb": "開発ガイド",
    "body": "定義ファイルの記述方法、Dockerの利用、データベースごとの固有の事情、計算式、メール送信、ユーザー認証とアクセス権、サンプルファイルについて、検索ページを作成するための機能など、実際に開発を行う際に必要な内容について説明しています。"
}, {
    "id": 5,
    "parent": "/ja/",
    "path": "/ja/for-programmers/",
    "title": "プログラミングガイド",
    "breadcrumb": "プログラミングガイド",
    "body": "クライアント側で処理を行うJavaScriptの処理、INTERMediatorの各クラスのプロパティ、メディアの取り扱い、サーバーサイドの拡張等、より高度な使い方をされる場合にご覧ください。また、ソースコードの投稿についても説明しています。"
}, {
    "id": 6,
    "parent": "/ja/",
    "path": "/ja/developers-blog/",
    "title": "開発者、コミッター、利用者によるブログ",
    "breadcrumb": "ブログ",
    "body": "INTER-Mediatorの記事を掲載しているブログのリンク集です。"
}, {
    "id": 7,
    "parent": "/ja/for-novices/",
    "path": "/ja/for-novices/deploy.html",
    "title": "ダウンロードとインストール",
    "breadcrumb": "ダウンロードとインストール",
    "body": "\n            \n                はじめに\n                この文書では、リリース版のダウンロード情報と、INTER-Mediatorを使って開発をする場合のINTER-Mediatorの準備方法と、さらに作成したWebアプリケーションで使用するINTER-Mediatorを作成する方法をまとめたものです。INTER-MediatorはGitHubでソースを公開しています。通常の開発時は、レポジトリにあるものをインストールしておくのがおすすめです。そして、アプリケーション完成後は、JavaScriptに圧縮をかけた実稼働用のINTER-Mediatorを利用するのが少しの事ですが、効率よくなります。これらの方法を説明します。\n                \n            \n\n            \n                ダウンロード\n                INTER-Mediatorのリリースバージョンは、こちらをご覧ください。日々、レポジトリはアップデートされていますが、一定の機能を組み込むごとにバージョン番号を付与して、リリース版として公開します。最新のリリースバージョンは、Ver.5.3です。直接のダウンロードはこちらです。\n            \n\n            \n                レポジトリから取り出したバージョンを開発時に利用する\n                お勧めするのは、通常の開発は、レポジトリから取り出したもので進めておき、実際にアプリケーションを配備するときに、特定のバージョン向けにビルドしたものに置き換えるということになります。gitの使い方はいろいろ難しいですが、gitを全く知らない方も、ともかく以下のようにしてみてください。また、以下はコマンドラインによる汎用的な方法ですが、GitHubアプリケーションを使っても同様に可能です。\n\n                まず、あるフォルダに作成するWebアプリケーションのファイルをまとめておくとします。そのフォルダを作ります。以下は、Documentsの下にmywebappフォルダを作りました。\n\n                \n                    \n                \n\n                次に、GitHubのINTER-Mdiatorのページに行きます。アカウントを持ってサインインしていただくのがいいのですが、なくてもソースのダウンロードは可能です。ここで、中央右付近にあるbranchがmasterになっているのを確認してください。ブランチのmasterがその時点でのコンプリートなソースです。そして、右の方にあるHTTPS clone URLをコピーしておきます。URLが薄く見える右のボタンをクリックすれば、コピーできます。\n\n                \n                    \n                \n\n                そして、ターミナルを開いてください。次のように作業をします。#以降はコメントです。ファイルパスはもちろん、ご自分の作られているフォルダ構成に従って指定をしてください。\n\n                \n                    cd ~/Documents/mywebapp  # Webアプリケーションのフォルダをカレントにする\ngit clone https://github.com/INTER-Mediator/INTER-Mediator.git  # サーバーからレポジトリを複製する\n                \n\n                これだけでOKです。すると、mywebappフォルダに、INTER-Mediatorフォルダが作られます。このINTER-Mediatorフォルダがフレームワーク本体となります。この階層に、たとえば、index.htmlファイルやら、アプリケーションのhtml/phpファイルを作って行けばOKです。後はこれをサーバーにコピーして稼働を確認します。\n\n                \n                \n\n                ここで、レポジトリからクローンしたINTER-Mediatorを参照するには、定義ファイルのcontext.phpはたとえば、次のように記述をします。\n\n                \n                    <?php\nrequire_once('INTER-Mediator/INTER-Mediator.php');\nIM_Entry( .... );\n?>\n                \n\n                なお、サンプルファイルは、INTER-Mediatorフォルダ内のSamplesフォルダにあります。\n\n                もし、レポジトリ側に新しいソースコードが加わっていれば、以下のようにコマンドを入れれば、最新版を取得できます。INTER-Mediatorフォルダをカレントにして、git pullとすればいいです。\n\n                \n                    cd ~/Documents/mywebapp/INTER-Mediator\ngit pull\n                \n\n                念のために説明しておきますが、pullは最新版に更新するという使い方は非常に稀で、正しくは別のレポジトリの修正を取り込むという意味合いがあります。ソースコードをメンテする上では単なる更新ではないのですが、ソースを利用する側の方から見れば更新コマンドと思っていただいて概ねいいかと思います。もし、自分でフレームワーク側のソースを修正された場合には、単純ではありませんので、ここではソースは参照だけでタッチしないという前提で、説明をここまでとします。\n\n                gitには実に多彩な機能があり、ここまでに説明した手順はほんとうにその一端でしかないのですが、これだけを知っていれば、とりあえず大丈夫かと思います。もし、フレームワーク側の修正結果をコミットしていただけるなら、それなりにコマンドを打ち込むか、あるいはアプリケーションを使うことになるかと思いますが、取り出すだけなら上記の手順以上はほとんどないと思います。\n\n                もし、開発中に、フレームワーク側のバグが見つかったなら、もちろん、報告をしてください。なるべく早く対処します。レポジトリのクローンを作って作業をしていれば、対処が終われば、git pullをするだけで済みます。\n\n                OS XでGitHubアプリケーションを使う場合\n                コマンドラインがどうしても苦手だという方は、GitHubのアプリケーションを入手してインストールをしてください。そして、セットアップを一通りすませます。GitHubへのログインが必要なのですが、通常はアカウントを持っていると思われるので、そのアカウントでログインをしておきます。\n\n                GitHubのページには、「Clone in Desktop」というボタンがあるので、それをクリックするとGitHubアプリケーションが起動して、いきなりINTER-Mediatorフォルダを作る場所を聞いてきます。そこで、配置した場所を選択してCloneボタンを押せばOKです。その後は、GitHubアプリケーションで、レポジトリのChangeのボタンを左側で選び、右上のSyncボタンをクリックすれば、サーバーにある最新のレポジトリの内容をダウンロードしてアップデートします。\n\n                \n                \n\n                ただし、この方法だと、2つ目のクローンを同じアカウント内に作成しようとしても、最初に作ったレポジトリをGitHubアプリケーション側では提示して、新たなレポジトリを作りに行きません。その場合は、クローン作成については、コマンドで行ってください。その上で、レポジトリの一覧を表示します。GitHubアプリケーションのタイトルバーの一番左の「Repositories」をクリックすればいいでしょう。そして、ウインドウ下にある「＋」ボタンをクリックして、「Add Local Repository」を選択します。そして、コマンドで作ったクローンのフォルダを指定すると、INTER-Mediatorの項目が複数登録できるようになります。あるいは、レポジトリのフォルダを、Repotoriesを選択してレポジトリ一覧が見えているウインドウの中にドラッグして追加します。ただし、レポジトリのリストで区別ができなくなるので、レポジトリのリストを右クリックして「Show in Finder」を選択してフォルダを確認して、間違えて作業しないように気をつけないといけません。\n            \n            \n                WindowsでGitHubアプリケーションを使う場合\n                WindowsにもGitHubアプリケーションがありますので、それを使ってくローンを作り、更新するということはもちろん可能です。ただし、サイトに見える「Clone Desktop」ボタンを押しても、アプリケーションの案内が見えるだけで、GitHubアプリケーションが起動して何かを始めるということはありません。従って、最初に作るクローンは、アプリケーションの左側のアカウント一覧から見えている場合は、その項目を選択して、右ボタンメニューから「Clone」を選択するなどして作成できます。\n\n                もし、どうしても出てこないなら、Git Shellという機能を使ってコマンドラインを呼び出し、クローンを作りたい場所をカレントディレクトリにして、「git clone https://github.com/INTER-Mediator/INTER-Mediator.git」というコマンドを実行します。コマンドラインで作ったクローンをGitHubアプリケーションで認識させるには、フォルダをアプリケーションのウインドウにドラッグ&ドロップします。\n\n                \n                \n\n                作成すると、レポジトリの詳細を表示すれば、上にsyncボタンが登場します。更新はこのボタンを押すだけでOKです。\n\n                \n                \n            \n\n            \n                ダウンロードしたバージョンを開発時に利用する\n                GitHubのINTER-Mdiatorのページで、右側の「Donwload ZIP」ボタンをクリックすると、現状のレポジトリの各ファイルを圧縮・アーカイブしてダウンロードします。ブランチがmasterであれば、ダウンロードして展開したフォルダは、INTER-Mediator-masterという名前になっています。フォルダ名を適当に変更して、開発中のアプリケーションのフォルダ等へ移動します。\n                もちろん、こちらの方が当初は手軽なのですが、レポジトリとは切り離されることになるので、レポジトリの更新があれば、その都度、同じ作業を繰り返さないといけません。\n            \n            \n                バージョン入りの実稼働向けINTER-Mediatorを生成する\n\n                レポジトリから取り出した結果で開発しているので、その状態で稼働はできるはずです。もちろん、動く状態なのでそのままをアップしてもいいのですが、ページ最後に出ているINTER-Mediatorの帯のバージョンが@@1@@などといった文字列になっていて、ちょっと雑な感じがすると思います。また、以下の方法でビルドすれば、サンプルなど実稼働に不要な素材が取り除かれると同時に、JavaScriptのプログラムを1つのファイルに圧縮してまとめるので、動作のパフォーマンスは有利になります。\n\n                まず、準備として、レポジトリから取り出したINTER-Mediatorフォルダと同じフォルダに、ダウンロードしたyuicompressor-2.4.7.jarを配置してください。ダウンロードは、こちらのページのBinary downloadのリンクから取得できます。\n\n                独自のバージョンと本日の日付を組み込んだ現状のINTER-Mediatorを作るには、dist-docs/buildup.shというスクリプトを使ってください。たとえば、INTER-Mediatorのディレクトリがカレントディレクトリであれば、MacあるいはUNIX系OSなら、以下のように入力します。\n\n                \n                    cd dist_docs #INTER-Mediatorフォルダがカレントの場合\n./buildup.sh\n                \n\n                一方、Windowsの場合はCygwinで実行させてください。buildup.shファイルを、Cygwinのターミナルのウインドウにドラッグ&ドロップして、Cygwinのターミナルでreturnキーを押すのが手軽でしょう。なお、ドライブのパスを指定したい場合は、Cygwinでは、/cygdrive/c/で、C:¥ドライブのルートを示すパスとなります。\n\n                \n                    \n                \n\n\n                すると以下のようなメッセージがターミナルに表示されます。ここで、キーボードから、1、2、3のいずれかをキータイプしてreturnキーを押してください。3種類のビルド形式が選択できますが、(2)が最小の構成で、通常はこちらでいいかと思われます。(3)は認証ユーザの管理ページのサンプルや、定義ファイルエディタなどを含むようになります。なお、認証のアプリケーションに関しては、Autu_Supportフォルダの内容をもとに独自に開発されることをお勧めします。\n\n                \n                    $ ./buildup.sh\n=================================================\nStart to build the INTER-Mediator Ver.4.7\n-------------------------------------------------\n Original: /Users/msyk/Documents/INTER-Mediator_develop/INTER-Mediator\n Build to: /Users/msyk/Documents/INTER-Mediator_develop/im_build/INTER-Mediator\n-------------------------------------------------\nChoose the build result from these:\n (1) Complete (everything contains)\n (2) Core only (the least set to work wep applications)\n (3) Core + Support (add Auth_Support and INTER-Mediator-Support)\nType 1, 2 or 3, and then type return---->\n                \n\n                INTER-Mediatorフォルダと同じフォルダに、yuicompressor-2.4.7.jarファイルがあれば、これを使ってJavaScriptのプログラムを圧縮します。ない場合には圧縮しないで、いくつかあるJavaScriptのファイルを1つにまとめることだけを行います。なお、別のバージョンのものを使う場合には、buildup.shファイルの最初の方にパスを記述する箇所があるので、それを修正してください。\n\n                その後、メッセージ通り、INTER-Mediatorフォルダと同じ階層に、「im_build」フォルダが作られ、その中に、INTER-Mediatorフォルダがあります。こちらのファイルの中は、動作実行上必要なものだけに絞られています。また、それぞれのファイルや、あるいはページの下部のバーなどに、バージョン番号とビルド日が追加されるようになります。このim_build/INTER-Mediatorフォルダを、現状のINTER-Mediatorフォルダと置き換えればOKです。\n\n                ただし、1点注意があります。ビルドしたINTER-Mediatorは、すべてのJavaScriptのプログラムを、INTER-Mediator.jsファイルにまとめて、その他のjsファイルは削除されています。そのままFTPでアップロードすると、消えたはずのその他のjsファイルが残ったままになります。なので、サーバー側にあるINTER-Mediatorフォルダもいったん消した上で、アップロードするのが確実です。動作がおかしいと思ったときには、INTER-Mediator.js以外のJavaScriptファイルがサーバー上で存在していないかを確認してください。\n\n                バージョン番号については、buildup.shファイルの最初の方に記述があるので、それを変更して利用してください。なお、バージョンのルールは次のようにします。\n\n                \n                    \n                    \n                    \n                    \n                    \n                バージョン番号は、整数をピリオドで区切ることとする（例：3.4、3.11）バージョン表記は、Ver.を基本とするが、vでもVersionでもversionでも基本的には構わない整数が2つのものを「正式バージョン」とする（例：3.4、3.11）開発者が独自にバージョンを付ける場合、3つ目の整数を必ず付ける（例：3.4.1、3.11.133）開発者が独自にバージョンを付ける場合、さらに追加してもいい（例：3.4.1-rev.21）\n\n                つまり、INTER-Mediatorをダウンロードして、実際にアプリケーションに搭載する上で少し修正したとしたら、3つ目の整数で枝番号を付けてくださいということです。できれば、その状態をコミット/プッシュした上で、そのバージョンタグをつけていただけると、自分のバックアップ用にもなると思います。他の人とバージョンが重ならないように、レポジトリをチェックして異なる番号を付けてください。また、3桁目は飛び番号でもいいとしましょう。けっこう緩いルールですね。\n\n            \n        "
}, {
    "id": 8,
    "parent": "/ja/for-novices/",
    "path": "/ja/for-novices/vm.html",
    "title": "バーチャルマシンの利用",
    "breadcrumb": "バーチャルマシンの利用",
    "body": "\n            \n                はじめに\n                INTER-Mediatorの試用や学習用に、即座にサーバーとして利用できるVirtual Machine（VM）についての情報をこの文書に記載します。VMを自分で作成するか、あるいはすでに作成されているVMをダウンロードするかして利用できます。\n                このVirtual Machineは、特定のホスト内でのみ利用することを想定して、ログインアカウントなどを見える場所に記載しています。学習用に定義ファイルとページファイルをブラウザーで編集できる状態にしているため、Virtual Machineとして配布している「INTER-Mediator-Server VM」をそのままインターネットに公開することは絶対に行わないでください。\n            \n            \n                使用までの準備\n                VMは、VirtualBox用を提供します。アプリケーション形式のVirtualBoxを以下の方法で、ご自分のパソコンにインストールしておいてください。\n\n                VirtualBoxのインストール\n                Windows、Mac、Linux、Solarisで利用できるVirtual Machine実行環境の「VirtualBox」は、Oracle社が開発してフリーで配布しているものです。こちらのページより、ご利用のホストコンピュータに対応したVirtualBoxをダウンロードしてご利用ください。\n            \n            \n                INTER-Mediator-Server VMのダウンロード\n                INTER-Mediator-Server VMは以下のリンクよりダウンロードしてください。1.6GBほどあります。\n                \n                    \n                    \n                \n                        INTER-Mediator-Server VM 5.3（最終更新日：2016/02/21）\n                    \n                        INTER-Mediator-Server VM 5.4-RC1（最終更新日：2016/07/26）\n                    \n            \n            \n                VMの準備\n                VMをINTER-Mediatorに含まれているスクリプト等を利用して自分で生成する方法を「VMを自分で作成して起動する」に、一方、すでに誰かが作ったVMを利用する方法を「VMをダウンロードして利用する」に解説します。もちろん、いずれか一方の作業を行うことで、VMを利用することができるので、状況に応じて使い分けてください。\n\n                VMをダウンロードして利用する\n                以下の手順は、VirtualBoxの初期状態を仮定しています。他の利用などでさまざまな設定がある場合には、手順が異なるかもしれませんが、原則として、ホストオンリーネットワークを用意して、そのネットワークを使用してVMが起動するようにセットアップされていればOKです。ダウンロードしたVMは、OS XでもWindowsでも、プラットフォームに関係なく利用できます。ただし、FileMaker Serverの場合には、VMとホスト側のIPアドレスが以下で行われる設定と同一である必要があります。\n\n                VirtualBoxの準備\n                VirtualBoxで稼働させるゲストのネットワーク環境にはいくつかありますが、「ホストオンリーネットワーク」を利用します。この方法だと、ゲストOS自体は、ホストマシン外からのネットワークアクセスはできなくなります。また、ゲストOSからホストOSへの接続も可能です。作成されるVMは、ホストオンリーネットワークであることを前提としているので、それ以外の設定での利用では、VMの状況を確認するなどして、ご自分で対処する必要があります。\n                Windowsでは、「ホストオンリーネットワーク」が最初から1つ作成されています。確認のため、「ファイル」メニューから「環境設定」を選択して、ダイアログボックスの左側で「ネットワーク」を選択し、「ホストオンリーネットワーク」のタブを選択します。そこに最初から「VirtualBox Host-Only Ethernet Adapter」が存在することを確認してください。\n                \n                    \n                \n                Mac版では、「ホストオンリーネットワーク」は最初は1つもありません。「VirtualBox」メニューの「環境設定」を選択してダイアログボックスを表示します。ツールバーにある「ネットワーク」を選択します。さらに、「ホストオンリーネットワーク」のタブを選択します。ここに何もない場合には、リストの右側の3つあるアイコンの一番上をクリックして、項目を1つ作ります。作成されたままの状態で通常はかまいません。\n                \n                    \n                \n\n                ダウンロードした.ovaファイルの読み込み\n                WindowsおよびMacのいずれの場合でも、「ファイル」メニューから「仮想アプライアンスのインポート」を選択してください。そして、ダウンロードしたファイルを指定して読み込み、「VirtualBox マネージャー」の画面の左側に新しい項目ができていることを確認します。\n\n                INTER-Mediator-Server VMのネットワーク設定\n                「VirtualBox マネージャー」で、読み込んだINTER-Mediator-Server VMの項目を選択します。そして、ツールバーの「設定」アイコンをクリックします。すると、そのVirtual Machineの設定が画面が表示されます。\n                Windowsでは、画面左側のリストで「ネットワーク」を選択します、さらに「アダプター2」のタブを選択します。そして、「割り当て」のポップアップメニューで「ホストオンリーアダプター」を選択します。すると、「名前」のところは、自動的に、「ホストオンリーネットワーク」に定義された名前が見えています。そこまでを確認して、OKボタンをクリックします。\n                \n                    \n                \n                Macの場合は、ツールバーの「ネットワーク」を選択して、さらに「アダプター2」のタブを選択します。そして、「割り当て」のポップアップメニューで「ホストオンリーアダプター」を選択します。すると、「名前」のところは、自動的に、「ホストオンリーネットワーク」に定義された名前が見えています。そこまでを確認して、OKボタンをクリックします。\n                \n                    \n                \n            \n            \n                INTER-Mediator-Server VMの利用\n                以上の準備ができれば、VirtualBox マネージャーでINTER-Mediator-Server VMの項目を選択して「起動」ボタンをクリックします。黒いコンソール画面に文字が流れて起動します。ログインプロンプトが表示されます。Webブラウザから「http://192.168.56.101」に接続してください。すると、このINTER-Mediator-Server VMで利用出来る機能などなどが見えるページがあります。\n                「サンプルプログラム」のリンクからは、INTER-MediatorのSamplesフォルダの内容を即座に稼働させることができます。ホスト側でFileMaker Serverが稼働している場合、INTER-Mediatorのディストリビューションの中にあるdist-docs/TestDB.fmp12をサーバーに登録してXML共有ができる状態になっていれば、ゲストからホストに接続して動作するので、FileMaker Serverのサンプルも試せます。FileMaker Serverが稼働していない場合には、FileMaker Serverのサンプルはエラーが出ます。\n                \n                    \n                \n                また、Webブラウザ上で、定義ファイルとページファイルを修正して、実際にプログラムした結果を参照することもできます。たとえば、ページファイルのpage01.htmlを開くリンクだけでなく、page01.htmlを編集するリンクはHTMLエディタを表示します。また、def01.phpはpage01.htmlからSCRIPTタグで参照されている定義ファイルで、定義ファイルエディタを開いて修正もできるようになっています。\n                \n                    \n                \n\n                「http://192.168.56.101」に接続できない場合\n                INTER-Mediator-Server VMが起動しているのなら、ユーザ名「developer」、パスワード「im4135dev」でログインをしてみて、「ifconfig」コマンドを実行してください。そこに、INTER-Mediator-Server VMが現在使用しているIPアドレスが見えます。eth1と記述された塊の中の、inet addrの後のIPアドレスが、現在のゲストOSのIPアドレスです。ホスト側でWebブラウザを起動して、そのIPアドレスで接続をしてみてください。\n                それでも考えられるのは次のようなことです。\n                \n                    \n                    \n                    \n                そもそも、VirtualBox自体がきちんと動かない状態である。Windowsで仮想化機能が無効になっている、Windows 10でHyper-Vを有効にしている、VMwareで稼働するWindowsの上でさらにINTER-Mediator-Server VMを使用しようとした、など。ここまでに説明したネットワークの設定が正しく行われていない。あるいは、以前にその種の設定を独自に変更してしまっている。なんらかの設定により、ホストからゲストへのIP接続ができない状態になっている。VirtualBoxでの設定次第で、あり得ると考えられます。\n\n                自分で作ったファイルを運用する\n                「http://192.168.56.101」に接続したページに、ログイン可能なアカウントが末尾に書かれています。それをご利用ください。SFTPでファイルの転送をするのが手軽かと思われます。また、INTER-Mediator-Server VM自体にログインをして、独自のデータベーススキーマを読み込ませるなどしてください。データベースの管理アカウントも、「http://192.168.56.101」に接続したページに記載しています。\n\n                INTER-Mediatorをアップデートする\n                ホストマシン上で、sshにより「192.168.56.101」に接続してください。ユーザー名は「developer」、パスワードは「im4135dev」です。例えば、OS Xの場合は「ターミナル」アプリケーションで、「ssh developer@192.168.56.101」とコマンドを入れて、パスワードがその後にたずねられるので、キータイプをします。Windowsの場合は、TeraTermやPuTTY等のアプリケーションをご利用ください。\n                INTER-Mediator Ver.5.2（Ver.5.2-RC3を含む）以降のINTER-Mediator-Server VMの場合、以下のようにコマンドを入力します。\n                \ncd /var/www/html/INTER-Mediator\ngit pull origin stable\n\n                INTER-Mediator Ver.5.2-RC1およびそれ以前のINTER-Mediator-Server VMの場合、以下のようにコマンドを入力します。checkoutの後にスペースとドット（git checkout .）を入れるのを忘れないようにして下さい。\n                \ncd /var/www/html/INTER-Mediator\ngit checkout .\ngit pull origin stable\n\n                GitHubのリポジトリにあるINTER-Mediatorの最新安定版がVMに反映されます。なお、開発版の最新状況を反映させる場合には「git pull origin stable」の代わりに「git pull origin master」を実行します。現在のバージョンは、INTER-Mediator以下、dist-docs/build.shというスクリプトの最初の方のバージョン記述を確認してください。反映されている最終的なコミットは、git logやgit showコマンドで、現在のcommitの識別子（16進数の非常に長いコードで、commitの後に続けて記述されている）を得て、GitHubのリポジトリで探してください。なお、Ver.5.1以前の場合は、アクセス権の設定が若干違います。もともと用意されているページファイルと定義ファイルの編集には問題がありませんが、自分でファイルを追加したような場合などは、アクセス権について見直してください。\n            \n            \n                （参考）VMを自分で作成して起動する\n                INTER-Mediatorの配布ファイルの中には、VMを生成するためのスクリプト等が含まれています。最新のINTER-Mediatorが組み込まれたVMを作成するには、この方法が最適です。なお、標準環境のWindowsでは、Vagrantをインストールしてもスクリプトが稼働しないので、ご注意ください（別途Git for Windowsなどのソフトウェアをインストールしてsshを実行できる環境が必要です）。\n                \n                    \n                    \n                    \n                    \n                Vagrantをインストールします。こちらのページに移動して、使用するOSに対応したアプリケーションをダウンロードしてインストールします。単にインストールするだけで大丈夫です。INTER-Mediatorの最新版をcloneします。こちらのページににある「Clone in Desktop」ボタンを利用するのが手軽な方法です。OS Xであればターミナルアプリケーションを起動し、cloneしたINTER-Mediatorフォルダ内のdist-docs/vm-for-trialフォルダに移動します。「vagrant up」というコマンドを実行します。ダウンロードや作成処理に時間がかかります。概ね20分程度です。「INTER-Mediator-Server VM is ready.」と表示されたら準備完了です。\n            \n        "
}, {
    "id": 9,
    "parent": "/ja/for-novices/",
    "path": "/ja/for-novices/startup.html",
    "title": "スタートアップガイド",
    "breadcrumb": "スタートアップガイド",
    "body": "\n            \n                はじめに\n                \n                    INTER-Mediatorを利用して、Webアプリケーションの開発を行おうと考えている方々向けに、プログラミングを行わない範囲の記述で開発可能な部分について、この文書にまとめました。最初にHTMLやデータベースの基本を簡単に説明しています。INTER-Mediatorでの開発では、HTML/CSS/JavaScriptについての知識が必要で、これらについてはすでにある程度知識があるという前提での解説になっています。データベースは概念的な理解で、既に用意されているデータベースを利用するという観点で、Webページ上への表示などを説明します。（新居雅行, 2014/2/18）\n                \n            \n            \n                1. Webページ制作についての基本\n\n                まず最初に、Webページの成り立ちについて、知っておいていただきたい知識をまとめておきます。次のページ以降の内容を読み進めるための前提知識をこのページで説明します。\n\n                WebサーバーとWebクライアント\n\n                \n                    Webページのコンテンツは、通常は「サーバー」というインターネット上で共有可能なコンピュータ上に保持されています。それらをネットワークを通じてデータをクライアントに転送した上で参照します。クライアントとして使われるアプリケーションは、一般には「Webブラウザ」と呼ばれます。\n\n                HTMLについて\n\n                \n                    Webページのコンテンツは、HTMLという規格に従ってテキストで記述されたものが中心になっており、サーバー上ではたとえば拡張子が.htmlの1つのファイルで保存されています。そのファイルをWebブラウザが解釈することで、段落や表、色の付いた文字などのレイアウトを施したWebとして表示できます。HTMLで記述されたファイルを「HTMLファイル」、HTMLの記述内容に従って表示された結果を「HTMLページ」と呼びます。\n\n                \n                    HTMLによる記述の特徴は、表示する文字とは別に、「タグ」として書式やレイアウトなど、テキストをどのように見せるのかという記述も付加されていることです。また、タグはデータの区切り目を示すなど見せ方に限らない使い方もあります。\n\n                タグは、たとえば <div align=\"center\">abcdef</div> のような書き方をします。開きタグ、閉じタグで囲まれるのが一般的で、divのような「タグ名」はHTMLで決められたものを利用します。また、alignのような「属性」をタグに付与できますが、属性名はタグごとに使える物が決まっています。属性名、イコールに続いて、属性の値がダブルクォート等で囲まれて記述され、値は状況に寄って変わります。\n                \n\n                \n                    Webページの表示では、テキスト以外に、画像やムービーも表示できます。これらは、通常はサーバーでは別のファイルとして保存されたものになっており、HTMLページ内に特定の画像を表示するには、画像であれば画像を表示するIMGタグのSRC属性に、画像のファイル名やURIを記述します。\n\n                CSSとJavaScriptについて\n\n                \n                    HTMLで表示されるものの書式設定は、CSSとして別途規格が定められており、多様な表現が可能になっています。CSSを利用する事で表現力が上がるだけでなく、まとめて設定したり、複数のHTMLファイルで設定情報を共有することができます。前者は、idやclass属性、あるいはタグに対する書式設定ができることで実現されています。後者は、CSSの定義自体を独立したファイルに記述して、HTMLからCSSが記述されたファイルの内容を参照する仕組みで実現されています。\n\n                \n                    HTMLでの記述やCSSによる記述は、その場でどうするかということ（例えば、画像を見せるとか、段落を右寄せにするなど）を記述する方式ですが、一方で、そうした記述以上のことを行う仕組みとして、JavaScriptというプログラミング言語を用いたプログラムをHTMLページの中で使われる事が一般的になっています。プログラム自体をHTMLの内部やあるいは別のファイルで供給できるようになっています。\n            \n\n            \n                2. データベースについての基本\n\n                \n                    データベースとは\n\n                    \n                        あらかじめ決められた内容を常に表示するWebページは、HTMLファイルなどを作ってサーバーに保存すれば、概ね目的は達成できます。しかしながら、販売品目が変わるコマースサイトなど、状況に応じた内容を表示する必要があるWebサイトでは、Webページを構成するための仕組みとは別に、データのみを「データベース」に保存するのが一般的です。データベースに保存する理由は、確実に保持できる事や、高速に検索できるなどの理由があり、MySQLなどのオープンソース系のデータベースソフトウエアを、Webサーバーとは別にサーバー上にインストールして利用されるのが一般的です。\n\n                    \n                        データベースとして利用されるソフトウエアは、リレーショナル型データベースという手法に基づく物が広く利用されています。最近ではそうでないものもありますが、INTER-Mediatorで利用するのはリレーショナル型なので、この手法のみを扱います。\n\n                    データベースでの記録形式\n\n                    \n                        データベースに記録されているデータは雑多に記録されているわけではありません。Excelなどの表計算ソフトのような「テーブル形式」で記録されているのが基本です。このとき、Excelの1行に相当する物を「レコード」、1列に相当するものを「フィールド」と呼びます（ソフトウエアによっては異なる呼び方の場合もありますが、この名称で以後は説明します）。\n\n                    \n                        \n                    \n                    \n                        この形式でのデータは、概ね、フィールドによって「どんな種類のデータなのか」ということが決められることになります。住所録での「住所」フィールドには、たとえばある人の住所の文字が入力されて、そこに生年月日などは入力しません。そのフィールドがいくつか集まったものが「レコード」です。住所録では、1人の情報が1つのレコードになります。\n\n                    \n                        なお、フィールドに記録できるデータの種類（「型」などと呼びます）をあらかじめ決めておくのが一般的です。この点については、「フィールドは文字列を入力するのか、数値を入力するのかがあらかじめ決められている」といったことでの理解で十分です。\n\n                    データを特定する\n\n                    \n                        テーブル形式のデータでは、「どのレコード」の「どのフィールド」なのかを指定すると、通常は文字列か数値の1つのデータを得ることができますし、一方保存する事もできます。「どのフィールドか」ということは、フィールド名で特定します。そのため、同一のテーブルではフィールド名が重複することはできません。\n\n                    \n                        一方、「どのレコードか」ということはフィールド名のような名前を付けないため、異なる手法を取ります。「順番で前からいくつ目」ということも、リレーショナル型データベースでは原則としてだめになっています。動作の効率化のため、毎回同じ順序でレコードが登場するということは保証されていません。このような事情もあって、リレーショナル型データベースでは、レコードを特定するためのフィールドを設けます。そのためのフィールドを「主キーフィールド」あるいは「キーフィールド」と呼ばれます。\n\n                    \n                        たとえば、住所録を考えてください。名前からレコードが特定できるかもしれませんが、同姓同名の人もいるかもしれません。そのような状況での1つの方法として、住所録には本来ないかもしれない「番号フィールド」を設けて、データベースソフトウエアの機能を使って、そこに1番以降の連番を自動的に入力し、レコードごとに必ず異なる数値データを入れておく事にします。データが増えてしまうとは言え、その番号フィールドが120だとかいった数値が分かれば、あるレコードを特定できることになります。主キーに関しても設計上はいろいろな手法が可能ですが、INTER-Mediatorではデータとは独立して連番が自動設定されるようなフィールドを利用する事が多くなっています。\n\n                    検索とソート\n\n                    \n                        リレーショナル型データベースは特定のテーブルに対して、条件を与えてレコードを取り出す事ができます。条件は、フィールドに対して与えます。たとえば、「金額が1000円以上」のような条件を、条件に従って記述します。その結果、条件に合ったレコード群（レコードセット）が得られます。このレコードセットは、0個以上のレコードが含まれます。この検索結果は、検索を指示した元に返すまえに、特定のフィールドのデータに基づいて並べ替えを行います。そのフィールドも検索要求に含め、指示によって昇順や降順といった並べ替えができます。\n\n                    \n                        以上の点から、テーブルは表計算ソフトのワークシートのように理解をすればいいのですが、現実には、テーブルは複数のレコードからなり、レコードは複数のフィールドからなる（正確にはフィールドというよりも「フィールド名で指定されたデータ」と言うべき）といった階層関係があると理解する方が、より実体に即したものと言えるでしょう。\n\n            \n            \n                3. Webアプリケーションの概略\n\n                Webアプリケーションの基本的な構成\n\n                \n                    データベースを利用したWebページを作成するとき、状況に応じてデータを取得して、その結果をHTMLとして生成し、それをクライアントに送るという作業を行う必要があります。HTML/CSS/JavaScriptだけではその仕組みは完全にはできないため、サーバー側で何らかの処理をさせる仕組みが必要になります。そうした仕組みを一般に「Webアプリケーション」と呼びますが、用語の示す範囲はややあいまいです。ここでは、Webサーバーとデータベース以外に、目的に応じたソフトウエアを追加しないといけないということが重要です。\n\n                \n                    つまり、ニュースサイトとコマースサイトでは要求が異なるため、単一の追加ソフトウエアではまかなえません。要求に応じたソフトウエアを、サイトごとに作る必要があります。そのための仕組みの基本がCGIであり、Webサーバーは単にファイルの内容を返すだけでなく、何らかの処理を行ってその結果を返すとか、クライアントのフォームで入力した結果を受け取ってなんらかの処理をするという仕組みを持っています。その処理を行うソフトウエアははさまざまな手法で構築されていますが、最近ではPHPやJavaなど、さまざまな実行環境や言語が利用されています。多くのソフトウエアは、プログラミング言語を用いて開発されているのが実情です。そのため、Webアプリケーション開発は、プログラミングやシステム開発を行うような会社や人材がまかなう業務となっています。\n\n                \n                    Webアプリケーションが複雑化するにともない、プログラミングを1から行うようなことは少なくなり、現在はほとんどの開発を「フレームワーク」と呼ばれる一定の共通的な機能をまかなうソフトウエアをベースに作られます。有名なフレームワークとしては、CakePHPやRuby on Railsがあります。\n\n                INTER-Mediatorの動作上の構成\n\n                \n                    今回ご利用していただくINTER-Mediatorは、このフレームワークに属するものです。データベースがあり、Webサーバーがある状態で、データベースを利用したWebアプリケーションを開発するための素材です。しかしながら、INTER-Mediatorは他のフレームワークと大きく異なり、プログラミング言語でのプログラム作成をしなくても、機能を作り込めるようにしています。どのようにすればいいのかは次のページ以降、詳細に説明しますが、概ね、HTML内に記述を加えることと、データベースの利用に関するルールを列挙することと思っていてください。\n\n                \n                    Webアプリケーションでは複雑な動作を目にすることも一般的です。たとえば、Amazonのサイトは、莫大なユーザの購入履歴を覚えていたり、流通と連動して分割送信するなどたくさんの機能からなっています。しかしながら、複雑なページでも、その根本は、データベースから取り出したデータを表示し、一方で、入力したデータを書き込むといった作業が基本です。そうした処理を、極力少ない作業で実現しようとしたのがINTER-Mediatorです。\n\n                \n                    もちろん、Amazonのようなサイトを簡単に作れるかというとそれは無理です。しかしながら、Webアプリケーションを作るニーズは至る所にあり、その多くの場面では比較的シンプルな動作で十分なこともよくあります。Excelに記録するような業務で、一方でその情報を共有したいようなもの、たとえば小さな会社での資産管理などでは、Excelワークシートを添付メールで社員全員に送る事よりも、Webアプリケーションにする方が、即時に情報が見えるなど数多くのメリットがありますし、貸出や予約といった仕組みも有効に機能するでしょう。そうしたアプリケーションを、少ない労力で開発し、可能であれば現場の利用者がメンテナンスできるような状況を、INTER-Mediatorというフレームワークで作り出そうとしています。\n\n                INTER-Mediatorで作るべきもの\n\n                \n                    ここで想定しているWebアプリケーション開発は、すでにデータベースが作られた状態であるということです。その状態から、HTMLファイルなどのページ素材を作ると同時に、「定義ファイル」と呼ばれるデータベースの利用に関するルールなどを列挙したファイルを作り、Webアプリケーションとしての動作を行うようにします。\n\n                \n                    この定義ファイルの定義をベースにして、データベースからデータを取り出してページの中に埋め込むような動作をするのが、フレームワークとしてのINTER-Mediatorの重要な仕組みの1つです。HTMLで記述したタグ要素の中の特定の属性に、データベースのどのテーブルのどのフィールドと連動させるかといった記述を追加します。INTER-Mediator向けの記述を追加したHTMLファイルを「ページファイル」と呼びます。\n\n                \n                    これら、定義ファイルとページファイルを作る事で、INTER-Mediatorは機能します。いずれのファイルもサーバーに保存しますが、多くの部分がJavaScriptで稼働しており、データベースから取り出したデータをページに埋め込む作業はクライアントのWebブラウザ内で行います。\n                \n                    \n                \n\n            \n            \n                4. INTER-Mediatorでのバインディングの概念\n\n                定義ファイルのコンテキスト\n\n                \n                    INTER-Mediatorで開発するときの定義ファイルに記述する内容のうち、きわめて重要なものが「コンテキスト」と呼ばれるものです。コンテキストは単純な状況では、テーブルそのものという場合があります。つまり、テーブルのデータそのものを1つのコンテキストとして考えるということです。\n\n                \n                    しかしながら、多くの状況では、テーブル全体を使う事はありません。その一部分のデータが必要です。具体的には一部分というのは、「一部分のレコード」になります。もし、住所録に対して、都道府県が京都府のデータだけを検索するような条件を与えてレコードを取り出すと、単なる誰かの住所録が「京都府に住む人の住所録」というように、意味が付加されます。技術的には検索条件を与えることですが、得られた結果は何らかの意味が増えていることが一般的です。その意味で「コンテキスト」と名付けています。\n\n                \n                    コンテキストには、データを取り出すテーブル、データを書き込むテーブルを指定できます。取り出しと書き込みが別々の場合があるのだろうか？と思われるかもしれませんが、リレーショナル型データベースでは、データの扱いを柔軟にするため、「検索した状態」をテーブルのように見せるような機能（「ビュー」と呼ばれます）があり、ビューの結果を取り出して、その結果を元のテーブルに書き戻すような場合もあるので、別々の指定になっています。\n\n                \n                    このデータベースのテーブルの指定に加えて、コンテキストを区別するための名前が必要です。また、コンテキストには、その他のたくさんの指定が可能になっており、アプリケーションに必要な機能の定義をコンテキスト内で行えるようになっています。\n\n                定義ファイルの記述方法\n\n                \n                    最初に、定義ファイルには、コンテキストがあり、名前、データを取り出すテーブル、書き込むテーブルを指定する必要があることを説明しました。それら3つが異なる名前、つまり順に「myaddress」「activeaddr」「address」にしたいとします。このとき、「何の値なのか」を示すキーワードと、指定する値つまり実際にデータベースに設定されているなどしてその時々で変わる値とを、並べて記述することにします。何の値に相当するかを示す決められたキーワードは、順番にname、view、tableとなっており、結果として指定するのは次のような情報となります。\n\n                \n                    name: myaddress\nview: activeaddr\ntable: address\n                \n\n                \n                    つまり、決められたキーワードを左側に記述し、コロンをはさんで実際のデータを右に記述します。なお、この記述を実際のファイルとしてどのように表現されているのかについては、以後の作業を「定義ファイルエディタ」を使う上ではほとんど関係ありません。name:と書かれた右のテキストフィールドに「myaddress」とキータイプするだけです。なお、上記の1つのかたまり（コンテキスト）内では、キーワードの順序は問いません。\n\n                \n                    ここで、viewとtableの記述を省略すると、nameをそのままテーブル名として使います。従って、データベースにaddressという名前のテーブルがある場合、単にそれを使うもっとも簡単な記述は、次のようなものです。もちろん、レコードの取り出しや変更では、いずれも、addressテーブルに対して行われます。\n\n                \n                    name: address\n                \n\n                すなわち、viewやtableに対する値を省略すると、nameの値を利用します。nameは省略できません。\n\n                タグ要素に書き込む記述についての説明\n\n                \n                    データベースにあるaddressテーブルが住所録であるとして、電話番号がtelフィールドにあるとします。このとき、定義ファイルに次のようなコンテキストの定義があるとします。これまでに説明した事に加えて、keyというキーワードの値が増えています。\n\n                \n                    name: jusho\nview: address\ntable: address\nkey: id\n                \n\n                keyは、addressテーブルの主キーフィルドの名前を指定するものです。レコードを参照するだけだと主キーが何かは不要ですが、ページ上で書き直したデータを元のレコードに書き戻すのに必要になります。\n\n                ページファイル、つまり、HTMLファイル側で、addressテーブルのtelフィールドを表示し、かつ編集できるようにテキストフィールドを用意するとします。このとき、HTMLのタグを次のように記述します。\n\n                \n                    <input type=\"text\" data-im=\"jusho@tel\" />\n                \n\n                この記述を行い、この後に説明する「ページファイルに必要な記述 」の記述を行うだけで、テキストフィールドに、addressテーブルのtelフィールドの値が表示されます。また、そこで電話番号を書き直して、tabキーを押したフォーカスを離すなどすると、書き直した電話番号が元のフィールドに書き戻されます。\n                \n\n                通常のHTMLでの違いは、data-im属性が加わっていることです。この記述を「ターゲット指定」と呼びます。ターゲット指定では、コンテキストのname属性、区切り記号の@、そしてフィールド名を指定します。\n\n                もし、電話番号だけをどこかに表示したいのなら、次のような記述をHTMLの中に含めれば良いでしょう。\n\n                \n                    <span data-im=\"jusho@tel\"></span>\n                \n\n                たとえば、telフィールドの値が「0123-456-9876」ならば、「<span data-im=\"jusho@tel\"> 0123-456-9876 </span>」というタグ要素があるとの同じ結果になります。つまりフィールドの値をそのタグの値として差し込みます。\n\n                以上のように、inputなどのフォーム要素をページ内に使いますが、INTER-Mediatorではテキストフィールドに見えている文字列を修正すると、テキストフィールドから離れるときに自動的にデータをデータベースに書き戻します。そのこともあり、FORMタグによる囲みやサブミット後の処理の記述などは一切必要はありません。FORMタグを記述してもかまいませんが、INTER-MediatorはFORMタグ要素に対して何の処理も行いません。\n\n                ページファイルに必要な記述\n\n                \n                    ページファイルでは、タグにどのフィールドと連動するのかということをターゲット指定として記述する事に加えて次の2つの作業が必要です。まず1つは、INTER-Mediator自体をページに取り込むための設定が必要です。JavaScriptで記述した別ファイルの読み込みの設定と同様で、参照先がサーバー上の定義ファイルであるということです。ここまでの例で、定義ファイルがdef.phpというファイル名で保存されていて、ページファイルと同一のディレクトリにあるとします。このとき、ページファイルのヘッダ部に\n\n                \n                    <script type=\"text/javascript\" src=\"def.php\"></script>\n                \n\n                と記述します。INTER-Mediator自体の取り込みに加えて、定義ファイルに記述した内容も同時に取り込みます。\n\n                \n                    また、ページファイル内を解析してデータベースの内容と合成する作業が必要です。JavaScriptのプログラムを1命令だけ呼び出します。いろいろな方法がありますが、いちばん簡単なのは、ボディ部のBODYタグ要素を次のように記述することです。この場面でのプログラム自体はどんなページでもこれでかまいません。\n\n                \n                    <body onload=\"INTERMediator.construct(true);\">\n                \n\n                \n                    プログラムを含むような複雑な処理を組み込む場合は、BODYタグ要素のonload属性ではなく、プログラムを記述する領域に記載することもあります。重要なことは、ページの合成をするために、「INTERMediator.construct(true);」というJavaScriptの呼び出しを最初にHTMLを読み込んだ時よりも後に実行する必要があるということです。\n\n            \n            \n                5. 繰り返しの実装\n\n                エンクロージャー、リピーターの概念\n\n                \n                    あるレコードのあるフィールドと、タグ要素に組み込まれるデータが連動できることはすでに説明しました。一方、データベースの出力が複数のレコードを持つのが一般的です。複数のレコードがある場合に、HTMLの要素とどのように合成するかという点をここでまとめておきます。\n\n                \n                    まず、1つの例を示します。あるデータベースaddressで、pnameフィールドに名前、telフィールドに電話番号が入力されているとします。このデータベースからデータを取り出すために、次のようなコンテキストが定義されているとします。\n\n                \n                    name: address\nkey: id\n                \n\n                通常、レコードが100個あれば、100個分のレコードがデータベースから取り出されます。このとき、ページファイルに次のようなHTMLでの記述があるとします。\n\n                \n                    <table>\n    <thead>\n        <tr><th>名前</th><th>電話番号</th></tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td data-im=\"address@pname\"></td>\n            <td data-im=\"address@tel\"></td>\n        </tr>\n    </tbody>\n</table>\n                \n\n                INTER-Mediatorは、ターゲット指定のある要素から「address」というnameの値を持つコンテキスト、すなわちaddressテーブルからデータを取り出しますが、その結果は複数のレコードとなるわけです。\n\n                \n                    INTER-Mediatorは上記のようなHTMLがある場合、TRタグ要素を一度TBODYタグ要素から取り出します。そして、取り出したレコードセットを順番にチェックして、正しいレコードがあれば、TRタグ要素を複製してその中のリンクノードに現在のレコードのフィールドに対する値を組み込み、TBODYの子要素として追加します。つまり、レコードの数だけTRタグを複製して、それぞれのTRタグに順番にレコードの中身を埋め込みます。こうして、「ここからここまでを繰り返す」というような指定をしなくても、上記のTABLE要素の場合、レコード数分の行数のテーブルが作られます。\n\n                \n                    上記のTBODYのような繰り返しの親要素にあたる要素を「エンクロージャー」、そしてレコードの数だけ繰り返す要素を「リピーター」と呼びます。リピーターは単一のタグ要素かもしれませんが、その中に含まれるすべての要素を含むので、多数の要素ということになります。\n\n                エンクロージャーとリピーターとして利用できる要素として、次の表のようなものがあります。\n\n                \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                    \n                            用途\n                            エンクロージャー\n                            リピーター\n                        \n                            表\n                            TBODY\n                            TR（複数のTRも可能）\n                        \n                            ポップアップ\n                            SELECT\n                            OPITON\n                        \n                            リスティング\n                            UL, OL\n                            LI\n                        \n                            汎用\n                            class属性が_im_enclosureのDIV\n                            class属性が_im_repeaterのDIV\n                        \n                            汎用\n                            class属性が_im_enclosureのSPAN\n                            class属性が_im_repeaterのSPAN\n                        \n                \n\n                \n                    INTER-Mediatorはページファイルを解析して、ターゲットノードが見つかると、そこから上位の要素をたどり、リピーターを見つけてさらにそのエンクロージャーを特定します。そして、再度、リピーター内部についてすべてのターゲットノードを探すということを行います。\n\n                \n                    なお、1つのエンクロージャーにより展開においては、1つのコンテキストを利用してデータベースからデータを取り出すため、ターゲットノードでは単一の名前が指定されていることが必要です。前の例だと、2つのTDタグ要素のターゲット指定の最初のキーワードはaddressで同一でしたが、この状態が必要です。\n\n                \n                    TABLEタグによる表以外では、DIVやSPANでエンクロージャーとリピーターのセットを構築できるので、繰り返しの形式は表にはこだわりません。しかしながら、TABLEを使う事が多いでしょう。TBODY要素は記述しない場合、通常はブラウザが存在するものとして扱うので明示されていない場合もあります。ただし、見出しとデータを分離するには、THEADとTBODYで分離する記述を行う必要があります。\n\n            \n\n            \n                6. コンテキストでの検索とソート\n\n                \n                    データベースのテーブルから単にすべてのレコードを取り出すということをすることもありますが、一般には、条件を与えて絞り込みを行い、指定したフィールドのデータをもとにしたソートを行った結果を受け取ります。データベースの処理では、レコードを取り出すときだけでなく、特定のレコードの内容を修正するような場合には、検索条件を与えます。\n\n                INTER-Mediatorでは、コンテキストに検索条件やソート条件を記載することで、そのコンテキストを利用したデータベースからのデータ取り出しやデータ編集で、その検索条件が必ず常に付与される仕組みを持っています。\n\n                \n                    \n                        \n                        \n                        \n                        \n                    \n                            id\n                            pname\n                            tel\n                            device\n                        \n                            1\n                            山田一郎\n                            0123-456-9876\n                            iphone\n                        \n                            2\n                            風下寒子\n                            0123-456-9876\n                            iphone\n                        \n                            3\n                            屋根裏夫\n                            0123-456-9876\n                            ipad\n                        \n                \n\n                たとえば、以下のコンテキストだと、「pname = ‘風下寒子’」という検索条件がデータベースへのデータを取り出すときに追加され、pnameフィールドがこの名前の人のレコードだけが取り出されます。ここでは、queryに対する値は複数の項目を持つので、そのような場合には、[ ] で囲って記述することにします。\n                \n\n                \n                    name: address\nkey: id\nquery: [field: pname, operator: =, value: 風下寒子]\n                \n\n                operatorは利用するデータベースエンジンに依存します。MySQLでは文字列の前方一致は次のようなコンテキストで記述します。つまり「tel like ’03%’」という検索条件になり、telフィールドが03で始まるレコードが検索条件に一致します。MySQLのlike演算子では%がワイルドカードになり演算子の右側の文字列では複数個登場できます。また、ソート条件についても、fieldとdirectionの2つの指定が必要になり、fieldはもちろん基準になるフィールド名を指定します。directionは昇順か降順かを指定しますが、キーワードはデータベースエンジンに依存します。\n                \n\n                \n                    name: address\nkey: id\nquery: [field: tel, operator: like, value: 03%]\nsort: [field: pname, direction: asc]\n                \n\n                queryやsortは複数の指定が可能です。複数の指定がある場合は、[ ]で囲まれたセットをカンマで区切って記述することにします。以下のコンテキストの場合、telフィールドが03で始まり、deviceフィールドの内容がiphoneであるレコードが抽出されます。2つの条件が両方満たすAND条件として解釈されます。そしてレコードをpnameフィールドを基準に昇順でソートした結果を返します。\n                \n\n                \n                    name: address\nkey: id\nquery: [field: tel, operator: like, value: 03%],[field: device, operator: =, value: iphone]\nsort: [field: pname, direction: asc]\n                \n                今回の調査環境で利用しているMySQLで利用する演算子（operatorに記述できる記号）は次の通りです。\n\n                =：等しい、!=：等しくない、<：より小さい、>：より大きい、<=：以下、>=：以上、like：マッチング\n\n            \n\n            \n                7. マスター参照の組み込み\n\n                \n                    マスターにあるデータを使う\n\n                    \n                        住所録では名前や電話番号を記録するだけでなく、「友人」「会社関連」などといった分類を入力したいと思うかもしれません。通常、そうした情報を文字列で入れていても役に立つ場合がありますが、常に一定の情報を入れないと意味がない場合もあります。たとえば、売り上げを記録するのに同じ商品であれば、すべて同じ商品名である必要があります。そうしないと、商品ごとの集計が簡単にはできなくなります。\n\n                    \n                        このように、常に決まっているデータを入力したい場合、その決まったデータを単独のテーブルに入力し、そのテーブルの情報を参照して入力をします。こうした決まったデータを入れておくテーブルを「マスターテーブル」と一般には呼ばれています。\n\n                    住所録をaddressテーブルで作っているとして、分類を記録するconnectionテーブルがデータベースに用意されているとします。idとcnameの2つのフィールドがあり、idフィールドが主キーフィールドです。\n\n                    \n                        \n                            \n                            \n                            \n                            \n                        \n                                id\n                                cname\n                            \n                                1\n                                親戚\n                            \n                                2\n                                友人\n                            \n                                3\n                                会社関係\n                            \n                    \n\n                    \n                        ここで、住所録の各レコードで、種類を記録したいとします。そのような場合、以下のように、addressテーブルに、con_idフィールドを設けて、connectionテーブルのidフィールドと対応づけます。つまり、風下寒子さんは、「会社関係」の友人であることが記録されたわけです。\n\n                    \n                        \n                            \n                            \n                            \n                            \n                        \n                                id\n                                pname\n                                tel\n                                con_id\n                            \n                                1\n                                山田一郎\n                                0123-456-9876\n                                1\n                            \n                                2\n                                風下寒子\n                                0123-456-9876\n                                3\n                            \n                                3\n                                屋根裏夫\n                                0123-456-9876\n                                1\n                            \n                    \n\n                    \n                        このような、数字で突き合わせて2つのテーブルの値を合成するのは、一見すると分かりにくく、余分なことをしていると思うかもしれません。con_idというフィールドに直接「会社関係」と入力した方が手っ取り早いと思うかもしれません。\n\n                    \n                        まず、この方法の利点を説明しましょう。住所録にたくさんのデータが蓄積された後、「親戚」ではなくて「親類」に変更したいとします。上記のようなデータ構造を取っていれば、connectionフィールドのid=1のレコードのcnameフィールドを変更するだけですべて変更が完了します。addressフィールドのいくつかのレコードのあるフィールドに「親戚」という文字列が入っていたら、それらを検索して特定して、不定数のレコードに対する更新を正しく行う必要があり、より多くの作業が発生することになります。このように、表現や情報そのものを別途管理するということで、確実に同一の値を記録管理できるということです。\n\n                    このような複数のテーブルでデータを管理して突き合わせなどを行う仕組みを持っているのがリレーショナルデータベースの特徴です。マスターテーブルを使う手法はその代表的な利用方法です。\n\n                    \n                        この住所録が、顧客管理的なものだったとします。そして、各顧客に対するコンタクト（訪問、問い合わせ、電話連絡といったもの）を記録したい場合、addressテーブル以外に、コンタクトをいつ誰がどのような方法で行い、どうだったのかを記録するcontactテーブルを作ります。このとき、1人の顧客に対しては複数のコンタクト結果が発生することが想定されます。一方、1回のコンタクトは1顧客だけという運用をします。このような場合、顧客とコンタクトの関係は「1対多」と呼ばれます。contactテーブルには、対応するaddressテーブルのid値を入れるフィールド（たとえば、address_idフィールド）を用意して、そこに対応するレコードのidフィールドの値を入力します。逆に、addressフィールドには対応するcontactテーブルの主キー値を記録するフィールドは設けません。2つ以上かもしれないという数が決まらない問題もさることながら、contactテーブルのaddress_idフィールドの値から組み合わせは特定できることから、それ以上の対応付けのための情報は不要になります。\n\n                    コピーをする場合もある\n\n                    \n                        なお、ここで、マスターテーブルの値をコピーした方がいいような場合もあります。売り上げをテーブルで記録する場合、商品を別のテーブルで管理するという商品マスターを確保するのは典型的な設計手法です。商品マスター側では、商品名や単価を記録します。売り上げのテーブルでは、商品テーブルの特定のレコードを参照する情報をだけを記録するということができます。商品名や単価は売り上げのテーブルでは記録しないというわけです。\n\n                    \n                        しかしながら、そうなると、あるときある商品の単価が変わった場合、不都合が起きるかもしれません。商品マスターの単価を書き換えれば、過去の売り上げデータはすべて新しい単価で売ったという結果になります。このように、変更があるような情報については、商品マスターの単価の値を、売り上げのテーブルにもつどつどコピーして記録するのが一般的です。それでも「現在の単価」を記録する意味で商品テーブルを別に用意するのは、間違いなく入力できるなどのメリットをもたらすものです。\n\n                    ポップアップメニューで入力\n\n                    \n                        addressテーブルのcon_idフィールドに入力するためにポップアップメニューを利用したいとします。このとき、addressテーブルのためのコンテキストだけではなく、connectionテーブルのためのコンテキストも必要になります。定義ファイルでは複数のコンテキストを定義でき、それらは並べて記述します。以下のように、区切りに線を入れて、2つのコンテキストが定義されていることを示します。なお、connectionコンテキストについてはkeyの指定はあってもなくてもかまいません。connectionテーブルにクライアントから更新をすることがないので、必要ないのです。\n\n                    \n                        name: address\nkey: id\n    -\nname: con\nview: connection\n                    \n\n                    そして、ページファイルでは次のようなターゲット指定を持った要素が加わります。\n\n                    \n                        <table>\n    <thead>\n        <tr><th>名前</th><th>電話番号</th><th>分類</th></tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td data-im=\"address@pname\"></td>\n            <td data-im=\"address@tel\"></td>\n            <td>\n                <select data-im=\"address@con_id\">\n                    <option data-im=\"con@id@value con@cname\"></option>\n                </select>\n            </td>\n        </tr>\n    </tbody>\n</table>\n                    \n\n                    \n                        これで、テーブルには3つ目の「分類」列が追加され、各レコードに対してポップアップメニューが表示されます。すでにconn_idフィールドにデータがあれば、それに対応する選択肢が選択されているはずです。また、ポップアップメニューを選択すれば、その選択結果で、conn_idの値が更新されます。\n\n                    \n                        ページファイルのターゲット指定をあらためて解説をします。まず、addressコンテキストの展開中に、conという別のコンテキストが登場しています。ここでは、まず、TBODY/TRによるエンクロージャー/リピーターが識別されますが、そのとき、さらに内部にSELCT/OPTIONによるエンクロージャー/リピーターが存在しています。リピーター内部のエンクロージャー以下の要素は、データベースの結果を合成するときには特に何もしません。その代わり、データベースから得られたデータを合成した後、さらに内部のエンクロージャー/リピーターの展開に入ります。ここでは、名前と電話番号をTD要素の値に組み込んだ後、conというnameを持つコンテキストを見て、connectionテーブルへアクセスをしてレコードを受け取り、レコードの数だけOPTIONタグを複製して、OPTIONタグ要素内部にconnectionテーブルから得られた結果を合成します。\n\n                    \n                        OPTIONタグ要素では、2つの新しい内容が含まれています。まず、ターゲット指定は、半角スペースによって区切る事で1つの要素に複数の指定を入れる事ができ、それぞれの合成が行われます。ターゲット指定では@で区切られた3つ目の項目があります。3つ目の項目は、データベースのデータを設定する先を指定します。\n\n                    \n                        この場合だと、「con@id@value」という指定により、conコンテキスト（connectionテーブル）のidフィールドの値を、OPTIONタグ要素のvalue属性の値にします。続いて「con@cname」により、conコンテキストのcnameフィールドの値がOPTIONタグの値として設定され、その文字列が選択肢として見るようになります。結果として、ポップアップメニュー部分はデータベースから得れた結果を合成すると、次のようなHTMLと同じ結果になります。\n\n                    \n                        <select data-im=\"address@conn_id\">\n    <option data-im=\"con@id@value con@cname\" value=\"1\">親類</option>\n    <option data-im=\"con@id@value con@cname\" value=\"2\" >友人</option>\n    <option data-im=\"con@id@value con@cname\" value=\"3\" >会社関係</option>\n</select>\n                    \n\n                    ターゲット指定の3つ目の項目では、以下のような仕組みを利用できます。\n\n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                    省略：要素の値。ただし、フォーム要素は種類に応じて適切な属性へ設定属性名：その属性の値style.スタイル名：指定したスタイルの値（スタイル名はJavaScriptでのプロパティ名）innerHTML：要素のinnerHTML属性にフィールドの値を設定（$を最初に付加）：現在の値の中の$をフィールドの値に置き換える（#を最初に付加）：現在の値の後にフィールドの値を追加する\n            \n\n            \n                8. 関連レコードの展開\n\n                1対多の展開とリレーションシップ\n\n                \n                    前のページの例では、2つのテーブルを利用しましたが、2つ目のconnectionテーブルは、あるフィールドに入力する値を記録するものであり、その中の1つが選択されれるという関係でしたが、さらに複雑な関係がある場合について説明をします。\n\n                まず、住所録のaddressテーブルとして以下のようなものがあったとします。ここでの例は、con_idは利用しません。\n\n                \n                    \n                        \n                        \n                        \n                        \n                    \n                            id\n                            pname\n                            tel\n                            con_id\n                        \n                            1\n                            山田一郎\n                            0123-456-9876\n                            1\n                        \n                            2\n                            風下寒子\n                            0123-456-9876\n                            3\n                        \n                            3\n                            屋根裏夫\n                            0123-456-9876\n                            1\n                        \n                \n\n                \n                    addressテーブルが顧客を記録していて、営業部員が顧客に対するコンタクト内容を以下のようなcontactテーブルで記録していたとします。idフィールドが主キーになりますが、address_idには該当する顧客に関して、addressテーブルのその顧客のレコードのidフィールド値を記録します。たとえば、以下のid=2のテーブルは、address_idの値が「3」なので、「屋根裏夫」さんに関して、9月14日にメールで展示会の案内をしたということを記録していることになります。\n\n                \n                    \n                        \n                        \n                        \n                        \n                        \n                    \n                            id\n                            address_id\n                            dt\n                            memo\n                        \n                            1\n                            2\n                            2013-9-12 10:00\n                            電話したが不在\n                        \n                            2\n                            3\n                            2013-9-14 14:00\n                            メールで展示会の案内をした\n                        \n                            3\n                            2\n                            2013-9-15 17:00\n                            電話で展示会の案内をした\n                        \n                            4\n                            1\n                            2013-9-16 13:00\n                            訪問して商品説明した\n                        \n                \n\n                この2つのテーブルで、顧客ごとに、コンタクト情報を一覧するようなページを作るとします。定義ファイルは以下のような記述となります。ここで新たにrelationというキーワードが登場します。\n\n                \n                    name: address\nkey: id\n    -\nname: contact\nkey: id\nrelation: [foreign-key: address_id, join-field: id, operator: =]\n                \n\n                このrelationキーの値は、複数の項目からなっており、[ ] でその1つの項目を記述することにします。\n\n                ここで、 addressという名前のコンテキストがページファイル内で利用されるようなターゲット指定があるとします。このとき、addressテーブルからデータを取り出すのですが、階層関係にある上位のリピータに関して、join-fieldで指定したidフィールドの値を取り出し、addressテーブルでforeign-keyに指定したaddress_idの値とイコールなレコードだけに絞り込みます。この動作は実際のデータを考えた方が分かりやすいので、この後で動作を見ながらが説明します。\n                \n\n                ページファイルについては、次のようなものを作成したとします。前のページの例との違いは、外側のテーブルの3列目に、さらにテーブルがあって、そこにcontactテーブルの内容が展開されるという点です。\n\n                \n                    <table>\n    <thead>\n        <tr><th>名前</th><th>電話番号</th><th>分類</th></tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td data-im=\"address@pname\"></td>\n            <td data-im=\"address@tel\"></td>\n            <td>\n                <table>\n                    <thead>\n                        <tr><th>日時</th><th>連絡内容</th></tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td data-im=\"contact@dt\"></td>\n                            <td data-im=\"contact@memo\"></td>\n                        </tr>\n                    </tbody>\n                </table>\n            </td>\n        </tr>\n    </tbody>\n</table>\n                \n\n                実際にテーブルが作られる様子を、手順を追って説明します。ページ上に存在するテーブル部分を示します。\n                \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                BODY要素から探索されて、外側のTBODYとTRが、addressコンテキストを使用するエンクロージャー/リピーターとして識別されます。\n                        \n                            \n                                \n                                \n                            \n                                    名前\n                                    電話番号\n                                    連絡内容\n                                \n                                     \n                                     \n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                            \n                                                     \n                                                     \n                                                \n                                        \n                                    \n                                \n                        \n                    エンクロージャーからリピーターを取り除き、外側のテーブルのボディ部分がない状態になります。\n                        \n                            \n                                \n                            \n                                    名前\n                                    電話番号\n                                    連絡内容\n                                \n                        \n                    addressテーブルにアクセスして、データを取り出します。最初のid=1のレコードがあるので、リピーターを複製し、エンクロージャーの子要素に追加します。\n                        \n                            \n                                \n                                \n                            \n                                    名前\n                                    電話番号\n                                    連絡内容\n                                \n                                     \n                                     \n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                            \n                                                     \n                                                     \n                                                \n                                        \n                                    \n                                \n                        \n                    \n                        レコードの中にあるデータが、フィールドに応じてリピーター内部のaddressコンテキストのターゲット指定のある要素内に合成されます。つまり、最初のtdに「山田一郎」、次のtdに「0123-456-9876」という文字列データが埋め込まれます。\n                        \n                            \n                                \n                                \n                            \n                                    名前\n                                    電話番号\n                                    連絡内容\n                                \n                                    山田一郎\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                            \n                                                     \n                                                     \n                                                \n                                        \n                                    \n                                \n                        \n                    リピータ内部を探索すると、新たに3列目にさらにエンクロージャー/リピーターとなるTBODY/TRタグ要素が見つかります。ここでもリピーターを一度削除してエンクロージャの中身を空にします。\n                        \n                            \n                                \n                                \n                            \n                                    名前\n                                    電話番号\n                                    連絡内容\n                                \n                                    山田一郎\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n\n                                            \n                                        \n                                    \n                                \n                        \n                    現在作業中のリピーターはcontactコンテキストを使用する事が中身を解析する事で判別できます。\n                        contactコンテキストの定義に従ってcontactテーブルにアクセスします。このとき、relationキーの指定があるので、まず、その中のjoin-fieldを参照し「id」というフィールド名となっています。そこで、上位のリピーターについて、手順5で得ているようにidの値は「1」です。この値をforeign-keyに指定したaddress_idに持つレコードだけを取り出します。operatorは=なので、つまりは、contactテーブルを取り出すときに、address_id=1のレコードだけを取り出します。\n                    contactテーブルから、id=4の1つのレコードだけが取り出されました。手順5で切り出したリピーターを複製し、contactテーブルから得られたデータを合成します。ここではテーブルのTBODYに1行分のTRタグ要素が追加され、1列目には「2013-9-16 13:00」、2列目には「訪問して商品説明した」という文字が追加されます。\n                        \n                            \n                                \n                                \n                            \n                                    名前\n                                    電話番号\n                                    連絡内容\n                                \n                                    山田一郎\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                            \n                                                    2013-9-16 13:00\n                                                    訪問して商品説明した\n                                                \n                                        \n                                    \n                                \n                        \n                    内側のコンテキストによる展開はこれでいったん終了します。また、外側のリピーターに関してはエンクロージャー/リピータのセットは1つだけですので、これで最初のレコードに関する合成が終わります。外側のコンテキストは、2つ目のレコード、つまりid=2のレコードの展開を行います。外側のリピーターの複製を作り、エンクロージャーの子要素に追加します。そして、id=2のレコードのフィールドをリンクノードに合成します。\n                        \n                            \n                                \n                                \n                                \n                            \n                                    名前\n                                    電話番号\n                                    連絡内容\n                                \n                                    山田一郎\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                            \n                                                    2013-9-16 13:00\n                                                    訪問して商品説明した\n                                                \n                                        \n                                    \n                                \n                                    風下寒子\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                            \n                                                     \n                                                     \n                                                \n                                        \n                                    \n                                \n                        \n                    内部を探索すると手順6と同様に、エンクロージャーとリピーターのセットが存在します。リピーターを取り除きます。\n                        \n                            \n                                \n                                \n                                \n                            \n                                    名前\n                                    電話番号\n                                    連絡内容\n                                \n                                    山田一郎\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                            \n                                                    2013-9-16 13:00\n                                                    訪問して商品説明した\n                                                \n                                        \n                                    \n                                \n                                    風下寒子\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                            \n                                        \n                                    \n                                \n                        \n                    手順8と同様に、ここではid=2のaddressテーブルのレコードが上位のリピーター内に展開されているので、contactテーブルに対してaddress_id=2となるレコードに絞り込んでレコードを取り出します。id=1とid=3の2つのレコードが取り出されました。contactテーブルのid=1のレコードについて、手順14で取り出したリピーターを複製してレコード内のデータを合成して、エンクロージャーに追加します。\n                        \n                            \n                                \n                                \n                                \n                            \n                                    名前\n                                    電話番号\n                                    連絡内容\n                                \n                                    山田一郎\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                            \n                                                    2013-9-16 13:00\n                                                    訪問して商品説明した\n                                                \n                                        \n                                    \n                                \n                                    風下寒子\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                            \n                                                    2013-9-12 10:00\n                                                    電話したが不在\n                                                \n                                        \n                                    \n                                \n                        \n                    contactテーブルのid=3のレコードについて、手順14で取り出したリピーターを複製してレコード内のデータを合成して、エンクロージャーに追加します。\n                        \n                            \n                                \n                                \n                                \n                            \n                                    名前\n                                    電話番号\n                                    連絡内容\n                                \n                                    山田一郎\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                            \n                                                    2013-9-16 13:00\n                                                    訪問して商品説明した\n                                                \n                                        \n                                    \n                                \n                                    風下寒子\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                                \n                                            \n                                                    2013-9-12 10:00\n                                                    電話したが不在\n                                                \n                                                    2013-9-15 17:00\n                                                    電話で展示会の案内をした\n                                                \n                                        \n                                    \n                                \n                        \n                    内側のコンテキストの展開はこれで終了し、addressテーブルのid=2に対する展開は終了しました。addressテーブルのid=3に対する展開も同様に行います。\n                        \n                            \n                                \n                                \n                                \n                                \n                            \n                                    名前\n                                    電話番号\n                                    連絡内容\n                                \n                                    山田一郎\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                            \n                                                    2013-9-16 13:00\n                                                    訪問して商品説明した\n                                                \n                                        \n                                    \n                                \n                                    風下寒子\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                                \n                                            \n                                                    2013-9-12 10:00\n                                                    電話したが不在\n                                                \n                                                    2013-9-15 17:00\n                                                    電話で展示会の案内をした\n                                                \n                                        \n                                    \n                                \n                                    屋根裏夫\n                                    0123-456-9876\n                                    \n                                        \n                                            \n                                                \n                                                    日時\n                                                    連絡内容\n                                                \n                                            \n                                            \n                                                \n                                            \n                                                    2013-9-14 14:00\n                                                    メールで展示会の案内をした\n                                                \n                                        \n                                    \n                                \n                        \n                    \n            \n\n            \n                9. テキスト以外のUI要素の利用\n\n                チェックボックスの利用\n\n                \n                    フィールドのデータと連動させたいチェックボックスを作る場合は、チェックボックスのタグ記述を通常通り行い、class属性にターゲット指定を記述します。そして、value属性についても空文字列でない何らかのデータを記述します。\n\n                \n                    <input type=\"checkbox\" value=\"1\"\n    data-im=\"address@check\"/>\n                \n\n                上記のタグ要素の場合、addressコンテキストのテーブルのcheckフィールドと連動します。チェックが入るとcheckフィールドの値はvalue属性の値の「1」になり、checkをはずすと \"\"（長さ0の文字列ないしはNULL） となります。また、ページ合成時には、checkフィールドの値とvalueの値が同じならチェックが入るようになります。\n                \n\n                ラジオボタンの利用\n\n                \n                    ラジオボタンもチェックボックスと同様に、inputタグ要素で記述します。本来はname属性が同一のものを1つのセットとして扱いますが、INTER-Mediatorでは、同一リピーター内の同一ターゲット指定の物を1つのセットにするので、name属性は不要です。展開時に自動的に属性は設定されます。\n\n                \n                    <input type=\"radio\" value=\"1\" data-im=\"address@kind\"/>\n<input type=\"radio\" value=\"2\" data-im=\"address@kind\"/>\n<input type=\"radio\" value=\"3\" data-im=\"address@kind\"/>\n                \n\n                選択したボタンのvalue属性が記録され、また、ページ表示時にはフィールドの値に対応したラジオボタンが選択されています。\n\n                画像の利用\n\n                \n                    INTER-Mediatorでは画像を扱ういくつかの方法に対応していますが、代表的な手法は、Webサイト上で公開されている画像ファイルへのアクセスです。HTMLページと同一ディレクトリにある「img」ディレクトリに画像ファイルがあるとします。そして、あるテーブルで「picfile」フィールドがあり、画像ファイルのファイル名があるとします。このとき、以下のimgタグ要素はターゲット指定となって、picfileフィールドの値をsrc属性に合成します。\n\n                \n                    <img src=\"img/\" data-im=\"product@picfile@#src\" />\n                \n\n                \n                    テーブルはproductコンテキストから取り出されるとします。picfileの値が「goods1.jpg」だとすると、コンテキスト指定の3つ目の記述「#src」により、src属性にフィールドの値を追加します。結果として、src属性の値は「img/goods1.jpg」となり、クライアントが指定されたURIをダウンロードして画像として表示するようになります。\n\n                ページネーションとナビゲーション\n\n                \n                    検索して得られたレコードが複数ある場合、レコードの数だけリピーターが複製されますが、何百もあると時間もかかりますし、参照する方も大変です。Webページではそのような場合、一定数のレコードごとにページ表示を切り替える「ページネーション」の仕組みを組み込みます。\n\n                INTER-Mediatorでは、1つのページにつき、1つのコンテキストに対してページネーションが可能です。addressテーブルが数百件あるような場合、たとえばコンテキストとして次のように記述します。\n\n                \n                    name: address\nkey: id\nrecords: 10\npaging: true\n                \n\n                まず、recordsキーの値により、レコードは10件ずつ表示されます。いちばん最初は最初の10件のみとなります。pagingに対する値がtrueの場合、たとえばTABLEタグのすぐ上に、次のようなタグを記述します。\n\n                \n                    <div id=\"IM_NAVIGATOR\"></div>\n                \n\n                \n                    すると、このDIVタグ要素の中に、前後のレコードに移動したり、最初や最後のレコードに移動するコントロールを作成できます。例えば、次のようなものが表示されます。ボタンの背景や文字などにはすべてスタイルを設定できるようにclass属性が適用されているので、ページごとに表示形態は任意にカスタマイズできます。ただし一切のスタイルを設定しないと、文字が単に並ぶだけで操作できなくはありませんが、かなり使いづらい状態と言えるでしょう。\n                \n                    \n                \n                レコード作成や削除のボタン配置\n\n                \n                    データベースのテーブルでは、新規作成や削除はレコード単位で行います。フィールドの作成や削除もできますが、データの入力や検索を行うときにはフィールド単位の処理は行いません。新規レコードを作ると、定義してあるフィールドは、中身が空かもしれませんがすべて用意され、フィールドの中にあるデータを修正することができるようになります。空のフィールドに何か数値を入れるのも、「修正」とみなします。\n\n                INTER-Mediatorでは、コンテキストで、 repeat-controlというキーに対する値を設定することで、そのコンテキストの検索結果をHTMLに埋め込む段階で、レコード削除や作成のボタンを作ります。このキーの値は、「insert」「insert-top」「delete」「confirm-insert」「confirm-insert-top」「confirm-delete」のいずれかで、insertは新規レコード、deleteは削除に関する機能です。confirmが付くと削除や作成前にダイアログボックスで確認します。新規レコードボタンで-topが付くものは、繰り返されるリピーターの前にボタンを作成し、-topが付いていない場合には繰り返されるリピータの後にボタンを作成します。なお、削除ボタンは各リピーターの末尾に追加され、レコードの数だけ表示されます。\n                \n\n                ただし、ページネーションが機能している場合、新規レコード作成のボタンは、ページネーションの要素の中に、テキストのボタンとして追加されます。\n\n                \n                    たとえば、以下のようなコンテキストだと、addressテーブルの内容を表示するとき、一連のリピーターの最後に「挿入」ボタンが作られます。また、レコードごとに「削除」ボタンが作られますが、削除ボタンをクリックすると削除していいかどうかをたずねるダイアログボックスが表示されます。\n\n                \n                    name: address\nkey: id\nrepeat-control: confirm-delete insert\n                \n            \n\n            \n                10. INTER-Mediatorのその他の機能\n\n                \n                    このページでは、INTER-Mediatorの機能について、ここまでのところでは触れていないことについてまとめておきます。これらの機能については、この後の試験問題では触れていません。プログラミングなどの技術的な知識背景がないと理解がしづらい事柄が中心です。それでも、ここまでの解説を読んで、他にどんな機能があるのかを興味を持っていただけたのであれば、INTER-Mediatorの全体像を知るのに有用な情報になると思われます。\n\n                \n                    以下、（設定）は定義ファイルの設定やページファイル内のターゲット指定で実現できるものです。（JavaScript）はJavaScript言語でプログラムを記述する場合に利用できる機能です。（PHP）はサーバーサイドでのPHP言語によるプログラムの追加が必要な機能です。\n\n                \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                日付・時刻を書式を整えた形式で表示したり、数値フィールドのデータをカンマ付きの数字や通貨記号付きで表示したりする機能があります。また、修正結果を元のフィールドに書き戻すこともできます。（設定）\n                        データベースから得れた文字列について文字実体参照にして、HTMLとしてテキストエリア等で編集できるようにする仕組みがあります。加えてタグ要素のinnerHTMLにデータベースから得られたデータを代入することもできます。（設定）\n                    \n                        新規レコードを作成するための専用のページを構築でき、その中のポップアップメニュー等はマスターテーブルから構築する事ができます。ボタンを押た後にボタンを消してメッセージを表示し、別のページに自動的に移動します。（設定）\n                    検索条件では、OR条件の設定も可能です。（設定）対応ブラウザを定義し、ブラウザを判別して対応外の場合にはメッセージを表示して処理を行わないようにする仕組みがあります。（設定＋JavaScript）JavaScriptのライブラリをパーツとして使用する機能があり、ファイルのアップロードやHTMLエディなど一部はプログラミングなしに使えます。（設定+JavaScript）\n                        認証や認可の仕組みを利用できます。認証では、ユーザテーブルをデータベースに確保し、グループの設定もできます。またデータベースエンジンのネイティブユーザでの認証もできます。認可ではコンテキスト単位の処理の可否や認証の要求ができます。さらにレコード単位に特定のユーザやグループに対してのみ利用できるような設定もできます。認証のためのログインパネルをカスタマイズすることもできます。画像などのメディアファイルに対する認可の仕組みの適用もできます。（設定）\n                    データベースへの要求や応答結果を変換する仕組みを追加できます。この仕組みにより検索条件をデータに合わせて変更したり、得られた検索結果を集計して戻すなどの処理ができます。（PHP）クライアント側のプログラムでは、エンクロージャーやリピーターの合成時に割り込み処理を入れる事などが可能です。（JavaScript）クライアント側のプログラミングをサポートするために、データベースのデータを織り込んだ結果から、特定のフィールドと関連付けられている要素を参照するためのid属性を得るメソッドなどが用意されています。修正時に値のチェックができ、内容に応じてメッセージを出すことができます。（設定）楽観的ロックにより、同一フィールドを同時に2人で変更した場合、後から保存しようとしたユーザの側に警告メッセージを表示し、更新をキャンセルすることもできます。\n            \n        "
}, {
    "id": 10,
    "parent": "/ja/for-novices/",
    "path": "/ja/for-novices/handson.html",
    "title": "ハンズオンセッション手順書",
    "breadcrumb": "ハンズオンセッション手順書",
    "body": "\n            \n                はじめに\n                この手順書は、2015年4月11日の勉強会で利用するために当初作成したものを、その後に改定してきたものです。個人で進めることもできますが、この手順書を利用して、2〜3時間のハンズオンをオフラインで開催することもできます。INTER-Mediatorをまったく触ったことがないが、どんな感じなのかを知りたい方、あるいはINTER-Mediator普及のために、活用していただけます。\n            \n            \n                使用までの準備\n                INTER-Mediatorがインストールされた動くサーバのVirtual Machineを参照して、INTER-Mediatorが稼働するVMを用意してください。ダウンロードしてすぐにINTER-Mediatorを稼働することができます。\n                MySQLをご利用される方は、上記のVMで準備完了です。FileMaker Serverを利用される方は、ホストOS側に、FileMaker Serverをインストールしてください。加えて、こちらのリンク先のデータベースファイルTestDBをダウンロードして、FileMaker Serverで公開をしておいてください。\n                なお、以下の手順では、VirtualBoxのホストオンリーアダプターが、既定の設定（ホストのIPアドレスが192.168.56.1、ゲストが192.168.56.101）になっていることを前提として記述しています。\nVMの準備が整ったら、VMを起動します。そして、ホストOS側では、ブラウザを起動して、http://192.168.56.101/ に接続します。\nhttp://192.168.56.101/ で表示されるページ＝「VMのホーム」と呼びます。\n            \n            \nセッション1：入力専用ページ\n1-1：質問の入力ページを作る\n定義ファイルの作成（ファイル名：def01.php）\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\nVMのホームで、「def01.phpを編集」をクリックします。Queryの下にある行の右側の「削除」をクリックして、Queryの下に行がないようにします。Sortの下にある行の右側の「削除」をクリックして、Sortの下に行がないようにします。nameに「survey」、keyに「id」と入力します。Contextsセクションには、この2つのテキストフィールドだけがあるようにします。Optionsセクションには何も入力されていない状態のままでかまいません。Database Settingsセクションには以下のように入力します。\n\n\t\n\t\n[FileMaker Server] Database Settingsセクションのdb-classには「FileMaker_FX」、databaseには「TestDB」、userには「web」、passwordには「password」、serverには「192.168.56.1」、portには「80」、protocolには「http」、datatypeには「FMPro12」と入力します。[MySQL] Database Settingsセクションのdb-classには「PDO」、dsnには「mysql:host=localhost;dbname=test_db;charset=utf8mb4」userには「web」、passwordには「password」と入力します。\nDebugのところは「false」と入力します。\n\nページファイルの作成（ファイル名：page01.html）\n\n\t\n\t\nVMのホームで、「page01.htmlを編集」をクリックします。ページファイルエディターが起動します。以下のソースコードを入力します。\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <title>INTER-Mediator Demo</title>\n    <script type=\"text/javascript\" src=\"def01.php\"></script>\n</head>\n<body>\n<table>\n    <tbody data-im-control=\"post\">\n    <tr><th>名前</th><td><input type=\"text\" data-im=\"survey@Q5\"/></td></tr>\n    <tr><th>質問1</th><td><input type=\"text\" data-im=\"survey@Q1\"/></td></tr>\n    <tr><th></th><td><button data-im-control=\"post\">Answer</button></td></tr>\n    </tbody>\n</table>\n</body>\n</html>\n\nコード内で変更や追加をする箇所は、下線で示します。\n\nページを表示してフォーム入力を行う\n\n\t\n\t\n\t\n\t\nVMのホームで、「page01.htmlを表示する」をクリックします。フォームが表示されます。適当に入力して、Answerボタンをクリックします。\n\t\n\t\t\n\t\t\n[FileMaker Server] TestDBのsurveyレイアウトを確認して、データが入力されていることを確認します。[MySQL] test_dbのsurveyテーブルを確認して、データが入力されていることを確認します。以下、いちばん手軽な手順を示します。\n\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\tVirtualBoxのVMのウインドウ（真っ黒のウインドウ）をクリックして、ユーザ名「developer」、パスワード「im4135dev」でログインをします。プロンプトで、「mysql -u web -p test_db -e 'select * from survey;'」と入力します。パスワードをたずねられるので「password」と入力します。\n\t\n適当にいくつかフォーム入力して、レコードが増えることを確認します。\n\n1-2：入力フォームらしい感じにする\n\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\nVMのホームで、「def01.phpを編集」をクリックするか、すでに開いている定義ファイルエディターのページを参照します。右上のShow Allボタンをクリックします。post-reconstructに「true」と入力します。post-dismiss-messageに「送信しました」と入力します。post-move-urに「http://inter-mediator.org/」と入力します。URLは別のものでもかまいません。その後、入力を確定するために、Tabキーを押しておきます。VMのホームで、「page01.htmlを表示する」をクリックするか、すでに開いているpage01.htmlを更新します。フォームが表示されます。適当に入力して、Answerボタンをクリックします。今度は、Answerボタンが消え、数秒後に別のページにジャンプしました。\n\n\t\n\t\n[FileMaker Server] TestDBのsurveyレイアウトを確認して、データが入力されていることを確認します。[MySQL] test_dbのsurveyテーブルを確認して、データが入力されていることを確認します。（手順はすでに説明しました。）\n\n\n1-3：テキストフィールド以外のフォーム要素\n\nチェックボックス\n\npage01.htmlの中のTABLEタグの内容を以下の様に変更して、フォームを表示すると、チェックボックスが追加されます。フォームに入力して、Answerボタンを押してみて、データベースにどのように入力されるのかを確認しましょう。\n\n\n<table>\n    <tbody data-im-control=\"post\">\n    <tr><th>名前</th><td><input type=\"text\" data-im=\"survey@Q5\"/></td></tr>\n    <tr><th>質問1</th><td><input type=\"text\" data-im=\"survey@Q1\"/></td></tr>\n    <tr><th>質問2</th>\n    <td><input type=\"checkbox\" value=\"1\" data-im=\"survey@Q2\"/>はい</td>\n    </tr>\n    <tr><th></th><td><button data-im-control=\"post\">Answer</button></td></tr>\n    </tbody>\n</table>\n</body>\n</html>\n\n\nラジオボタン\n\npage01.htmlの中のTABLEタグの内容を以下の様に変更して、フォームを表示すると、ラジオボタンが追加されます。フォームに入力して、Answerボタンを押してみて、データベースにどのように入力されるのかを確認しましょう。\n\n\n<table>\n    <tbody data-im-control=\"post\">\n    <tr><th>名前</th><td><input type=\"text\" data-im=\"survey@Q5\"/></td></tr>\n    <tr><th>質問1</th><td><input type=\"text\" data-im=\"survey@Q1\"/></td></tr>\n    <tr><th>質問2</th>\n    <td><input type=\"checkbox\" value=\"1\" data-im=\"survey@Q2\"/>はい</td>\n    </tr>\n    <tr><th>質問3</th>\n    <td><div>\n    <input type=\"radio\" value=\"11\" name=\"q3\" data-im=\"survey@Q3\"/>東\n    <input type=\"radio\" value=\"12\" name=\"q3\" data-im=\"survey@Q3\"/>西\n    <input type=\"radio\" value=\"13\" name=\"q3\" data-im=\"survey@Q3\"/>南\n    <input type=\"radio\" value=\"14\" name=\"q3\" data-im=\"survey@Q3\"/>北\n    </div></td>\n    </tr>\n    <tr><th></th><td><button data-im-control=\"post\">Answer</button></td></tr>\n    </tbody>\n</table>\n</body>\n</html>\n\n\nチェックボックスセット\n\npage01.htmlの中のTABLEタグの内容を以下の様に変更して、フォームを表示すると、チェックボックスセットが追加されます。フォームに入力して、Answerボタンを押してみて、データベースにどのように入力されるのかを確認しましょう。\n\n\n<table>\n    <tbody data-im-control=\"post\">\n    <tr><th>名前</th><td><input type=\"text\" data-im=\"survey@Q5\"/></td></tr>\n    <tr><th>質問1</th><td><input type=\"text\" data-im=\"survey@Q1\"/></td></tr>\n    <tr><th>質問2</th>\n    <td><input type=\"checkbox\" value=\"1\" data-im=\"survey@Q2\"/>はい</td>\n    </tr>\n    <tr><th>質問3</th>\n    <td><div>\n    <input type=\"radio\" value=\"11\" name=\"q3\" data-im=\"survey@Q3\"/>東\n    <input type=\"radio\" value=\"12\" name=\"q3\" data-im=\"survey@Q3\"/>西\n    <input type=\"radio\" value=\"13\" name=\"q3\" data-im=\"survey@Q3\"/>南\n    <input type=\"radio\" value=\"14\" name=\"q3\" data-im=\"survey@Q3\"/>北\n    </div></td>\n    </tr>\n    <tr><th>質問4</th>\n    <td><div data-im-group=\"survey@Q4\">\n    <input type=\"checkbox\" value=\"21\"/>Docomo\n    <input type=\"checkbox\" value=\"22\"/>au\n    <input type=\"checkbox\" value=\"23\"/>Softbank\n    <input type=\"checkbox\" value=\"24\"/>Willcom\n    </div></td>\n    </tr>\n    <tr><th></th><td><button data-im-control=\"post\">Answer</button></td></tr>\n    </tbody>\n</table>\n\n\n1-4：回答を一覧表示する\n\n定義ファイルの作成（ファイル名：def02.php）\n\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\nVMのホームで、「def02.phpを編集」をクリックします。Queryの下にある行の右側の「削除」をクリックして、Queryの下に行がないようにします。Sortの下にある行の右側の「削除」をクリックして、Sortの下に行がないようにします。nameに「survey」、keyに「id」と入力します。recordsには「10」、maxrecordsにも「10」と入力します。Optionsセクションには何も入力されていない状態のままでかまいません。\n\n\t\n\t\n[FileMaker Server] Database Settingsセクションのdb-classには「FileMaker_FX」、databaseには「TestDB」、userには「web」、passwordには「password」、serverには「192.168.56.1」、portには「80」、protocolには「http」、datatypeには「FMPro12」と入力します。[MySQL] Database Settingsセクションのdb-classには「PDO」、dsnには「mysql:host=localhost;dbname=test_db;charset=utf8mb4」、userには「web」、passwordには「password」と入力します。\nDebugのところは「false」と入力します。\n\nページファイルの作成（ファイル名：page02.html）\n\n\n\t\n\t\nVMのホームで、「page02.htmlを編集」をクリックします。ページファイルエディターが起動します。以下のソースコードを入力します。\n\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <title>INTER-Mediator Demo</title>\n    <script type=\"text/javascript\" src=\"def02.php\"></script>\n</head>\n<body>\n<table>\n    <thead>\n        <tr><th>id</th><th>名前</th>\n        <th>質問1</th><th>質問2</th>\n        <th>質問3</th><th>質問4</th></tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td data-im=\"survey@id\"></td>\n            <td data-im=\"survey@Q5\"></td>\n            <td data-im=\"survey@Q1\"></td>\n            <td data-im=\"survey@Q2\"></td>\n            <td data-im=\"survey@Q3\"></td>\n            <td data-im=\"survey@Q4\"></td>\n        </tr>\n    </tbody>\n</table>\n</body>\n</html>\n\n\n\n\t\nVMのホームで、「page02.htmlを表示する」をクリックします。回答一覧が表示されました。\n\nページネーション、追加、削除\n\n\n\t\n\t\n\t\nVMのホームで、「def02.phpを編集」をクリックするか、すでに開いている定義ファイルエディターのページを参照します。pagingに「true」、repeat-controlに「confirm-insert confirm-delete」と入力します。VMのホームで、「page02.htmlを編集」をクリックするか、あるいはすでに開いているページファイルエディターを表示して。以下のソースコードを入力します。「名前」の列はテキストフィールドにします。\n\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <title>INTER-Mediator Demo</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"INTER-Mediator/Samples/sample.css\">\n    <script type=\"text/javascript\" src=\"def02.php\"></script>\n</head>\n<body>\n<div id=\"IM_NAVIGATOR\"></div>\n<table>\n    <thead>\n        <tr><td>名前</td><td>質問1</td><td>質問2</td><td>質問3</td><td>質問4</td></tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td><input type=\"text\" data-im=\"survey@Q5\"/></td>\n            <td data-im=\"survey@Q1\"></td>\n            <td data-im=\"survey@Q2\"></td>\n            <td data-im=\"survey@Q3\"></td>\n            <td data-im=\"survey@Q4\"></td>\n            <td></td>\n        </tr>\n    </tbody>\n</table>\n</body>\n</html>\n\n\n\n\t\n\t\n\t\n\t\nVMのホームで、「page02.htmlを表示する」をクリックするか、すでに表示されているのならそのページを更新します。回答一覧が表示されました。レコードの追加削除ができることを確認します。名前の文字列を修正して、Tabキーを押し、データベースの内容を確認して、データの修正ができることを確認します。10レコード以上に増やしてみて、10レコードずつ表示されることを確認します。\n\n\n\n\n\nセッション2：住所録\n\n定義ファイルの作成（ファイル名：def03.php）\n\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\nVMのホームで、「def03.phpを編集」をクリックします。Queryの下にある行の右側の「削除」をクリックして、Queryの下に行がないようにします。Sortの下にある行の右側の「削除」をクリックして、Sortの下に行がないようにします。\n\n\t\n\t\n[FileMaker Server] nameに「person_list」、tableを「person_layout」、viewに「person_layout」、keyに「-recid」、pagingに「true」、repeat-controlに「insert」、recordsに「10」、maxrecordsに「100」と入力します。他は空白にします。[MySQL] nameに「person_list」、keyに「id」、viewに「person」、pagingに「true」、repeat-controlに「insert」、recordsに「10」、maxrecordsに「100」と入力します。他は空白にします。\nOptionsセクションには何も入力されていない状態のままでかまいません。\n\n\t\n\t\n[FileMaker Server] Database Settingsセクションのdb-classには「FileMaker_FX」、databaseには「TestDB」、userには「web」、passwordには「password」、serverには「192.168.56.1」、portには「80」、protocolには「http」、datatypeには「FMPro12」と入力します。[MySQL] Database Settingsセクションのdb-classには「PDO」、dsnには「mysql:host=localhost;dbname=test_db;charset=utf8mb4」、userには「web」、passwordには「password」と入力します。\nDebugのところは「false」と入力します。\n\nページファイルの作成（ファイル名：page03.html）\n\n\n\t\n\t\nVMのホームで、「page03.htmlを編集」をクリックします。ページファイルエディターが起動します。以下のソースコードを入力します。\n\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <title>INTER-Mediator Demo</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"INTER-Mediator/Samples/sample.css\">\n    <script type=\"text/javascript\" src=\"def03.php\"></script>\n</head>\n<body>\n<div id=\"IM_NAVIGATOR\"></div>\n<table>\n    <tbody>\n        <tr><td></td><td data-im=\"person_list@name\"></td></tr>\n    </tbody>\n</table>\n</body>\n</html>\n\n\n\n\t\nVMのホームで、「page03.htmlを表示する」をクリックします。適当な一覧が見えています。\n\nコンテキストの追加（ファイル名：def03.php）\n\n\n\t\n\t\n\t\nVMのホームで、「def03.phpを編集」をクリックするか、すでに開いている定義ファイルエディターのページを参照します。Contextsの下の「追加」ボタンをクリックします。nameが「= new context =」の項目が増えました。\n\n\t\n\t\n[FileMaker Server] 増えた項目で、nameを「person_detail」、tableを「person_layout」、viewを「person_layout」、keyを「-recid」、recordsを「1」、maxrecordsを「100」として、あとは空白のままにします。[MySQL] 増えた項目で、nameを「person_detail」、viewを「person」、keyを「id」、recordsを「1」、maxrecordsを「100」として、あとは空白のままにします。\n\n\nページファイルの作成（ファイル名：page03.html）\n\n\n\t\n\t\nVMのホームで、「page03.htmlを編集」をクリックするか、すでに開いている場合にはそのページを更新します。ページファイルエディターで、以下のソースコードを変更します。\n\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <title>INTER-Mediator Demo</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"INTER-Mediator/Samples/sample.css\">\n    <script type=\"text/javascript\" src=\"def03.php\"></script>\n</head>\n<body>\n<div id=\"IM_NAVIGATOR\"></div>\n  <table>\n    <tbody>\n        <tr><td data-im=\"person_list@name\"></td></tr>\n    </tbody>\n  </table>\n  <table>\n    <tbody>\n      <tr>\n        <th>名前</th>\n        <td><input type=\"text\" data-im=\"person_detail@name\"/></td>\n      </tr>\n      <tr>\n        <th>住所</th>\n        <td><input type=\"text\" data-im=\"person_detail@address\"/></td></tr>\n      <tr>\n        <th>メール</th>\n        <td><input type=\"text\" data-im=\"person_detail@mail\"/></td>\n      </tr>\n      <tr>\n        <th>地域</th>\n        <td><input type=\"text\" data-im=\"person_detail@location\"/></td>\n      </tr>\n      <tr>\n        <th>分類</th>\n        <td><input type=\"text\" data-im=\"person_detail@category\"/></td>\n      </tr>\n      <tr>\n        <th>メモ</th>\n        <td><textarea data-im=\"person_detail@memo\"></textarea></td>\n      </tr>\n    </tbody>\n  </table>\n</body>\n</html>\n\n\n\n\t\nVMのホームで、「page03.htmlを表示する」をクリックするか、すでに表示されているページを更新します。一覧の下に、なんとなく、編集フォームのようなものが登場しました。\n\niPadのようなナビゲーションを実現する\n\n\n\t\npage03.htmlの編集ページを表示します。以下の様に、2つあるTABLEタグにstyle属性を設定します。また、最後のTABLE閉じタグのあとに、BRタグを追加します。\n\n\n<table style=\"float: left\">\n\t:\n</table>\n<table style=\"float: left; margin-left: 12px\">\n\t:\n</table>\n<br clear=\"all\"/>\n\n\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\nVMのホームで、「page03.htmlを表示する」をクリックするか、すでに表示されているページを更新します。一覧と詳細が左右に分離しました。VMのホームで、「def03.phpを編集」をクリックするか、すでに開いている定義ファイルエディターのページを参照します。nameが「person_list」の方のnavi-controlを「master-hide」にします。nameが「person_detail」の方のnavi-controlを「detail」にします。VMのホームで、「page03.htmlを表示する」をクリックするか、すでに表示されているページを更新します。一覧と詳細を行き来するユーザインタフェースができあがりました。＜バグ発見…＞nameが「person_list」の方のnavi-controlを「master」にします。VMのホームで、「page03.htmlを表示する」をクリックするか、すでに表示されているページを更新します。スプリットビュー的な表示になりました。＜バグ発見…＞\n\n\n\nセッション3：伝票とリレーションシップ\n\n\t\ndef04.phpに、以下の様に3つのコンテキストの定義を行います。このセッションから、細かな手順の説明は行いません。定義ファイルエディターで開き、Show Allボタンを押して、全項目を表示しながら作業をしましょう。\n\n\nname: invoice\nkey: id\npaging: true\nrepeat-control: confirm-insert confirm-delete\nrecords: 1\nmaxrecords: 100\nCalculation:\n    [field: total_calc, expression: format(sum(item@amount_calc))]\n\nname: item\nkey: id\nrepeat-control: confirm-insert confirm-delete\nrecords: 100\nmaxrecords: 100\nRelationship:\n    [foreign-key: invoice_id, join-field: id, operator: =] 　// ←[MySQL]の場合\n    [foreign-key: invoice_id, join-field: id, operator: eq]  // ←[FileMaker Server]の場合\nCalculation:\n    [field: amount_calc, expression: format(qty * product@unitprice)]\n\nname: product\nkey: id\nrecords: 100\nmaxrecords: 100\nRelationship:\n    [foreign-key: id, join-field: product_id, operator: =] 　// ←[MySQL]の場合\n    [foreign-key: id, join-field: product_id, operator: eq]  // ←[FileMaker Server]の場合\n\n\n\n\t\n\t\n\t[FileMaker Server] Database Settingsセクションのdb-classには「FileMaker_FX」、databaseには「TestDB」、userには「web」、passwordには「password」、serverには「192.168.56.1」、portには「80」、protocolには「http」、datatypeには「FMPro12」と入力します。\n\t[MySQL] Database Settingsセクションのdb-classには「PDO」、dsnには「mysql:host=localhost;dbname=test_db;charset=utf8mb4」、userには「web」、passwordには「password」と入力します。\n\nDatabase Settingsの設定は、前のセッションと同一にします。\n\n\t\npage04.htmlは以下の様に入力します。\n\n\n<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <title></title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"INTER-Mediator/Samples/sample.css\">\n     <script type=\"text/javascript\" src=\"def04.php\"></script>\n</head>\n<body>\n<div id=\"IM_NAVIGATOR\"></div>\n<table border=\"1\">\n    <tbody>\n    <tr>\n        <th>id</th>\n        <td><input type=\"text\" data-im=\"invoice@id\"></td>\n    </tr>\n    <tr>\n        <th>issued</th>\n        <td><input type=\"text\" data-im=\"invoice@issued\" value=\"\"></td>\n    </tr>\n    <tr>\n        <th>title</th>\n        <td><input type=\"text\" data-im=\"invoice@title\" value=\"\"></td>\n    </tr>\n    <tr>\n        <td colspan=\"2\">\n            <table border=\"1\">\n                <thead>\n                <tr>\n                    <th>product</th>\n                    <th>qty</th>\n                    <th>unitprice (master)</th>\n                    <th>amount</th>\n                    <th></th>\n                </tr>\n                </thead>\n                <tbody>\n                <tr>\n                    <td>\n                       <input type=\"text\" data-im=\"item@product_id\" size=\"2\">\n                       <span class=\"inline\" data-im-control=\"enclosure\">\n                            <span class=\"inline\" data-im-control=\"repeater\" data-im=\"product@name\"></span>\n                        </span>\n                    </td>\n                    <td><input class=\"price\" type=\"text\" data-im=\"item@qty\" size=\"5\"></td>\n                    <td>\n                        <span class=\"inline\" data-im-control=\"enclosure\">\n                            <span class=\"inline\" data-im-control=\"repeater\" data-im=\"product@unitprice\"></span>\n                        </span>\n                      </td>\n                   <td align=\"right\">\n                      <span align=\"right\" data-im=\"item@amount_calc\"></span>\n                  </td>\n                  <td></td>\n                </tr>\n                </tbody>\n            </table>\n        </td>\n    </tr>\n    <tr>\n        <th>Total:</th>\n        <td data-im=\"invoice@total_calc\"></td>\n    </tr>\n    </tbody>\n</table>\n</body>\n</html>\n\n\n\n\t\n実行します。以下の点を確認しましょう。\n\n\t\n\t\n\t\n\t\n伝票での明細行に相当する仕組みがリレーションシップにより取り出されています。明細の各行では、商品マスターからの商品名と単価の取り出しが行われています。productの数字を書き換えると、商品マスターの違うレコードが取り出されます。qtyを変更すると、単価x個数が計算され直され、トータルも再計算されています。\n\n\nセッション4：資産管理\nアプリケーションの動作の確認\nこのセッションでは、INTER-Mediatorのサンプルにあるアプリケーションの動作を調べて、アプリケーションの改変を行います。\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\nVMのホーム（http://192.168.56.101/ で表示されるページ）開きます。「リンク」の中に、「サンプルプログラム」というリンク文字列があります。こちらをクリックします。「INTER-Mediator Samples」というページが表示されます。この中の、Asset Management Sampleという行を特定します。MySQLあるいはFileMakerの列の「Improved」というリンクをクリックします。どこかの会社の機材の管理データベースのようです。まず、このファイルのファイル名をメモしてください。＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿「詳細」ボタンを押してみます。詳細部分が表示されました。その機材の貸出履歴が出てきました。「追加」ボタンをクリックすると、現在の日付が「貸出日」に設定されて新たなレコードが追加されます。担当者やメモは適当に設定します。「本日返却」ボタンをクリックすると、返却日が空欄の貸出履歴に、本日の日付が設定されました。いくつかのレコードをみて、動作を確認します。\nページファイルの確認\n\n\t\n\t\n\t\n\t\n\t\nこのアプリケーションのソースプログラムは、こちらで参照できます。ページファイルを開いて内容を参照してください。定義ファイルのファイル名はなんでしょうか？＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿それぞれのTABLEタグによるテーブル内で使用されているコンテキスト名はなんでしょうか？\n1つ目のTABLEタグ内＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿\n2つ目のTABLEタグ内＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿\n上記の内部のTABLEタグ内＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿\n上記の内部のSELECTタグ内＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿JavaScriptのプログラムにあるsetBackDate関数は、「本日返却」ボタンをクリックしたときに呼び出されます。以下の情報手掛かりにプログラムを解析しましょう。\n\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\tgenerateToday関数は現在の日付を文字列で返す関数です。IMLibContextPool.getContextFromName(contextName)は、引数に指定したコンテキスト名のコンテキストオブジェクトを返します。コンテキストオブジェクトは、そのコンテキストに対する取得したデータを保持している「モデル」相当のオブジェクトです。コンテキストオブジェクトに対して、setDataAtLastRecord(field, value)を実行すると、コンテキストの最後のレコードのfieldの値をvalueにして、それを参照している箇所を更新するとともに、データベースへの書き込みを行います。\n\t\n定義ファイルの確認\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\nこちらのページに戻ります。前に調べた名称の定義ファイルを開きます。定義ファイルエディターで開く場合には、こちらをクリックします。navi-controlキーが設定されているコンテキストを確認します。実際の動作と比べて、このキーによる設定がどのように適用されているのかを検討してみましょう。使用されていないコンテキストがあります。どれでしょうか？＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿使用されていないコンテキストがあります。どれでしょうか？＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿nameキーがrentのコンテキストの定義を参照してください。ここにあるrelationの設定により上位のコンテキストの値を元に検索を行っています。rentコンテキストのcalculationキーにある計算式を参照してください。計算式の意味を考えてください。そして、そのfieldキーの値を書き出しておきます。\n\t\tfieldキー：＿＿＿＿＿＿＿＿式の意味：＿＿＿＿＿＿＿＿＿＿assetdetailコンテキストのcalculationキーにある計算式を参照してください。計算式の意味を考えてください。そして、そのfieldキーの値を書き出しておきます。\n\t\tfieldキー：＿＿＿＿＿＿＿＿式の意味：＿＿＿＿＿＿＿＿＿＿\nアプリケーションの改造\n\n\t\n\t\nページファイルエディターで開きます。こちらより開くことができます。これまでに調べたことを応用して、次の設定を行ってください。\n\t\t\n\t\t\n\t\t\n\t\t貸出履歴のそれぞれの項目に、貸出期間の日数を表示してください。それぞれの機材に対する平均貸出日数を表示してください。\n\t\n\n\nセッション5：ブログ\n\n\t\ndef05.phpに2つのコンテキストの定義を行います。定義ファイルエディターで開き、Show Allボタンを押して、全項目を表示しながら作業をしましょう。\n\nname: message\ntable: chat\nview: chat\nkey: id\npost-reconstruct: true\npost-dismiss-message: 投稿しました\nquery: \n    [field: groupname , operator: IS NULL, value:]　// ←[MySQL]の場合\n    [field: groupname, operator: eq, value: =]  // ←[FileMaker Server]の場合\nsorting:\n    [field: postdt, direction: desc]\nvalidation: \n    [field: user, rule: value !=  '', message: 入力してください。]\n    [field: message, rule: value !=  '', message: 入力してください。]\n\nname:comment\ntable: chat\nview: chat\nkey: id\npost-reconstruct: true\npost-dismiss-message: 投稿しました\nrelationship:\n    [foreign-key: groupname, join-field: id, operator: =]　// ←[MySQL]の場合\n    [foreign-key: groupname, join-field: id, operator: eq]　// ←[FileMaker Server]の場合\nsorting:\n    [field: postdt, direction: desc]\nvalidation: \n    [field: user, rule: value !=  '', message: 入力してください。]\n    [field: message, rule: value !=  '', message: 入力してください。]\n\n\n\t\n定義ファイルエディターで開いたdef05.phpに対して、以下のようにOptionsの設定を行います。\n\nformatters:\n   [field: chat@message, converter-class: HTMLString]\n\n\n\t\nDatabase Settingsの設定は、前のセッションと同一にします。\n\t\n\t\n\t\n[FileMaker Server] Database Settingsセクションのdb-classには「FileMaker_FX」、databaseには「TestDB」、userには「web」、passwordには「password」、serverには「192.168.56.1」、portには「80」、protocolには「http」、datatypeには「FMPro12」と入力します。[MySQL] Database Settingsセクションのdb-classには「PDO」、dsnには「mysql:host=localhost;dbname=test_db;charset=utf8mb4」、userには「web」、passwordには「password」と入力します。\n\t\n\n\n\t\npage05.htmlは以下の様に入力します。\n\n\n<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <title></title>\n    <script type=\"text/javascript\" src=\"def05.php\"></script>\n    <script type=\"text/javascript\">\n        window.onload = function () {\n            INTERMediator.construct();\n        }\n        INTERMediatorOnPage.processingBeforePostOnlyContext = function (node) {\n            var dtString, nodeIds, idValue, aNode;\n            dtString = INTERMediatorLib.dateTimeStringISO();　// ←[MySQL]の場合\n            dtString = INTERMediatorLib.dateTimeStringFileMaker(); // ←[FileMaker Server]の場合\n            nodeIds = INTERMediatorOnPage.getNodeIdsHavingTargetFromNode(node, \"message@postdt\");\n            if (nodeIds.length > 0) {\n                document.getElementById(nodeIds[0]).value = dtString;\n            }\n            nodeIds = INTERMediatorOnPage.getNodeIdsHavingTargetFromNode(node, \"comment@message\");\n            if (nodeIds.length > 0) {\n                aNode = node.parentNode.parentNode.parentNode;\n                nodeIds = INTERMediatorOnPage.getNodeIdsHavingTargetFromNode(aNode, \"message@id\");\n                idValue = document.getElementById(nodeIds[0]).value;\n                INTERMediator.additionalFieldValueOnNewRecord = {};\n                INTERMediator.additionalFieldValueOnNewRecord['comment'] = [\n                    {field: \"groupname\", value: idValue},\n                    {field: \"postdt\", value: dtString}\n                ];\n            }\n            return true;\n        };\n    </script>\n    <style>\n        TEXTAREA {\n            width: 400px;\n            height: 60px;\n        }\n    </style>\n</head>\n<body>\n<table>\n    <tbody data-im-control=\"post\">\n    <tr>\n        <th>From:</th>\n        <td>\n            <input type=\"text\" data-im=\"message@user\">\n            <input type=\"hidden\" data-im=\"message@postdt\">\n        </td>\n    </tr>\n    <tr>\n        <td colspan=\"2\">\n            <textarea data-im=\"message@message\"></textarea>\n            <button data-im-control=\"post\">投稿</button>\n        </td>\n    </tr>\n    </tbody>\n</table>\n<table>\n    <tbody>\n    <tr>\n        <td colspan=\"4\">\n            <hr/>\n        </td>\n    </tr>\n    <tr>\n        <th>From:</th>\n        <td data-im=\"message@user\"></td>\n        <th>Date:</th>\n        <td data-im=\"message@postdt\"></td>\n    </tr>\n    <tr>\n        <td colspan=\"4\" data-im=\"message@message@innerHTML\"\n            style=\"background-color: #CCCCCC\"></td>\n    </tr>\n    <tr>\n        <td style=\"width: 50px; background-color: gray\">Comment</td>\n        <td colspan=\"3\">\n            <input type=\"hidden\" data-im=\"message@id\"/>\n            <table>\n                <tbody data-im-control=\"post\">\n                <tr>\n                    <th>From:</th>\n                    <td>\n                        <input type=\"text\" data-im=\"comment@user\">\n                    </td>\n                </tr>\n                <tr>\n                    <td colspan=\"2\"><textarea data-im=\"comment@message\"></textarea>\n                        <button data-im-control=\"post\">投稿</button>\n                    </td>\n                </tr>\n                </tbody>\n            </table>\n            <table>\n                <tbody>\n                <tr>\n                    <th>From:</th>\n                    <td data-im=\"comment@user\"></td>\n                    <th>Date:</th>\n                    <td data-im=\"comment@postdt\"></td>\n                </tr>\n                <tr>\n                    <td colspan=\"4\" data-im=\"comment@message@innerHTML\"\n                        style=\"background-color: #CCCCCC\"></td>\n                </tr>\n                </tbody>\n            </table>\n        </td>\n    </tr>\n    </tbody>\n</table>\n</body>\n</html>\n\n\n\n\t\n実行します。以下の点を確認しましょう。\n\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n    \n\t\t\n最初は単にフォームだけが表示されています。「投稿」ボタンをクリックしても、何も入力しないと警告が表示され、メッセージは追加されません。Fromに自分の名前、messageに適当なメッセージを入力して「投稿」ボタンをクリックします。入力したメッセージが表示されましたが、同時に投稿ボタンを押した日時も設定されています。ページの最初のテキスト領域を利用して、メッセージを3つほど入力します。メッセージは、日付の逆順に表示されています。2つ目のメッセージの直後にも、Formとメッセージの記入部分があります。こちらにも入力をして「投稿」ボタンをクリックします。こちらは、該当メッセージへのコメントになります。いくつかコメントを追加してください。コメントも、日付が自動的に設定され、日付の逆順で表示されます。異なるルートメセージにコメントを記入し、正しいメッセージの後に付随していることを確認します。メッセージはテキストエリアです。改行を含むメッセージを入力してみてください。正しく、改行も表示されています。メッセージにJavaScriptのプログラムを、たとえば「<script>alert(9)</script>」のように記述して投稿してみます。タグはHTMLのタグとして解釈はされず、記述した通りの文字列で表示されます。ページファイルには少し長いプログラムが入力されています。INTERMediatorOnPage.processingBeforePostOnlyContextは、「投稿」ボタンを押した直後で、データベース処理を行う前に呼び出されます。何をしているのかを以下の手がかりをもとに検討してみましょう。\t\n\t\n\t\t\n\t    \n        \n        \n        \n    INTERMediatorLib.dateTimeStringISO()、INTERMediatorLib.dateTimeStringFileMaker()：現在の日時を返すINTERMediatorOnPage.getNodeIdsHavingTargetFromNode(node, target)：node以下、指定されたtargetを持つ要素のid属性値を配列で返すdocument.getElementById(idValue)：指定したid属性値の要素への参照を得るnode.parentNode：nodeの親ノードへの参照を得るINTERMediator.additionalFieldValueOnNewRecord：新規レコードを作ったときの既定値を定める。最初のプロパティはコンテキスト名で、それに対してフィールド名と値を指定したオブジェクトの配列を与える\n\t\n    最小限の機能ですが、あっという間にBBSが完成しました。HTMLコードはコピペして作っていただきましたが、15分から30分くらいでできたのではないでしょうか？　INTER-Mediatorを使えば、Webアプリケーションが簡単に構築できることがお分かりいただけたでしょうか？\n    \nアプリケーションの改造\nコメントの並び方を改良\n先ほど作ったBBSのページを開きます。こちらより開くことができます。試しにメッセージを二つ以上投稿し、さらに、一番上に表示されているメッセージに二つ以上のコメントを投稿してみてください。\nどうでしょうか。投稿されたコメントは読みやすい並びに表示されていますか？　\nメッセージは新しいものほど上の方に表示されていて話の流れについて行きやすくなっていますが、コメントも同じように上から新しいものが並んでいます。誰かの発言に関連するコメントは、古いものから順番に読んで行かなければ話の流れをつかむことができません。Facebookなどのタイムラインも、メッセージは新しいものから、コメントは古いものから順に並んでいますよね。\n\n    では、これまで学んだことから、どこをどのようの修正すればいいか、考えてみてください。\n    コメントを表示させているコンテキストは何でしょう？＿＿＿＿＿＿＿＿＿＿＿＿\n    Sortingの方向（direction）を降順に指定するパラメーターは英語のdescendingを略したdescでした。昇順は英語でascendingと言います。パラメータはどう指定すればいいでしょうか？＿＿＿＿＿＿＿＿＿＿＿＿\n\n実際に改修作業を進めて行きましょう。\nあるコンテキストの中に表示されるデータベース項目の順序は定義ファイルを設定することでコントロールできます。\n    \n            \n            \n            \n                   \n    INTER-Mediatorトライアルのトップページに戻ります。定義ファイル def05.php を特定し、クリックします。定義ファイルエディターが開きます。    コンテキスト「name: comment」を特定し、Sorting項目のdirectionを昇順を意味するascに変更します。タブキーを押して変更したことを定義ファイルエディターにしっかりと伝えてください。では、再びBBSのページを表示させてください。一旦画面をリフレッシュします。\n            どうでしょうか、メッセージの並びは登録日時の降順に、コメントは昇順になったでしょうか？\n\n簡単な作業でデータベースから取得した項目の表示順を切替えることができましたね。他に何か不都合なことはありませんでしょうか？\n\nコメント入力の位置をコメントの後に移動\nメッセージにコメントを付け加えるための入力フィールドが、コメントの並びの一番上に位置しています。これはちょっと不便ですね。コメントは通常、たくさん付いたコメントの一番最新のコメントに対してさらに続けるという使い方が一般的です。そのような使い方をするときに、たくさん付いたコメントの一番先頭にコメント入力フィールドがあると、上下にスクロールさせながら入力しなければならなくなります。\nこれも、少し改造してみましょう。\nコメントの入力フィールドの位置を、コメントの並びの最下段に移動させてみましょう。画面の表示場所などの指定はページファイルで行います。\n    \n          \n            \n            \n            INTER-Mediatorトライアルのトップページに戻ります。ページファイル page05.html を特定し、クリックします。ページファイルエディターが開きます。HTMLファイルの中身をざーっと眺めて、どの部分がどこの表示を担当しているのか、確認してください。コメントの詳細を表示している部分がどこなのか、分かりますね？　ヒントはコメントを投稿するためのテーブルタグ内に納められている、というところです。\n            見つけましたか？　ではそのテーブルタグごと、位置を移動させてください。さて、作業完了しましたね？　再びBBSのページを表示させてください。一旦ブラウザーに見えている画面をリフレッシュします。\n            どうでしょうか、コメントの入力フィールドはコメントの並びの最下段になったでしょうか？\n    \nINTER-Mediatorを使ったWebアプリケーション開発はいかがだったでしょうか？\nこのようにして基本の骨格を作り上げ、要望に応じて徐々に改良していく。とても効率的な開発プラットフォームですね。\n今日学んだことをベースに、こんなことはできないだろうか、あんな形式に変更はできないだろうか、といろいろと工夫をしながら開発スキルを深めて行ってください。\n\n\n\n"
}, {
    "id": 11,
    "parent": "/ja/practices/",
    "path": "/ja/practices/practice-searchnp.html",
    "title": "検索をしてその結果を一覧表示する（プログラムなし版）",
    "breadcrumb": "検索結果の一覧表示（プログラムなし版）",
    "body": "\n            \n                はじめに\n                検索結果を一覧するというユーザーインタフェースはWebアプリケーションでは一般的に見られる仕組みです。その仕組みを、宣言的な記述のみで構築できるようになっています。\n                前提知識\n                INTER-Mediatorに関して、以下の内容をすでに知っている事を前提とします。\n                \n                    \n                    \n                    \n                    \n                data-im属性への記述によりフィールドの内容が表示されることTABLEタグを使った表の中で、複数のレコードが繰り返し表示されるようになっていること一定数ごとのレコードを表示する仕組みと、表示範囲を切り替えるページネーションの仕組みがあること定義ファイルのコンテキストには、検索条件が指定できること\n            \n            \n                作成例について\n                利用するデータベースは、郵便番号と地名が含まれているもので、サンプルのデータベースにあるpostalcodeという名称のものです。レポジトリ内では、Samples/Practices/search_page1.htmlを開く事で、実際に稼働させることができます。Samples/index.htmlにあるサンプルの一覧では「Practices」にある「search」の「search(no JavaScript)」のリンクをクリックして表示できます。\n                まず、どのような動作になるのかを見て行くことにしましょう。最初にページを開くと、郵便番号と地名がともかく一覧されています。サンプルのデータベースには、ある時期の東京都のデータのみを収録しています。検索条件は何もなく、おそらく全てのデータがリストされていると想定されます。ここで、ページネーション（ページ移動）の「>」ボタンをクリックすると、次々と10件ずつレコードが表示されます。また、何件目のデータを現在表示しているのかという情報も見えています。\n\n                \n                \n\n                ここで、「検索条件」に適当な地名（ここでは「市谷」）を入力してReturnキーを押します（「Search」ボタンをクリックしてもかまいません）。すると、一覧表には、「市谷」を含む地名やビル名のものだけに絞り込まれました。全部で68件の地名があることが分かります。「>」ボタンでページ移動ができますが、ページ移動後にも、検索条件はそのまま見えていることにも注意を払いましょう。\n\n                \n                \n\n                「表示件数」のポップアップメニューから「4」を選択すると、これまで10件ごとに表示されていた一覧表が、4件ごとの表示に切り替わります。切り替えると、以後、ずっと4件ずつ表示されるようになります。\n\n                \n                \n\n                検索条件に「171」と入力してReturnキーを押しました。すると、郵便番号に171が含まれる地名だけが絞り込まれています。また、ここで、「郵便番号」と書かれた右側の▼をクリックすると、郵便番号の逆順で表示されるようになりました。つまり、一覧表示が「郵便番号」の逆順にソートされて表示されるようになっています。「<<」ボタンを押して最初のページを表示すると、いちばん大きな数値になる郵便番号の地名が、リストの最初の行に見えています。\n\n                \n                \n\n                検索条件に、「市ヶ谷」という文字列を指定して検索してみます。検索結果が0件のときに表示する行が見えています。なお、東京には、市ヶ谷という駅はありますが、地名では「市谷」と記述しており、この名前の地名がないこともわかります。\n\n                \n                \n            \n            \n                定義ファイル\n                定義ファイルのSamples/Practices/search_def.phpの内容は以下の通りです。コンテキストは、postalcodeという名前のものが1つだけあり、これはテーブル名と同様なので、tableやviewキーの値は指定していません。1ページあたりのレコード数は20で、後からの変更をしても30より多くの数を一度にページに出す事はできません。そして、pagingキーがtrueなので、ページネーションのコントロールがページ上に表示されます。\n                データベースはMySQLを使うのでdb-classは「PDO」を指定していますが、FileMaker Server向けには設定が変わります。それ以外の接続情報、アカウント、パスワードは、INTER-Mediator/params.phpファイルにあるものをそのまま使います。\n                \n                    require_once(dirname(__FILE__) . '/../../INTER-Mediator.php');\n\nIM_Entry(\narray(\n    array(\n        'name' => 'postalcode',\n        'records' => 20,\n        'maxrecords' => 30,\n        'paging' => true,\n    ),\n),\nnull,\narray('db-class' => 'PDO'),\n    false\n);\n                \n            \n            \n                ページファイル\n                ページファイルについては、ボディ部のみを示します。もちろん、ヘッダ部で、前述の定義ファイルSCRIPTタグで読み込んだ状態になっています。このほかに何も読み込みは行っていません。つまり、このページは、プログラムとしては、BODYタグ要素のonload属性にあるINTERMediatorを動作させる1行だけなのです。\n\n                \n                    <body onload=\"INTERMediator.construct()\">\n<div>\n    検索条件:\n    <input type=\"text\" data-im=\"_@condition:postalcode:f3,f7,f8,f9:*match*\">\n    表示件数：\n    <select type=\"text\" data-im=\"_@limitnumber:postalcode\">\n        <option value=\"4\">4</option>\n        <option value=\"10\">10</option>\n        <option value=\"20\" selected>20</option>\n    </select>\n    <button data-im=\"_@update:postalcode\">search</button>\n</div>\n<div id=\"IM_NAVIGATOR\">Navigation Controls by INTER-Mediator</div>\n<table border=\"1\" id=\"resultTable\">\n    <thead>\n    <tr>\n        <th>郵便番号\n            <span style=\"cursor: pointer\" data-im=\"_@addorder:postalcode:f3:asc\">▲</span>\n            <span style=\"cursor: pointer\" data-im=\"_@addorder:postalcode:f3:desc\">▼</span>\n        </th>\n        <th>都道府県</th>\n        <th>市区町村</th>\n        <th>町域名\n            <span style=\"cursor: pointer\" data-im=\"_@addorder:postalcode:f9:asc\">▲</span>\n            <span style=\"cursor: pointer\" data-im=\"_@addorder:postalcode:f9:desc\">▼</span>\n        </th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr>\n        <td><div data-im=\"postalcode@f3\"></div></td>\n        <td><div data-im=\"postalcode@f7\"></div></td>\n        <td><div data-im=\"postalcode@f8\"></div></td>\n        <td><div data-im=\"postalcode@f9\"></div></td>\n    </tr>\n    <tr data-im-control=\"noresult\">\n        <td colspan=\"4\">検索結果はありません。あるいは検索前です。</td>\n    </tr>\n    </tbody>\n</table>\n\n</body>\n                \n            \n            \n                それぞれの動作の実現\n                一覧表示の実現\n                postalcodeテーブルでは、f3フィールドに郵便番号、f7〜f9フィールドに都道府県、市区町村、町域名が収められています。ページファイル内のTABLE要素によるテーブル部分で、その一覧表示を行っています。TBODYタグ要素の中には2つのTR要素があり、その最初の方の要素の子要素にTDがいくつかあり、そこにf3、f7〜f9のそれぞれのフィールドを示すターゲット指定がdata-im属性に設定されています。\n                postalcodeコンテキストに対して検索して得られた郵便番号と地名の情報に対して、TBODYの最初のTR要素がレコードの数だけ繰り返されて、そしてそれぞれDIVタグ要素のテキストとしてフィールドの値が設定されて表示されます。初期状態では、定義ファイルのコンテキストにあるrecordsキーの値に応じて最大10レコードまでとなります。この仕組みによって、一覧表が作成されています。\n                検索結果が0のときの一覧表\n                TBODYの内容を解析して、このTBODYがエンクロージャーとして機能します。そして、postalcodeコンテキストに対して検索処理を行います。このとき、検索結果が0件の場合、data-im-control属性が「noresult」のものを残して、エンクロージャー内の他のリピーターは削除され、その結果を表示します。また、一方で、検索結果が0件でない場合、data-im-control属性が「noresult」のものを削除して残った結果をリピーターとして識別して、そのリピーターをレコードの数だけ複製してページを表示します。\n                ページネーションのコントロールの表示\n                postalcodeコンテキストでは、pagingキーの値がtrueなのでページネーションコントロールによるページ切り替えが可能です。そして、ページネーションのコントロールを表示するためには、id属性が「IM_NAVIGATOR」の要素を配置しておく必要があります。TABLEタグのすぐ上にその要素が見えており、この場所にページネーションコントロールを自動的に構築します。\n                検索のユーザインタフェース\n                ページファイルの最初の方に、検索条件を指定するINPUTタグ要素があります。この要素はデータベースとは関係なく、ページ上で存在するものです。そのため、id属性（値はcondition）を設定していますが、加えて、data-im属性にローカルコンテキストを示す「_@condition:postalcode:f3,f7,f8,f9:*match*」という記述があります。この属性名を持つテキストフィールドは、コロンで区切られていて、最初の「condition」は決められたキーワードです。次の「postalcode」はどのコンテキストに対して検索をかけるのかということを指定しています。3つ目は検索対象のフィールドをカンマで書き並べると、それぞれのフィールドに対するOR検索が行われます。4つ目の「*match*」は、テキストフィールドに入力した文字列がどこかに含まれるという条件で検索することを示しています。このようなdata-im属性の指定により、ユーザーインタフェース上のテキストフィールドの値がコンテキストのデータベースへのクエリーに条件として付加され、検索結果が一覧されます。\n                このテキストフィールドに文字カーソルがある状態でReturnキーなどを押すと、コンテキストへの更新処理とみなして再度検索し、テーブルの一覧を作り直します。ユーザーは「検索によって更新された」ように見えるということです。\n                Searchボタンをクリックして検索する\n                ページファイルでは、BUTTONタグを使って「Search」ボタンを作成しています。ボタンのdata-im属性に「_@update:postalcode」と指定されています。この記述により、ボタンをクリックすると、postalcodeコンテキストに対する更新を行うので、現状の設定での検索がその場で行われます。\n                フィールド名の横の▲▼をクリックして、そのフィールドで並べ替える\n                例えば、郵便番号の▲ボタンは、spanタグ要素として記述して、data-im属性値は「_@addorder:postalcode:f3:asc」となっています。この記述があると、要素をクリックしたときにpostalcodeコンテキストに対する更新を行うと同時に、その後の記述から明らかなように、f3フィールドの昇順で並べ替えるという条件を付加します。\n            \n            \n                まとめ\n                検索して一覧するというユーザーインタフェースは当たり前のように作成されていますが、INTER-Mediatorはこのように、手続き的なプログラミングをまったくしなくても、ある程度仕組みのページを作成できるようになりました。AND条件で検索したいときには、テキストフィールドを並べます。そのとき、空白のフィールドは検索条件として含めないといった動作も、一切のプログラミングなく動作します。なお、これ以上の複雑な検索条件指定が必要な場合には、『プラクティス：検索をしてその結果を一覧表示する（JavaScript版）』の記事を参照してください。\n            \n        "
}, {
    "id": 12,
    "parent": "/ja/practices/",
    "path": "/ja/practices/practice-search.html",
    "title": "検索をしてその結果を一覧表示する（JavaScript版）",
    "breadcrumb": "検索結果の一覧表示（JavaScript版）",
    "body": "\n            \n                前提知識\n                INTER-Mediatorに関して、以下の内容をすでに知っている事を前提とします。\n                \n                    \n                    \n                    \n                    \n                    \n                data-im属性への記述によりフィールドの内容が表示されることTABLEタグを使った表の中で、複数のレコードが繰り返し表示されるようになっていること一定数ごとのレコードを表示する仕組みと、表示範囲を切り替えるページネーションの仕組みがあること定義ファイルのコンテキストには、検索条件が指定できることJavaScriptによるページ機能の拡張\n            \n            \n                作成例について\n                利用するデータベースは、郵便番号と地名が含まれているもので、サンプルのデータベースにあるpostalcodeという名称のものです。レポジトリ内では、Samples/Practices/search_page2.htmlを開く事で、実際に稼働させることができます。Samples/index.htmlにあるサンプルの一覧では「Practices」にある「search」の「search(using JavaScript)」のリンクをクリックして表示できます。\n                まず、どのような動作になるのかを見て行くことにしましょう。最初にページを開くと、郵便番号と地名がともかく一覧されています。サンプルのデータベースには、ある時期の東京都のデータのみを収録しています。検索条件は何もなく、おそらく全てのデータがリストされていると想定されます。ここで、ページネーション（ページ移動）の「>」ボタンをクリックすると、次々と10件ずつレコードが表示されます。また、何件目のデータを現在表示しているのかという情報も見えています。\n\n                \n                \n\n                ここで、「検索条件」に適当な地名（ここでは「池袋」）を入力して「Search」ボタンをクリックします。すると、一覧表には、池袋を含む地名やビル名のものだけに絞り込まれました。全部で68件の地名があることが分かります。「>」ボタンでページ移動ができますが、ページ移動後にも、検索条件はそのまま見えていることにも注意を払いましょう。\n\n                \n                \n\n                検索条件に、ここでは「171」と入力しました。すると、郵便番号が171で始まる地名だけが絞り込まれています。また、ここで、「郵便番号」と書かれた右側の▼をクリックすると、郵便番号の逆順で表示されるようになりました。つまり、一覧表示が「郵便番号」の逆順にソートされて表示されるようになっています。\n\n                \n                \n\n                検索条件に、東京都に明らかになさそうな「大阪」という文字列を指定して検索してみます。もちろん、大阪を含む地名は存在しませんが、検索結果が0件のときに表示する行が見えています。\n\n                \n                \n\n                「表示件数」については、ここでは省略します。\n            \n            \n                定義ファイル\n                定義ファイルのSamples/Practices/search_def.phpの内容は以下の通りです。コンテキストは、postalcodeという名前のものが1つだけあり、これはテーブル名と同様なので、tableやviewキーの値は指定していません。1ページあたりのレコード数は10で、後からの変更をしても30より多くの数を一度にページに出す事はできません。そして、pagingキーがtrueなので、ページネーションのコントロールがページ上に表示されます。\n                データベースはMySQLを使うのでdb-classは「PDO」を指定します。それ以外の接続情報、アカウント、パスワードは、INTER-Mediator/params.phpファイルにあるものをそのまま使います。INTER-Mediatorのサンプルファイルをそのまま参照できる状態であれば、特に変更する必要はありません。\n                \n                    require_once(dirname(__FILE__) . '/../../INTER-Mediator.php');\n\nIM_Entry(\narray(\n    array(\n        'name' => 'postalcode',\n        'records' => 10,\n        'maxrecords' => 30,\n        'paging' => true,\n    ),\n),\nnull,\narray('db-class' => 'PDO'),\n    false\n);\n                \n\n            \n            \n                ページファイル\n                ページファイルについては、ボディ部のみを示します。もちろん、ヘッダ部で、前述の定義ファイルSCRIPTタグで読み込んだ状態になっています。\n\n                \n                    <div>\n    検索条件:\n    <input type=\"text\" id=\"condition\" data-im=\"_@condition\">\n    表示件数：\n    <input type=\"text\" id=\"number\" data-im=\"_@_im_pagedSize\" size=\"3\">\n    <button id=\"search\">search</button>\n</div>\n<div id=\"IM_NAVIGATOR\">Navigation Controls by INTER-Mediator</div>\n<table border=\"1\" id=\"resultTable\">\n    <thead>\n        <tr>\n            <th>郵便番号\n                <span id=\"sort1a\">▲</span>\n                <span id=\"sort1d\">▼</span>\n            </th>\n            <th>都道府県</th>\n            <th>市区町村</th>\n            <th>町域名\n                <span id=\"sort2a\">▲</span>\n                <span id=\"sort2d\">▼</span>\n            </th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>\n                <div data-im=\"postalcode@f3\"></div>\n            </td>\n            <td>\n                <div data-im=\"postalcode@f7\"></div>\n            </td>\n            <td>\n                <div data-im=\"postalcode@f8\"></div>\n            </td>\n            <td>\n                <div data-im=\"postalcode@f9\"></div>\n            </td>\n        </tr>\n        <tr data-im-control=\"noresult\">\n            <td colspan=\"4\">検索結果はありません。あるいは検索前です。</td>\n        </tr>\n    </tbody>\n</table>\n                \n            \n            \n                それぞれの動作の実現\n                一覧表示の実現\n                postalcodeテーブルでは、f3フィールドに郵便番号、f7〜f9フィールドに都道府県、市区町村、町域名が収められています。一覧表に表示をしつつ、そこでの変更の必要がない場合には、INPUTタグ要素でフィールドの内容を表示する必要はありません。ページファイル内のTBODYタグ要素の中には2つのTR要素がありますが、その最初の方の要素の子要素にTDがいくつかあり、さらに各TDはDIV要素があります。そこに、f3、f7〜f9のそれぞれのフィールドを示すターゲット指定がdata-im属性に設定されています。\n                postalcodeコンテキストに対して検索して得られた郵便番号と地名の情報に対して、TBODYの最初のTR要素がレコードの数だけ繰り返されて、そしてそれぞれDIVタグ要素のテキストとしてフィールドの値が設定されて表示されます。初期状態では、定義ファイルのコンテキストにあるrecordsキーの値に応じて最大10レコードまでとなります。この仕組みによって、一覧表が作成されています。\n                検索結果が0のときの一覧表\n                TBODYの内容を解析して、このTBODYがエンクロージャーとして機能します。そして、postalcodeコンテキストに対して検索処理を行います。このとき、検索結果が0件の場合、data-im-control属性が「noresult」のものを残して、エンクロージャー内の他のリピーターは削除され、その結果を表示します。また、一方で、検索結果が0件でない場合、data-im-control属性が「noresult」のものを削除して残った結果をリピーターとして識別して、そのリピーターをレコードの数だけ複製してページを表示します。\n                ページネーションのコントロールの表示\n                postalcodeコンテキストでは、pagingキーの値がtrueなのでページネーションコントロールによるページ切り替えが可能です。そして、ページネーションのコントロールを表示するためには、id属性が「IM_NAVIGATOR」の要素を配置しておく必要があります。TABLEタグのすぐ上にその要素が見えており、この場所にページネーションコントロールを自動的に構築します。\n                ページの合成処理\n                実際にページを表示する処理は、window.onloadへの関数の代入で実現しています。Samples/Practices/search.jsにプログラムが置いてあります。そこにある以下の部分が、実際にページを合成します。window.onloadに代入した関数は、ページの要素を読み込んだ後、つまりページが表示された直後に呼び出され、INTERMediator.construct(true);によって実際にページの生成を行います。この関数のそれまでの部分については、この後に説明をします。\n                \n                    window.onload = function () {\n        :\n    INTERMediator.construct(true);\n};\n                \n                検索のユーザインタフェース\n                ページファイルの最初の方に、検索条件を指定するINPUTタグ要素があります。この要素はデータベースとは関係なく、ページ上で存在するものです。そのため、id属性（値はcondition）を設定していますが、加えて、data-im属性にローカルコンテキストを示す「_@condition」という記述があります。これにより、クライアント内部でのデータ記憶領域とバインドされます。アンダーラインはローカルコンテキストを示す記号で、「condition」がそのコンテキストでのキーとなります。このINPUT要素から値を取り出すのではなく、ローカルコンテキストより、このテキストフィールドに入力した値が取り出せるようになります。\n                実際の検索処理\n                検索処理は、Samples/Practices/search.jsにある以下の関数として、汎用的に記述しました。つまり、doSearch()の呼び出しで、検索条件を取り出してそれを設定した上で、ページの再合成を行うことで検索結果を反映させた一覧を取得します。INTERMediator.additionalConditionには、コンテキストとして定義ファイルに記述した検索条件に、さらに新たな検索条件を付加するプロパティです。\n                \n                    function doSearch() {\n    INTERMediator.additionalCondition = {};\n    var c1 = IMLibLocalContext.getValue(\"condition\");\n    if (c1 && c1.length > 0) {\n        INTERMediator.additionalCondition = {\"postalcode\": [\n            {field: 'f3', operator: 'LIKE', value: c1 + '%'},\n            {field: 'f7', operator: 'LIKE', value: '%' + c1 + '%'},\n            {field: 'f8', operator: 'LIKE', value: '%' + c1 + '%'},\n            {field: 'f9', operator: 'LIKE', value: '%' + c1 + '%'},\n            {field: '__operation__', operator: 'ex'}\n        ]};\n    }\n    INTERMediator.startFrom = 0;\n    IMLibLocalContext.archive();\n    INTERMediator.construct(true);\n}\n                \n                最初に、付加条件をいったんクリアします。IMLibLocalContext.getValueメソッドにより、検索条件のテキストフィールドの値を取り出します。そのテキストフィールドは、直前に説明した通り、ローカルコンテキストのconditionキーの値とバインドしていて、テキストフィールドの値はキーの値を指定して取り出すことができます。つまり、変数c1には、テキストフィールドの値が取り出されます。\n                もし、検索条件が指定されていれば、INTERMediator.additionalConditionに付加検索条件を追加します。ここでは、f3が検索条件で始まり、f7〜g9については検索条件を含むという検索設定をMySQLの文法に従って記述しています。__operation__という記述により、それまでの並びをANDではなくOR条件で結びます。結果として、4つの条件がどれか1つでも満たすようなレコードが検索されて取り出されることになります。\n                INTERMediator.startFromは、検索結果の何番目から表示するかを示すプロパティで、ページネーションによりINTER-Mediatorによって自動的に更新されるものです。最初なので0にしておきます。IMLibLocalContext.archive()により、ローカルコンテキストを記憶しています。最後に、INTERMediator.construct(true);によってページの合成を行っています。\n                Searchボタンをクリックして検索する\n                ページファイルでは、BUTTONタグを使って「Search」ボタンを作成していますが、その要素の記述内では、特にプログラムの呼び出しなどを行っていません。onclick属性に記述する方法でももちろん動作しますが、別の方法も用意しています。INTERMediator.construct( ) でページ合成をする前に、IMLibMouseEventDispatch.setExecuteメソッドを利用して、イベントに対応する処理を記述できます。このメソッドの最初の引数は要素のid属性で、2番目にその要素をクリックしたときの処理を関数で記述します。Searchボタンのid属性値はsearchなので、以下のような記述を行えば、クリックしたときにdoSearch関数を実行します。なお、IMLibMouseEventDispatch.setExecuteは、実際にはdocumentオブジェクトでのclickコマンドを受け付けます。従って、オブジェクトに直接プログラムを記述するような場合や、オブジェクトにイベントリスナを設定する場合には、そのまま両方動くことになります。このサンプルプログラムでは、HTML側に一切の処理を書かないという方針でまとめています。\n                \n                    window.onload = function () {\n        :\n    IMLibMouseEventDispatch.setExecute('search', function () {\n        doSearch();\n    });\n        :\n    INTERMediator.construct(true);\n};\n                \n                Returnキーで検索をする\n                INPUTタグ要素は、原則としてReturnキーあるいはEnterキーによるサブミット処理は、FORMタグを使っている場合にしか適用されません。INTER-MediatorではFORMを使っていないので、簡単に言えばテキストフィールドでReturnキーを押しても「何も起こらない」ということになります。\n                そこで、ページ合成前に、IMLibKeyEventDispatch.setExecuteメソッドを利用すれば、第1引数の値をid属性に持つ要素に対して、2番目の引数の文字コードが入力されれば、3つ目の引数の関数を実行します。つまり、以下の記述により、テキストフィールドに入力中にEnterキーを押すと、doSearch関数が実行されて検索が行われるということになります。IMLibLocalContext.updateメソッドは、引数にローカルコンテキストのキーを指定し、現在の要素の値をローカルコンテキストへ反映させます。通常はこの作業は自動的に行われるのですが、要素のchangeイベントをもとにしており、キータイプだけでは同期処理が実行されません。そこで、このような記述で明示的に要素の値をコンテキストに反映させています。\n                \n                    window.onload = function () {\n    IMLibKeyEventDispatch.setExecute('condition', 13, function () {\n    IMLibLocalContext.update('condition');\n        doSearch();\n    });\n        :\n    INTERMediator.construct(true);\n};\n                \n                フィールド名の横の▲▼をクリックして、そのフィールドで並べ替える\n                例えば、郵便番号の▲ボタンは、spanタグ要素として記述して、id属性値は「sort1a」となっています。そして、window.onloadに代入している関数内で以下のようにIMLibMouseEventDispatch.setExecuteメソッドが記述されています。つまりは、▲ボタンをクリックすると、まず、INTERMediator.additionalSortKeyというプロパティに、追加のソート条件を設定します。右辺にあるように、postalcodeコンテキストに対してf3フィールドを昇順で並べ替えるという設定を追加します。このサンプルでは、フィールドに応じた並べ替えのクリックポイントが4カ所あるので、4つの要素に対してクリックイベントの実行時に処理を行うように記述をしています。\n                \n                    window.onload = function () {\n        :\n    IMLibMouseEventDispatch.setExecute('sort1a', function () {\n        INTERMediator.additionalSortKey\n            = {\"postalcode\": {field: 'f3', direction: 'ASC'}};\n        doSearch();\n    });\n    IMLibMouseEventDispatch.setExecute('sort1d', function () {\n        INTERMediator.additionalSortKey\n            = {\"postalcode\": {field: 'f3', direction: 'DESC'}};\n        doSearch();\n    });\n    IMLibMouseEventDispatch.setExecute('sort2a', function () {\n    INTERMediator.additionalSortKey\n            = {\"postalcode\": {field: 'f9', direction: 'ASC'}};\n        doSearch();\n    });\n    IMLibMouseEventDispatch.setExecute('sort2d', function () {\n        INTERMediator.additionalSortKey\n        = {\"postalcode\": {field: 'f9', direction: 'DESC'}};\n        doSearch();\n    });\n    INTERMediator.construct(true);\n};\n                \n            \n        "
}, {
    "id": 13,
    "parent": "/ja/practices/",
    "path": "/ja/practices/practice-masterdetail.html",
    "title": "一覧と詳細",
    "breadcrumb": "一覧と詳細",
    "body": "\n            \n                前提知識\n                INTER-Mediatorに関して、以下の内容をすでに知っている事を前提とします。\n                \n                    \n                    \n                    \n                    \n                data-im属性への記述によりフィールドの内容が表示されることTABLEタグを使った表の中で、複数のレコードが繰り返し表示されるようになっていること一定数ごとのレコードを表示する仕組みと、表示範囲を切り替えるページネーションの仕組みがあること定義ファイルのコンテキストには、検索条件が指定できること\n            \n            \n                作成例について\n                たくさんのレコード、そしてたくさんのフィールドがある場合、そのデータの一覧を表示して、ボタンをクリックするなどして移動したページで詳細を表示したり編集したりするような作りのユーザーインタフェースはよく利用されます。この種のユーザーインタフェースをマスター/ディテール、あるいは一覧と詳細といった呼び方をします。\n                サンプルデータベースには、商品マスターのテーブルがあります。その内容を一覧と詳細形式で表示したいとします。一般的なWebアプリケーションだと、それぞれ異なるページを用意して、ページ移動などの必要な機能を実装するということになります。一方、INTER-Mediatorでは、そうしたユーザーインタフェースを作りやすくした仕組みを組み込んでいます。一覧も詳細も、同一のページに表示して、必要に応じて表示と非表示を行うことで、一覧と詳細の動作を行っています。\n                サンプルの一覧のページからは「Practices」の「Master/Detail」にある「alternative navigation」をクリックすると、以下のようなページが表示されます。最初は、商品マスターの商品名と単価が見えている一覧が表示されています。ここで、「詳細」ボタンをクリックすると、クリックした商品に関する他のフィールドを、そのレコードだけ表示します。「一覧表示」ボタンをクリックすると、元の一覧のページが表示されます。\n\n                \n                \n\n                サンプルの一覧のページからは「Practices」の「Master/Detail」にある「split master/detail」をクリックすると、以下のようなページが表示されます。一覧と詳細が同時に表示されています。CSSの仕組みを利用して、それぞれのテーブルを左右に並ぶように配置しています。\n\n                \n                \n\n                左側の一覧で「詳細」ボタンをクリックすると、該当するレコードが右側に表示されます。つまり、右側は、左側のリストでクリックしたレコードの情報に逐次切り替わります。\n\n                \n                \n\n                ここで、右側の詳細表示の方が、テキストフィールドになっています。たとえば、単価を1200に修正したとします。修正をしてTabキーを押すなどすると、このレコードのunitpriceフィールドの値は1200に更新されます。\n                \n                \n\n                テキストフィールドからフォーカスが外れると同時に、左側の対応するフィールドも値が置き換わっています。このように、同一のフィールドがページ内の複数の箇所に見えている場合には、1つの修正が他の要素へ自動的に反映されるようになっています。（書式の反映に関しては、Ver.5.0より後に修正をおこなう予定です。）\n\n                \n                \n            \n            \n                定義ファイル\n                定義ファイルのSamples/Practices/nav1.phpの内容は以下の通りです。一覧と詳細が切り替わるnavi1.phpと、左右に表示されるnavi2.phpの2つの定義ファイルがありますが、1箇所の設定を除いて同一のものです。\n                まず、一覧と詳細は、基本的には同一のテーブルがデータソースになるはずです。しかしながら、INTER-Mediatorでは、それぞれ、異なるコンテキストして定義します。productテーブルをもとに、一覧用のproductlistコンテキストと、詳細用のproductdetailコンテキストを用意します。いずれも、viewキーの値がproductとなっており、同じproductテーブルから得られるコンテキストであることがわかります。一覧と詳細を構成するには、それぞれのコンテキストにnavi-controlキーに値を指定します。一覧側は「master」、詳細側は「detail」と指定するのが基本です。masterだけだと、一覧と詳細は同時に表示され、詳細側にはマスターに切り替わるボタンは表示されません。master-hideだと、一覧と詳細が切り替わり、詳細側に一覧を表示するボタンが追加されます。detail、あるいはdetail-downなら詳細の末尾に、detail-topなら詳細の冒頭に、一覧に移動するボタンを表示します。なお、master側のコンテキストでは、必ず「詳細」ボタンが追加されます。\n                データベースはMySQLを使うのでdb-classは「PDO」を指定します。それ以外の接続情報、アカウント、パスワードは、INTER-Mediator/params.phpファイルにあるものをそのまま使います。INTER-Mediatorのサンプルファイルをそのまま参照できる状態であれば、特に変更する必要はありません。\n                \n                    require_once(dirname(__FILE__) . '/../../INTER-Mediator.php');\n\nIM_Entry(\n    array(\n        array(\n            'records' => 10,\n            'name' => 'productlist',\n            'view' => 'product',\n            'key' => 'id',\n            'sort' => array(array('field' => 'name', 'direction' => 'ASC'),),\n            'navi-control' => 'master-hide',\n        ),\n        array(\n            'records' => 1,\n            'name' => 'productdetail',\n            'view' => 'product',\n            'table' => 'product',\n            'key' => 'id',\n            'navi-control' => 'detail-top',\n        ),\n    ),\n    array(\n        'formatter' => array(\n            array('field' => 'product@unitprice', 'converter-class' => 'Number', 'parameter' => '0'),\n        ),\n    ),\n    array('db-class' => 'PDO'),\n    false\n);\n                \n            \n            \n                ページファイル\n                ページファイルについては、ボディ部のみを示します。もちろん、ヘッダ部で、前述の定義ファイルSCRIPTタグで読み込んだ状態になっています。一覧を表示するTABLEと詳細を表示するTABLEが定義されているだけです。左右のレイアウトをしやすいように、それぞれDIVタグ要素に含めてあります。それぞれのTABLEタグ要素内では、productlistコンテキストと、productdetailコンテキストを利用したターゲット指定があるだけで、特に何も特別な記述はありません。\n\n                \n                    <body onload=\"INTERMediator.construct(true);\">\n<!-- Table for the list view -->\n<div id=\"listarea\" style=\"float:left; margin-right: 24px;\">\n    <table border=\"1\">\n        <thead>\n        <tr>\n            <th></th><th>name</th><th>unitprice</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr>\n            <td></td>\n            <td data-im=\"productlist@name\"></td>\n            <td class=\"price\" data-im=\"productlist@unitprice\"></td>\n        </tr>\n        </tbody>\n    </table>\n</div>\n<!-- Table for the detail view -->\n<div id=\"detailarea\">\n    <table border=\"1\">\n        <tbody>\n        <tr>\n            <th>id</th>\n            <td data-im=\"productdetail@id\"></td>\n        </tr>\n        <tr>\n            <th>name</th>\n            <td><input type=\"text\" size=\"60\" data-im=\"productdetail@name\"></td>\n        </tr>\n        <tr>\n            <th>unitprice</th>\n            <td><input type=\"text\" size=\"60\" data-im=\"productdetail@unitprice\"></td>\n        </tr>\n        <tr>\n            <th>photofile</th>\n            <td><input type=\"text\" size=\"60\" data-im=\"productdetail@photofile\"></td>\n        </tr>\n        <tr>\n            <th>acknowledgement</th>\n            <td><input type=\"text\" size=\"60\" data-im=\"productdetail@acknowledgement\"></td>\n        </tr>\n        <tr>\n            <th>ack_link</th>\n            <td><input type=\"text\" size=\"60\" data-im=\"productdetail@ack_link\"></td>\n        </tr>\n        <tr>\n            <th>photofile</th>\n            <td><img src=\"../Sample_products/images/\" data-im=\"productdetail@photofile@#src\"></td>\n        </tr>\n        </tbody>\n    </table>\n</div>\n<div style=\"clear: both\"/>\n</body>\n                \n            \n            \n                まとめ\n                一覧と詳細を実装するときには、それぞれを異なるコンテキストで1ページ内に配置します。そして、コンテキストにnavi-controlキーの値を指定することで、それぞれが連携して、一覧と詳細の動作を行うようになります。そのように動作させるためにプログラムを記述する必要はまったくありません。\n            \n        "
}, {
    "id": 14,
    "parent": "/ja/for-developers/",
    "path": "/ja/for-developers/manual.html",
    "title": "INTER-MediatorによるWebアプリケーションの概要",
    "breadcrumb": "INTER-MediatorによるWebアプリの概要",
    "body": "はじめに\n        データベースにMySQLなど、PHPのPDOに対応したものを利用することを想定します。データベースが稼働しており、INTER-Mediatorがインストールされている状況であるとします。このとき、以下の2つのファイルを作成します。いずれのファイルについても原則はどこにあってもかまいませんが、定義ファイルはデータベースサーバーと同一のコンピュータにあるようにするのが一般的でしょう。\n        \n            \n        ブラウザにロードするHTMLファイル（「ページファイル」と名付けます）データベース接続など設定を記述したPHPファイル（「定義ファイル」と名付けます\n        定義ファイルの記述\n        定義ファイルは、PHPのファイルにします。したがって、PHPの処理が可能なサーバーに配置しないといけません。以下のように、INTER-Mediator.phpを読み込み、IM_Entry関数をコールします。この関数の引数の指定方法は、後で記述します。\n        <?php\nrequire_once ('INTER-Mediator/INTER-Mediator.php');\nIM_Entry( $tableDefs, $optionDefs, $dbDefs, true );                \n?>\n        \n        サンプルで言えば、sample_form_FMS_include.phpや、sample_form_MySQL_include.phpのファイルが、定義ファイルに相当します。定義ファイルに記述できる内容はこちら\n            のページにまとめてあります。\n        ページファイルの記述\n        ページファイルでは、定義ファイルを、ヘッダエリアのscriptタグで読み込みます。定義ファイルは、JavaScriptのソースを返します。そして、典型的な方法として、ページを開いたときにデータベースのデータを取り出すという流れがあるかと思います。その場合、以下のように、bodyタグのonload属性に、NTERMediator.construct(true)というJavaScriptの呼び出しを記述します。基本的にはこれで、INTER-Mediatorが働き始めます。NTERMediator.construct(true)は、たとえばボタンをクリックして呼び出すという方法も取る事ができます。\n        <html>\n<head>\n<script src=\"sample_form_MySQL_include.php\"></script>\n</head>\n<body onload=\"INTERMediator.construct(true)\">\n                :                \n<td><input type=\"text\" data-im=\"contact@datetime\"/></td>\n        \n        以上の準備をすれば、ページファイル内のタグのdata-im属性に記述を加えることで、そのタグの値や他の属性に対してデータベースから取り出したデータが設定されることになります。属性の値は「contact@datetime」といった記述を行います。この記述を「ターゲット指定」と呼ぶ事にします。また、ターゲット指定のあるタグのことを「リンクノード」と呼びます。ターゲット指定の詳細は、後で説明をします。\n        サンプルで言えば、sample_form_FMS.htmlや、sample_form_MySQL.htmlのファイルが、ページファイルに相当します。\n        ページの表示\n        以上のような準備をした上で、ブラウザより、ページファイルにアクセスをします。そうすれば、リンクノードのターゲット指定や、定義ファイルでの指定に基づいて、データベースのデータを取り込んでページを構成します。データベースの内容を表示しますが、複数のレコードがあれば繰り返して一覧表示などを行います。\n    \n        INTER-MediatorによるWebページ生成\n            INTER-Mediatorは、WebページのDOM構造をたどり、データベースとリンクするノード（以後「リンクノード」と記述）をさがします。そして、そのリンクノードの上位のノードをたどり、「エンクロージャ」と「リピータ」となるノードを探します。リピータ自身あるいはリピータに含まれるリンクノードをすべて集めてデータベースにアクセスします。そして、レコードの数だけリピータを繰り返して、データベースの内容をページに表示します。\n            リンクノードでのターゲット指定\n            \n                \n                \n            任意の要素をリンクノードにすることができます。data-im属性に「table@field@target」の記述で記載されいているものをリンクノードとみなします。現在はこの記述方法が推奨されます。複数の設定を行う場合、値には「table@field@target table@field@target...」のように空白で区切って記述します。\n            class属性に「IM[table@field@target]」の記述で記載される場合、title属性に「table@field@target」で記載されるものも、過去との互換性のためにリンクノードとみなします。複数の設定があってもかまいません。class属性の場合は、「IM[table@field@target|table@field@target|...]」と記述します。title属性の場合は「table@field@target|table@field@target|...」と記述します。title属性、class属性はいずれもリンクノードの指定にできなくすることができます。INTER-Mediatorのconstructメソッドの最初にあるtitleAsLinLinfo、classAsLinkInfo変数にfalseを入れれば、それぞれの属性に記述されたリンク指定は無視します。\n            ターゲット指定について\n            「table@field@target」がひとまとまりのターゲット指定となります。\n            \n                \n                \n            tableはテーブル名を記述します。IM_Entry関数の第一引数に指定した配列のname属性の値を記述できます。fieldはフィールド名を指定します。IM_Entry関数の第一引数に指定した配列の中で、name属性に対応したテーブルアクセスの中にフィールドが含まれていれば、そのフィールドの値を利用して、リンクノードの値を変更あるいは設定します。targetはノードのどの属性にフィールド値を差し込むかを指定します。\n            targetの指定は以下のようなルールになります。\n            \n                \n                \n                \n                \n                \n            省略すると、ノードの値として設定します。「innerHTML」の場合は、ノードのinnerHTML属性にフィールドの値を設定します。「nodeText」の場合はテキストノードを作成して子ノードとして追加します。「style.STYLENAME」の場合は、STYLENAMEで指定したスタイルに値として追加します。たとえば、「style.backgroundColor」は背景色のスタイル属性に値を指定します。targetの最初の文字が「#」の場合、innerHTMLないしは属性を指定していれば、既存のノードのデータに追加します。targetの最初の文字が「$」の場合、既存のノードのデータに含まれる$の部分を、データベースのフィールドの値に置き換えます。\n            エンクロージャとリピータ\n            エンクロージャとリピータとなり得るノードの組み合わせを以下の表に示します。\n            形態\n                Enclosure\n                Repeater\n                Linked Element\n            \n            \n                \n                \n                \n                \n                \n                表\n                    TBODY\n                    TR\n                    any elements\n                番号リスト\n                    OL\n                    LI\n                    LI itself or inside of LI elements\n                箇条書き\n                    UL\n                    LI\n                    LI itself or inside of LI elements\n                ポップアップ、リスト\n                    SELECT\n                    OPTION\n                    OPTION itself\n                汎用\n                    data-im-control=\"enclosure\"の指定があるタグ\n                    data-im-control=\"repeater\"の指定があるタグ\n                    any elements\n                \n            \n            \n            テーブルの場合で説明します。たとえば、テーブルのあるセル、つまりTDタグで囲まれた中に、DIVタグ等で記述されたリンクノードがあったとします。そのリンクノードから上位のノードにたどって、TRをリピータとします。TRの1つ上位のノードはTBODYに必ずなります。そのTBODYがエンクロージャとなります。リンクノードに記述された情報からテーブルがわかり、そのテーブルへアクセスします。そして、レコードの値をリンクノードの定義に従って、ノードに反映されます。もし、レコードが複数あれば、リピータを複製して、その複製した一連のノードに対してリンクノードの処理を行います。ページファイルを作るときは、通常、TRタグによる要素が1つのテーブルを作りますが、レコードの数だけ行数が増えるということになります。なお、リピータとなるTRタグの要素は複数個あってもかまいません。レコードの数だけ複数のTRのセットが複製されて、データの反映が行われます。\nVer.5.3-devの段階で、任意のタグについて、data-im-control属性を指定することで、エンクロージャーやリピーターになることできるように機能を拡張しました。つまり、TBOD/TR、OL/LI、UL/LI、SELECT/OPTIONについては、属性の指定がなく、リンクノードが含まれていればエンクロージャー／リピーターとして機能します。それ以外のタグの組み合わせについては、data-im-control属性を指定します。なお、エンクロージャーの直下の子要素としてリピーターを記述する必要があります。\n            レコードがない場合の表示\n            レコードがあれば、リピーターを複製していくつかのオブジェクトがページに見えますが、そのままだと、レコードがない場合、リピーターが全くない状態になってしまいます。そこで、リピーターの1つのdata-im-control属性を「noresult」にするか、あるいはclass属性を「_im_for_noresult_」とします。すると、このリピータはレコードが存在すれば単に消しさられますが、レコードがないときにはこのリピータが1つだけエンクロージャーの中に配置されます。「レコードがありません」などの記述をこの方法で組み込めます。\n            エンクロージャやリピーターの動作をキャンセルする\n            リンクノードを含むテーブルは、自動的に展開してしまいます。その展開をさせないようにするには、data-im-control属性の値を「ignore_enc_rep」とします。たとえば、1つのテーブルの中に複数のコンテキストからのフィールドを展開したい場合は、次のように記述して、TRをリピータとして認識しないようにします。\n            <table>\n<tr data-im-control=\"ignore_enc_rep\">\n\t<td>\n\t\t<span data-im-control=\"enclosure\">\n\t\t\t<span data-im-control=\"repeater\">\n\t\t\t\t<input data-im=\"context1@field1\" />\n\t\t\t</span>\n\t\t</span>\n\t</td> \n</tr>\n<tr data-im-control=\"ignore_enc_rep\">\n\t<td>\n\t\t<span data-im-control=\"enclosure\">\n\t\t\t<span data-im-control=\"repeater\">\n\t\t\t\t<input data-im=\"context2@field2\" />\n\t\t\t</span>\n\t\t</span>\n\t</td>\n</tr>\n</table>\n\n            \n            特殊なリピーター\n\t\tdata-im-control属性が「header」「separator」「footer」のタグ要素も指定できます。headerに続いて、レコードの数だけリピーターが繰り返されますが、リピーターの間にはseprartorのタグ要素が付加され、最後にfooterのタグ要素が表示されます。\n        \n        検索や並べ替えの動作と指定\n            INTER-Mediatorは、検索に関して以下の3つの設定個所があります。あるいは、以下のような検索条件が付与されて、データベースの読み出しが行われます。\n            \n                \n                \n            定義ファイルのコンテキストの中のqueryの設定INTERMediatorオブジェクトのadditionalConditionプロパティ（JavaScript）リレーションによって決まる外部キーと対応キーとの対応（定義ファイルのコンテキストの中のrelationの設定）\n            定義ファイルのqueryでの設定は、「常に適用されたい検索条件」を与えるのに便利です。たとえば、あるフィールドの値が「3」のものだけをいつも選択するとか、消し込みのフィールドがあって消し込まれていないレコードだけをとってくるというような場合です。\n            一方、ユーザが入力した検索条件のようなデータは、INTERMediatorオブジェクトのadditionalConditionプロパティを使って指定ができます。テキストフィールドに入力したテキストやあるいは計算結果などを検索条件に与えたい場合は、この方法で指定をします。\n            そして、リレーションは、エンクロージャーとリピーターによる展開中に、さらに内包するエンクロージャーとリピーターが見つかったとき、内側のコンテキストのrelation設定を参照して、外側のレコードに対応した、つまり関連のあるレコードを取り出すための条件を与えます。\n            これら3つの条件は、無条件にANDで合成されます。\n            コンテキストのqueryの指定方法\n            定義ファイルのコンテキストのqueryは、キーとして、field、operator、valueを持つ配列を指定します。その指定を複数できるので、結果として、queryキーに対する値は配列の配列となります。\n            PDO対応のデータベースアクセスクラスを利用すると、単に「field operator 'value'」という形式での式が構築されます。値についてはquoteメソッドで処理をしてあります。従って、array('field'=>'age', 'operator'=>'>', 'value'=>'19') のような指定が一例です。文字列のワイルドカードを使う場合には、データベースエンジンに従った記述が必要です。たとえば、MySQLで前方一致させるには、array('field'=>'name','operator'=>'LIKE', 'value'=>'%田太郎') のような配列を指定します。operatorを省略すると、= とみなします。\n            'field' の値が '__operation__' の項目があれば、そこで区切りを入れます。そして区切りで分割したそれぞれについて、AND条件が適用された式が作られ、区切りで分割された固まりについてはOR演算となります。また、'field' の値が'__operation__' の項目の 'operator' が 'ex'なら、ORとANDを入れ替えます。言い換えれば、特に何もしなければ、AND条件で結びつけられますが、ANDやORを組み合わせた条件指定も可能ということです。'field' の値が'__operation__' の項目はいくつあってもかまいません。\n            'query' => array(\n    array( 'field'=>'age', 'operator'=>'>', 'value'=>'19' ),\n    array( 'field'=>'year', 'operator'=>'>', 'value'=>'1980' ))\n生成される条件文：age > '19' AND year > '1980'\n\n            \n            'query' => array(\n    array( 'field'=>'age', 'operator'=>'>', 'value'=>'19' ),\n    array( 'field'=>'year', 'operator'=>'>', 'value'=>'1980' ),\n    array( 'field'=>'__operation__' ),\n    array( 'field'=>'age', 'operator'=>'<', 'value'=>'39' ),\n    array( 'field'=>'year', 'operator'=>'<', 'value'=>'2006' ))\n生成される条件文：(age > '19' AND year > '1980') OR (age < '39' AND year < '2006')\n\n            \n            'query' => array(\n    array( 'field'=>'age', 'operator'=>'>', 'value'=>'19' ),\n    array( 'field'=>'year', 'operator'=>'>', 'value'=>'1980' ),\n    array( 'field'=>'__operation__', 'operator'=>'ex' ),\n    array( 'field'=>'age', 'operator'=>'<', 'value'=>'39' ),\n    array( 'field'=>'year', 'operator'=>'<', 'value'=>'2006' ))\n生成される条件文：(age > '19' OR year > '1980') AND (age < '39' OR year <'2006')\n\n            \n            'query' => array(\n    array( 'field'=>'age', 'operator'=>'>', 'value'=>'19' ),\n    array( 'field'=>'year', 'operator'=>'>', 'value'=>'1980' ),\n    array( 'field'=>'__operation__', 'operator'=>'ex' ))\n生成される条件文：age > '19' OR year > '1980'\n\n            \n            なお、ANDとORの組み合わせしかできないのかと思われるかもしれませんが、すべての論理式が論理和標準形ないしは論理積標準形で表現できるという定理があるので、この仕様ですべての論理式が記述できると言えるかと思われます。\n            FileMaker Serverの場合、FileMaker側の仕様の制限として、検索条件は全部ANDか全部ORかで結ぶしかできません。ANDとORを組み合わせることはできないのです。コンテキストのqueryキーの値、あるいはaddtionalConditionに「array('field'=>'__operation__', 'operator'=>'or')」を加えれば、OR演算を行います。この指定がなければAND演算になります。OR演算を指定した場合、外部キーの検索条件もORになってしまい、リレーションが正確にとれませんので、その点は十分に注意が必要です。\n            INTERMediatorオブジェクトのadditionalConditionプロパティに指定する検索条件\n            JavaScriptのプログラムで、INTERMediator.construct(true) を実行するよりも前に、例えば以下のようなプログラムを実行します。additionalConditionプロパティは配列で、最初のインデックスはコンテキスト名、つまり定義ファイルでのnameキーに対応する値を指定します。ただし、セッタを定義したプロパティであるため、値の設定には、INTERMediatorクラスのaddConditionメソッドを利用します。右辺の条件は、もちろん、該当するコンテキストにしか適用されません。オブジェクトの値については前のqueryについての説明とおおむね共通です。OR条件とAND条件がどちらも出てくるような条件も記述できます。条件が一組の場合はオブジェクトとして記述できます。2つ以上あるときはオブジェクトの配列として記述します。\n            \nINTERMediator.addCondition(コンテキスト名, {field:'age', operator:'>', value: 19});\nINTERMediator.addCondition(コンテキスト名, [\n    {field:'age', operator:'>', value: 19},\n    {field:'year', operator:'>', value: 1999}\n]);\n\n            \n            コンテキストのrelationキーの値\n            こちらもqueryと同様、配列の配列という形式をとります。キーはqueryと違います。外側のエンクロージャー／リピータとその内側のエンクロージャー／リピーターがあるとします。外側はmaster、内側はdetailというコンテキスト名で定義されているとします。\n            array(\n    array(\n        'name' =>'master',\n        'key' =>'id'\n    ),\n    array(\n        'name' =>'detail',\n        'relation' =>array(\n            array( 'foreign-field' =>'master_id','join-field' =>'id', 'operator' =>'=' )\n        )\n    ), ....\n            外側のコンテキストの1レコードを処理すると、その内部にあるエンクロージャー／リピーターが見つかります。そのとき、コンテキスト名がdetailのrelationキーの値を参照します。そして、join-fieldキーについては、外側の1レコードに存在する値を取り出し、foreign-fieldキーの値とoperatorキーの値を使って検索条件を作ります。たとえば、外側のレコードのidフィールドの値が34だった場合、「master_id                = '34'」という条件を作成し、AND条件として追加します。relationの配列は配列が複数あってもかまいません。その場合、すべての指定で生成される条件式のANDをとります。\n            なお、join-fieldの指定は必須です。不要と思われるかもしれませんが、必ずしも主キーとリンクしているとは限らないので指定は必須としました。\n            検索結果の並べ替えに関して\n            INTER-Mediatorは、検索結果の並べ替え関して以下の2つの設定個所があります。検索のクエリに対して、並べ替えの順序を決める基準となるフィールドを指定できます。\n            \n                \n            定義ファイルのコンテキストの中のsortの設定INTERMediatorオブジェクトのadditionalSortKeyプロパティ（JavaScript）\n            定義ファイルのsortでの設定は、常に適用されるソートキーです。一方、additionalSortKeyプロパティはプログラムで状況に応じて設定されるソートキーです。検索時にはこれらが合成されて、並べ替えを行います。優先順位は、additionalSortKeyプロパティの方が上位になります。また、それぞれの設定の中で、指定した順序で上位の並べ替えフィールドとなります。いずれも、配列の形式で指定をし、fieldとdirectionというキーを指定します。fieldキーに対する値は1つのフィールド名を指定します。directionに対する値はデータベースエンジンに従います。たとえば、MySQLだと、ASCあるいはDESCを指定しますが、FileMaker                Serverはascendあるいはdescendを指定します。additionalSortKeyプロパティについては、addtionalConditionプロパティと同様、最初のインデックスはコンテキスト名を指定し、その後にオブジェクトあるいはオブジェクトの配列を指定します。\n        \n        ページ移動ナビゲーションの構築\n            ページ移動のナビゲーションは、ページの中に、idが「IM_NAVIGATOR」のノードがあれば、そのノードの内容を置き換えてナビゲーションを作成します。「IM_NAVIGATOR」のidのノードがない場合には、ナビゲーションは表示されません。通常は、divタグの要素を「<div                id=\"IM_NAVIGATOR\"></div>」のように作っておくのがいいでしょう。\n            INTER-Mediator.constructメソッドは、ノードを見つけて自動的にページナビゲーションにしますが、それらの要素に以下のようなクラス設定をしています。つまり、ページで、これらのクラスに対してスタイルシートで定義を行えば、見栄えについては自由に設定ができます。\n            \n                \n                \n                \n                \n            要素名.クラス名\n                設定先\n            .IM_NAV_panel\n                    ナビゲーションそのもの。つまり、idが「IM_NAVIGATOR」のノードに設定される\n                span.IM_NAV_info\n                    文字情報を表示する部分に設定される\n                span.IM_NAV_button\n                    クリックできるボタンに対して設定される\n                span.IM_NAV_disabled\n                    クリックできないボタンに対して設定される\n                \n            \n            ナビゲーション領域の文言等は、INTERMediator.navigationLabelに配列を設定することで、任意に設定できます。配列のインデックスと対応する箇所は以下の表に示します。INTERMediator.navigationLabelに何も設定しない場合には、表の既定値が画面に見えます。\n            \n                \n                \n                \n                \n                \n                \n                \n                \n                \n            インデックス\n                設定対象\n                既定値\n                非表示\n            0\n                    最初のレコードに戻る\n                    <<\n                    インデックス0〜3\n                1\n                    前のページに戻る\n                    <\n                    無関係\n                2\n                    次のページに進む\n                    >\n                    無関係\n                3\n                    最後のレコードに進む\n                    >>\n                    無関係\n                4\n                    レコード番号の直前\n                    レコード番号\n                    インデックス4〜7\n                5\n                    レコード番号の範囲の間の文字列\n                    -\n                    無関係\n                6\n                    レコード番号範囲と全レコード数の間の文字列\n                    /\n\n\n                    無関係\n                7\n                    全レコード数の後の文字列\n                    （空文字列）\n                    無関係\n                8\n                    更新ボタンの名称\n                    更新\n                    インデックス8\n                \n            \n            INTERMediator.navigationLabelに指定する配列は9つの要素を指定します。それぞれ、インデックスに要素が対応します。要素がnullだと既定値のままになります。文字列を指定すると、その文字列に置き換わります。インデックスが0、4,、8の要素に関しては、「非表示」の列に示したインデックスのものが非表示になります。たとえば、以下の記述だと、Refreshボタンのみが消えて他は既定とおりのものが表示されます。\n            INTERMediator.navigationLabel = [null, null, null, null, null, null, null, null, false];\n        \n        HTMLのUIコンポーネントの扱い\n            テキストフィールド\n            INPUTタグ要素のtype属性がtextの場合、ターゲット指定の3つ目の指定は省略できます。その場合、value属性に値が設定されます。また、onchange属性にINTERMediator.changeValue(*)の呼び出しプログラムが登録されるので、テキストを編集し、フォーカスを別のフィールドに移動したときなどに、テキストフィールドの内容がデータベースに書き戻されます。\n            テキストエリア\n            ターゲット指定の3つ目の指定は省略できます。すると、TEXTAREAタグ要素のテキストとして設定されます。\n            ポップアップメニュー／リスト\n            SELECTタグの要素自体が値を持つコンポーネントです。SELECTタグ要素のターゲット指定の3つ目の項目を省略すると、SELECT要素の選択値として指定されます。また、OPTIONタグは決められたものでもかまいませんが、データベースからも値を設定できます。このとき、自動的に、SELECT/OPTIONタグがエンクロージャー／リピータとなります。OPTIONタグはSELECTタグ要素の選択値に対応するvalue属性と、実際にメニュー項目として見えるOPTIONタグ要素のテキストの2つの設定が必要になるでしょう。従って、「<option                data-im=\"contact_way@id@value contact_way@name\"></option>」のようなターゲット指定が2つあるようなタグ要素をSELECTの中に1つだけ作っておき、ターゲット指定の1つ目の名前のコンテキスト定義を定義ファイルに記述しておきます。\n            チェックボックス\n            データベースから読み出された特定のフィールドのデータがチェックボックスのINPUTタグ要素とリンクされている場合、そのタグのvalue属性を調べます。そして、データとvalue属性が一致していればチェックを入れます。データの有無ではなく、valueとの一致を調べます。また、書き戻す場合は、チェックが入ったときはvalue属性の値、チェックがなくなった場合には空文字列を書き戻します。通常、数値フィールドで、1ならチェックあり、それ以外ならチェックなしといったデータの持たせ方をするのが順当でしょう。\n            ラジオボタン\n            ラジオボタンに展開したい場合、同一のターゲット指定のINPUTタグでtype属性が「radio」のものを並べます。すると、name属性を自動的に設定し、複数レコードが繰り返されたときでも、問題なく処理できるようになります。それぞれのINPUTタグ要素のvalue属性はおのおのが自分の値を持ちます。データベースのフィールドの値とvalue属性の値を比べて同一のものが選択されます。\n            隠しフィールド\n            INPUTタグ要素のtype属性が「hidden」のものがよく利用されますが、むしろ、divやspanを使っていちばん外側の要素のdisplayスタイルをnoneにしておくという手段が使えます。たとえば、マスターの値を見えないタグ要素としてページ上に展開し、JavaScriptでそれらを得るという手も使えます。\n        \n        入力フォーム型ページの作成\n            アンケートの回答のような、入力フォームがあってその内容に従った新規レコードを作るだけのようなページの作り方をここで説明します。そのようなページを作るのに必要なことは以下の通りです。\n            \n                \n                \n                \n                \n            HTMLでフォームを作るが、FORMタグは不要。必要なテキストフィールドと、登録ボタンを作成する。ただし、テキストフィールドなどは、1つのエンクロージャにまとめておく。定義ファイルに、レコードの作成が可能なコンテキストを定義する。入力フォームにしたいエンクロージャのdata-im-control属性を「post」とする。HTMLのフォームの入力要素をリンクノードにします。つまり、コンテキストの名前（context）と対応するテーブルのフィールド名（field）に対して、data-im=\"context@field\"                    をタグの中に記述する。「登録」ボタンはBUTTONタグで作成し、data-im-control属性に「post」を指定する。ボタン名は任意。\n            登録ボタンを押した後の動作については、コンテキストに定義できる「post-」で始まる3つの項目が用意されています。ボタンを何度も押す事を避けるために、ボタンをメッセージで置き換えたり、別のページに移動したり、ページの再描画ができます。\n            コンテキストに指定したバリデーションの設定についても設定されますが、編集時と異なり、登録ボタンを押したときに、入力項目に対してまとめて判定が行われて、ページ内にエラーを表示したり、ダイアログボックスを表示したりができます。\n            この機能を使う場合、data-im-control属性に「post」を指定したエンクロージャーの外部にあるエンクロージャーに対しては、普通にページ合成ができるので、データベースアクセスの結果と、入力フォームを混在させることもできます。また、入力フォームの内部のエンクロージャーも同様に通常通り処理されるので、マスターの内容からポップアップを構築する事ができます。\n            登録ボタンをクリックした後に独自のプログラムを追加したい場合は、以下のような記述の関数を定義します。メッセージ表示、ページ再合成、ページ移動が定義されていた場合、それらよりも前に、以下に定義した関数を実行します。processingBeforePostOnlyContextは、データベースへの書き込み前に実施され、返り値がfalseだとデータベース処理を行わず、ページ移動なども行いません。processingAfterPostOnlyContextはデータベース処理後に実行され、返り値は指定しません。\n            INTERMediatorOnPage.processingBeforePostOnlyContext = function(node){\n            // any program here.\n};\nINTERMediatorOnPage.processingAfterPostOnlyContext = function(node){\n// any program here.\n};\n\n            \n        \n        ブラウザのバージョンを調べる仕組み\n            ブラウザのバージョンを調べて、一定のもの以外は表示できないようにしたいと思うこともあります。この機能を、必要に応じて利用できるようにしました。\n            まず、INTER-Mediator.phpと同じディレクトリにある$paramsファイルに、変数名$browserCompatibilityという変数を定義し、配列記述します。配列の記述方法は表に示します。作成例も紹介します。。\n            \n                \n                \n                \n                \n            次元\n                指定内容\n                指定する値の例\n            第1次元\n                    ブラウザの種類\n                    msie, firefox, safari, chrome, opera\n                第2次元\n                    配列（OSを示すキー）\n                    mac, win\n                \n                    バージョン記述文字列\n                    3+, 4-\n                第3次元\n                    バージョン記述文字列（第2次元が配列のとき）\n                    3+, 4-\n                \n            \n            $browserCompatibility = array(\n    'chrome' =>'1+',\n    'msie' =>'7+',\n    'firefox' =>'2+',\n    'safari' =>array( 'win' =>'4+', 'mac' =>'3+' ),\n    'opera' =>'1+',\n);\n\n            \n            「バージョン記述文字列」は、数字とプラスないしはマイナスで指定します。「3+」は3以上、「3-」は3以下のバージョンで利用できることを示します。プラスあるいはマイナスを付けないと、その数値のバージョンのみです。ブラウザ名やOSは、大文字小文字は関係ありません。\n            前の例だと、Safariのみ、OSごとに分岐しています。WindowsならVer.4以上、MacならVer.3以上は利用可能であることを示しています。\n            ブラウザの互換性をメッセージとして表示する\n            JavaScriptベースで動くINTER-Mediatorにとって、これがいちばん難しい仕事かもしれません。ブラウザによっては、JavaScriptが動かないこともあるかもしれないのです。こうした状況をうまく処理するために、以下のような点を考慮します。\n            \n                \n            ページファイルの中の、bodyタグ要素の直下あたりに、INTER-Mediatorが一切しない場合のメッセージを付けておく。たとえば、サンプルファイルの「WebSite」のindex.htmlにあるid=nonsupportedmessageのdivタグ要素。INTER-Mediatorの動作が成功すれば、このノードを削除するか表示しないようにする。これにより、JavaScriptが一切動かない状態でも、何らかのメッセージが見えるようになる。ページファイルの構築を以下のようなプログラムにする。INTERMediatorCheckBrowser関数で前に説明した$paramsファイルの変数の定義に従って、ブラウザの互換性をチェックする。もし、対応でないならfalseを返すので、ページ構築はしない。また、その場合は、body要素の中身をいちど全部クリアして、メッセージだけを表示する。もし、対応しているならnodeで示したノードを削除する。nodeはnullあるいは未指定でも構わない。\n            上記の2つのうち、一方だけでもかまいませんし、両方をやってもかまいません。また、チェックは不要ということなら、単にINTERMediator.construct(true);を呼び出すだけでもいいでしょう。\n            <!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta http-equiv=\"content-type\" content=\"text/html;charset=UTF-8\"/>\n\t\t<title>Page Title</title>\n\t\t<script type=\"text/javascript\" src=\"context.php\"></script>\n\t\t<script type=\"text/javascript\">\n\t\t\twindow.onload = function () {\n\t\t\t\tvar nonSupportNode = document.getElementById('nonsupportmessage');\n\t\t\t\tif (INTERMediatorOnPage.INTERMediatorCheckBrowser(nonSupportNode)) {\n\t\t\t\t\tINTERMediator.construct(true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\tINTERMediatorOnPage.doAfterConstruct = function () {\n\t\t\t\tvar contentNode = document.getElementById('container');\n\t\t\t\tcontentNode.style.display = \"block\" \n\t\t\t}\n\t\t</script>\n\t</head>\n\t<body>\n\t\t<div id=\"nonsupportmessage\" style=\"background-color:#333333\">\n\t\t\t<div style=\"text-align:center;color:yellow\">\n\t\t\t\tIf you see this, you must use any unsupported web browser. Or constructing the page.\n\t\t\t</div>\n\t\t\t<div style=\"text-align:center;color:yellow\">\n\t\t\t\tこの表示が見えている場合、描画処理中です。しばらくお待ちください。長時間見えている場合は、非対応ブラウザで参照しています。\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"container\" style=\"display: none\">\n\t\t\t// ページコンテンツ\n\t\t</div>\n\t</body>\n</html>\n\n            \n        \n    "
}, {
    "id": 15,
    "parent": "/ja/for-developers/",
    "path": "/ja/for-developers/reference.html",
    "title": "定義ファイルの記述方法",
    "breadcrumb": "定義ファイルの記述方法",
    "body": "\n            \n                はじめに\n                定義ファイルに記述するIM_Entry関数の引数に、データベースに関する情報を与えておきます。4つの引数があり、うち3つは配列を指定します。配列の内容を記載します。以下の表で、次元の列にキーワードがあれば、「 'キーワード' => '値' 」で該当する値を与えます。次元が「（なし）」というのは、その次元では、単に要素が並ぶということを意味します。サンプルファイルの例などを見ながら解読してください。\n\n            \n\n            \n\n                第1引数、テーブルとそれに関連した属性\n\n                \n                    テーブルと、テーブル間を関連づけるフィールドを指定します。この引数の第2次元にまとめられた1つの配列の設定を「コンテキスト定義」と呼ぶことにします。つまり、name、keyなどのキーを持った連想配列の1つ1つがコンテキスト定義です。もちろん、コンテキスト定義は複数を定義することが可能です。ここでのnameが、ターゲット指定のテーブル名で使用します。テーブル間の結合における相手のテーブル名がないと思われるかもしれませんが、相手のテーブル名は、ページファイル側の記述で自動的に決まってきます。\n\n                \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                            \n                            \n                            \n                            \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n\t\t\t\t\t\t\n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                    \n                            \n                                配列指定\n                            \n                            \n                                値\n                            \n                        \n                            \n                                キー\n                            \n                            \n                                インデックス\n                            \n                            \n                                下位のキー\n                            \n                        \n                            \n                                'name'\n                            \n                            \n                            \n                            \n                            \n                            \n                                テーブル名[必須]。'view'がなければすべての処理を適用する「テーブル名」、'view'があれば書き込みや更新処理のときの「テーブル名」\n                            \n                        \n                            \n                                'table'\n                            \n                            \n                            \n                            \n                            \n                            \n                                指定すると更新時の「テーブル名」に使用される。指定しないと、nameで指定した名前のテーブルに書き込む\n                            \n                        \n                            \n                                'view'\n                            \n                            \n                            \n                            \n                            \n                            \n                                指定すると読み込みのときの「テーブル名」に使用される。指定しないと、nameで指定した名前のテーブルから読み込む\n                            \n                        \n                            \n                                'source'\n                            \n                            \n                            \n                            \n                            \n                            \n                                1ページに複数のコンテキストが展開されている時、あるコンテキストでのレコード作成や削除結果を、同一のテーブルから構成された別のコンテキストにも反映させるための設定。この名前が同じコンテキスト群では、レコードの作成や削除結果が同期される。指定がなければ、table、view、nameの順にさかのぼって設定を得る。ビューをviewキーで指定したときにその主要テーブルを指定するような場合に使用する。\n                            \n                        \n                            \n                                'id'\n                            \n                            \n                            \n                            \n                            \n                            \n                                レコードを特定するためのキーフィールドの名前を指定する。表示のみの場合には不要だが、更新処理にはこのフィールドは必要。単一のフィールドの指定しかできない。FileMaker Serverでは「-recid」と指定することで、システムが管理するレコード識別のための値を利用できる。\n                            \n                        \n                            \n                                'records'\n                            \n                            \n                            \n                            \n                            \n                            \n                                1ページに何レコード分表示するか。最初のテーブルの設定のみ有効。未指定の場合は100000000、つまり十分に大きな値\n                            \n                        \n                            \n                                'maxrecords'\n                            \n                            \n                            \n                            \n                            \n                            1ページ内の最大表示レコード数。INTERMediator.pagedSizeの値を調整することで1ページ内の表示レコード数を変更できるが、その際にこのキーで指定した値を超えて表示することはできない。未指定の場合は100000000、つまり十分に大きな値\n                        \n                            \n                                'paging'\n                            \n                            \n                            \n                            \n                            \n                            recordsで指定したレコード数ずつ表示するとき、前後のページに移動するナビゲーションを表示する場合、trueを指定する。既定値はfalse\n                        \n                            \n                                'key'\n                            \n                            \n                            \n                            \n                            \n                            \n                                主キーフィールド名\n                            \n                        \n                            \n                                'cache'\n                            \n                            \n                            \n                            \n                            \n                            \n                                trueを指定するとキャッシュが機能する（Ver.3.0より順次組み込みのため、機能制限に注意）\n                            \n                            \n                                \n                                    'sequence'\n                                \n                                \n                                \n                                \n                                \n                                \n                                    PostgreSQLにおいて、レコード追加を行うためには、シーケンスを利用してキーフィールドに連番を設定する必要がある。そのシーケンス名をここで指定をする。\n                                \n                            \n                                \n                                    'relation'\n                                \n                                \n                                    (なし)\n                                \n                                \n                                    'foreign-key'\n                                \n                                \n                                    リレーションの外部キーフィールド名（この設定は事実上データ取り出し時のみ有効）\n                                \n                            \n                                \n                                    'join-field'\n                                \n                                \n                                    外部キーフィールドに対応するテーブル側の関連フィールド\n                                \n                            \n                                \n                                    'operator'\n                                \n                                \n                                    外部キーフィールドと対応するフィールドの比較演算子\n                                \n                            \n                                'portal'\n                            \n                            \n                                FileMaker Serverを利用しているときに、このコンテキストのデータを、親コンテキストのレイアウト上にあるポータルから取得する場合にtrueを値に指定する\n                            \n                        \n                            \n                                'query'\n                            \n                            \n                                (なし)\n                            \n                            \n                                'field'\n                            \n                            \n                                検索条件のフィールド名（この設定はデータ取り出し時のみ有効）\n                            \n                        \n                            \n                                'value'\n                            \n                            \n                                検索値\n                            \n                        \n                            \n                                'operator'\n                            \n                            \n                                検索値の解釈\n                            \n                        \n                            \n                                'sort'\n                            \n                            \n                                (なし)\n                            \n                            \n                                'field'\n                            \n                            \n                                ソート条件のフィールド名（この設定はデータ取り出し時のみ有効）\n                            \n                        \n                            \n                                'direction'\n                            \n                            \n                                昇順か降順か\n                            \n                        \n                            \n                                'calculation'\n                            \n                            \n                                (なし)\n                            \n                            \n                                'field'\n                            \n                            \n                                計算結果を表示するリンクノードのターゲット指定。コンテキスト名は現在のコンテキスト名を使うため指定しない。属性やスタイル等の指定は可能\n                            \n                        \n                            \n                                'expression'\n                            \n                            \n                                計算式。同一コンテキストのフィールド参照はフィールド名のみ記述する。他のコンテキストのフィールド参照は「コンテキスト名@フィールド名」の形式で記述する。\n\n                            \n                        \n                            \n                                'default-values'\n                            \n                            \n                                (なし)\n                            \n                            \n                                'field'\n                            \n                            \n                                新規レコード作成時の初期値指定のフィールド名\n                            \n                        \n                            \n                                'value'\n                            \n                            \n                                初期値\n                            \n                        \n                            'soft-delete'\n                            \n                            \n                            \n                            \n                            \n                            コンテキストに対する削除において、論理削除を行う。検索時には、論理的に削除されたレコードは検索対象外とする。値をtrueにすると、レコード削除時に、deleteフィールドに1を代入する。deleteフィールドのタイプは数値を想定している。delete以外のフィールドを利用したい場合には、値をフィールド名にする。\n                        \n                            \n                                'post-reconstruct'\n                            \n                            \n                            \n                            \n                            \n                            \n                            trueなら、入力型フォームにおいて、登録ボタンを押した後にページの再合成を行う。post-dismiss-messageが指定されていれば、4秒後待って再合成する。falseあるいは指定なしなら何もしない\n                        \n                            \n                                'post-dismiss-message'\n                            \n                            \n                            \n                            \n                            \n                            \n                            入力型フォームにおいて、登録ボタンを押した後に、ボタンを消してここに記述したメッセージの文字列を表示する。文字列はSPANタグでclass属性が「IM_POSTMESSAGE」となる。\n                        \n                            \n                                'post-move-url'\n                            \n                            \n                            \n                            \n                            \n                            \n                            入力型フォームにおいて、登録ボタンを押した後に、ここで指定したURLにページを移動させる。指定しない場合にはページ移動はない。post-dismiss-messageが指定されていれば、4秒後に移動する\n                        \n                            \n                                'repeat-control'\n                            \n                            \n                            \n                            \n                            \n                            \n                            \n                                繰り返し表示する部分に、レコードの追加や削除の機能を追加する。値には文字列として「insert」「insert-top」「delete」「confirm-insert」「confirm-insert-top」「confirm-delete」の文字で。confirmがあれば確認ダイアログが表示される。複数を指定する場合はそれぞれの文字列を空白で区切って書き並べる。なお「insert-confirm」や「delete-confirm」は、それぞれinsertとdeleteと同様に扱われる\n                            \n                        \n                            \n                                'navi-control'\n                            \n                            \n                            \n                            \n                            \n                            \n                            2つのコンテキストを利用して、マスター/ディテール形式のユーザインタフェースを構築する。2つのコンテキストは、原則として同一のテーブルを元にした異なるコンテキストである必要がある。マスター側のコンテキストに指定できるのは「master」ないしは「master-hide」で、通常、こちらのコンテキストは複数のレコードを表示する。マスター側には詳細を表示するボタンが追加される。ディテール側のコンテキストは「detail」を指定して、1レコードを表示する。「master」だと、2つのコンテキストによる展開結果は常に見えている。「master-hide」にするといずれか一方のみ表示し、masterに戻るボタンがディテール側に追加される。「detail-bottom」ないしは「detail-top」でボタンの位置を指定できるが、「detail」は「detail-top」と同等である。「detail-update」により、ディテールからマスターに表示するとき、マスター側の更新を行う。なお、FileMaker Serverを利用する時には、detailを指定したコンテキストのidキーの値は「-recid」にする必要がある。\n                            \n                        \n                            \n                                'button-names'\n                            \n                            'insert'\n                            \n                            repeat-controlに「insert」を指定したときに追加されるボタンのボタン名\n                        \n                            'delete'\n                            \n                            repeat-controlに「delete」を指定したときに追加されるボタンのボタン名\n                        \n                            'copy'\n                            \n                            repeat-controlに「copy」を指定したときに追加されるボタンのボタン名\n                        \n                            'navi-detail'\n                            \n                            navi-controlに「master」を指定したときに追加されるボタンのボタン名。マスター側に追加されるディテール側へ移動するボタンの名前\n                        \n                            'navi-back'\n                            \n                            navi-controlに「detail」を指定したときに追加されるボタンのボタン名。ディテール側に追加されるマスター側へ移動するボタンの名前\n                        \n                            \n                                'validation'\n                            \n                            \n                                (なし)\n                            \n                            \n                                'field'\n                            \n                            \n                                データ確認を行うフィールド名（バリデーションはVer.2.1以降で実装）\n                            \n                        \n                            \n                                'rule'\n                            \n                            \n                                確認処理。JavaScriptの式を記述する。コンポーネントの値は変数value、ノードへの参照は変数targetに入っているものとして、式を組み立てることができる。式の結果がtrueならそのまま処理を進めるが、falseならmessageの文字列をダイアログボックスで表示して、コンポーネントの値を元に戻す\n                            \n                        \n                            \n                                'message'\n                            \n                            \n                                正しくない場合に表示するメッセージ（ruleがfalseのときに表示される）\n                            \n                        \n                            \n                                'notify'\n                            \n                            \n                                'inline'なら直後、'end-of-sibling'なら兄弟ノードの最後にメッセージのテキストを追加する。このとき、ノードのクラス名は'_im_alertmessage'となる。これ以外の表記あるいは、notifyを省略すると、ダイアログボックスで表示される。\n                            \n                        \n                            'post-repeater'\n                            \n                            \n                            ページ合成時に1つのリピータの処理が終わった後に呼び出される関数名を記述する。その関数自体は、INTERMediatorOnPageオブジェクトのメソッドとして定義する。\n                        \n                            'post-enclosure'\n                            \n                            \n                            ページ合成時に1つのエンクロージャーの処理が終わった後に呼び出される関数名を記述する。その関数自体は、INTERMediatorOnPageオブジェクトのメソッドとして定義する。\n                        \n                            \n                                'script'\n                            \n                            \n                                (なし)\n                            \n                            \n                                'db-operation'\n                            \n                            \n                                データベース処理の前後に行う処理の指定。スクリプトを実行する場面で、値は'load', 'update', 'new', 'delete'のいずれか\n                            \n                        \n                            \n                                'situation'\n                            \n                            \n                                スクリプトの実行を行うタイミングで、'pre', 'presort', 'post'のいずれかの値を取る（'presort'はFileMaker Serverのみサポート）\n                            \n                        \n                            \n                                'definition'\n                            \n                            \n                                MySQLは指定したSQLコマンドを実行、FileMaker Serverはスクリプト名を指定。（FileMaker Serverでforeign-keyの指定されたテーブルの読み込み時の設定はすべて無視される）\n                            \n                        \n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t'parameter'\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tFileMaker Serverを利用しているときにスクリプト引数を指定する。バージョン5.4以降で利用可能。\n\t\t\t\t\t\t\n                            \n                                'global'\n                            \n                            \n                                (なし)\n                            \n                            \n                                db-operation\n                            \n                            \n                                設定する場面で、値は 'load', 'update', 'new', 'delete'のいずれか（グローバルの設定はFileMaker Serverのみ）\n                            \n                        \n                            \n                                field\n                            \n                            \n                                グローバルフィールド名\n                            \n                        \n                            \n                                value\n                            \n                            \n                                グローバルフィールドに与える値\n                            \n                        \n                            \n                                'authentication'\n                            \n                            media-handling\n                            \n                            メディアアクセス時の認証を通すためのクッキー情報を、このコンテキストの読み出し時にクライアントに送り込む。必要なときに値にtrueを指定する\n                        \n                            \n                                all\n                            \n                            \n                                'user'\n                            \n                            \n                                すべての操作について、このコンテキストを利用可能なユーザを配列で指定。この記述がなければすべての認証ユーザにアクセス権\n                            \n                        \n                            \n                                'group'\n                            \n                            \n                                すべての操作について、このコンテキストを利用可能なグループを配列で指定。この記述がなければすべてのグループにアクセス権\n                            \n                        \n                            \n                                'target'\n                            \n                            \n                                省略あるいは'table'なら、テーブル全体に対する権限の設定、'field-user'あるいは'field-group'ならレコードごとに権限を指定できる\n                            \n                        \n                            \n                                'field'\n                            \n                            \n                                'field-user'あるいは'field-group'に指定した場合、ユーザ名やグループ名を指定するフィールドのフィールド名\n                            \n                        \n                            \n                                load\n                            \n                            \n                                （allと同様）\n                            \n                            \n                                クエリーの操作について、このコンテキストに関する設定を行う\n                            \n                        \n                            \n                                update\n                            \n                            \n                                （allと同様）\n                            \n                            \n                                更新の操作について、このコンテキストに関する設定を行う\n                            \n                        \n                            \n                                new\n                            \n                            \n                                （allと同様）\n                            \n                            \n                                新規レコード作成の操作について、このコンテキストに関する設定を行う\n                            \n                        \n                            \n                                delete\n                            \n                            \n                                （allと同様）\n                            \n                            \n                                レコード削除の操作について、このコンテキストに関する設定を行う。ただし、targetとfieldは無視してテーブルに対する設定のみを利用\n                            \n                        \n                            \n                                'extending-class'\n                            \n                            \n                            \n                            \n                            \n                            \n                                データアクセス時に処理プログラムを追加するクラスのクラス名を指定する\n                            \n                        \n                            \n                                'protect-writing'\n                            \n                            \n                            \n                            \n                            \n                            \n                                この配列に指定したフィールド名に対する更新処理を禁止する\n                            \n                        \n                            \n                                'protect-reading'\n                            \n                            \n                            \n                            \n                            \n                            \n                                この配列に指定したフィールド名から読み出したデータをクライアントに送る事を禁止する\n                            \n                        \n                            'file-upload'\n                            （なし）\n                            field\n                            コンテキスト内のここで指定したフィールドに対してファイルアップロードのコンポーネントが設定されている場合\n                        \n                            context\n                            この指定があると、指定したコンテキストのpathフィールドにファイルパスを値として指定する新規レコードを作成する。こちらのコンテキストとのリレーションが設定されていれば正しく外部キーが設定される\n                        \n                            container\n                            この指定があると、オブジェクトフィールドにファイルを格納する（FileMaker Serverのみ）。INTER-Mediator 5.1以降で利用可能であり、FileMaker Serverのバージョン13以降が必要、かつデータベースのフィールドオプションにおいて［入力値の自動化］オプションをあらかじめ設定しておく必要があります。詳細は\nファイルのアップロードコンポーネントの「FileMakerのオブジェクトフィールドにファイルをアップロードする」を参照\n                        \n                            \n                                'db-class'\n                            \n                            \n                            \n                            \n                            \n                            \n                                このコンテキストで使うデータアクセスクラスの名前（例：PDO、FileMaker_FX）この指定がなければ、IM_Entry関数の第3引数あるいはparams.phpの値が使われます。以下、'datatype'まで同様\n                            \n                        \n                            \n                                'dsn'\n                            \n                            \n                            \n                            \n                            \n                            \n                                [PDO]このコンテキストで使う接続時に指定するDSN\n                            \n                        \n                            \n                                'option'\n                            \n                            \n                            \n                            \n                            \n                            \n                                [PDO]このコンテキストで使うオプション指定。array型で指定\n                            \n                        \n                            \n                                'database'\n                            \n                            \n                            \n                            \n                            \n                            \n                                [FileMaker_FX]このコンテキストで使うデータベース名\n                            \n                        \n                            \n                                'user'\n                            \n                            \n                            \n                            \n                            \n                            \n                                [PDO][FileMaker_FX]このコンテキストで使うユーザ名\n                            \n                        \n                            \n                                'password'\n                            \n                            \n                            \n                            \n                            \n                            \n                                [PDO][FileMaker_FX]このコンテキストで使うパスワード\n                            \n                        \n                            \n                                'server'\n                            \n                            \n                            \n                            \n                            \n                            \n                                [FileMaker_FX]このコンテキストで使うサーバーアドレス（例：127.0.0.1）\n                            \n                        \n                            \n                                'port'\n                            \n                            \n                            \n                            \n                            \n                            \n                                [FileMaker_FX]このコンテキストで使うサーバーポート（例：80）\n                            \n                        \n                            \n                                'protocol'\n                            \n                            \n                            \n                            \n                            \n                            \n                                [FileMaker_FX]このコンテキストで使うサーバーへの接続プロトコル（例：HTTP）\n                            \n                        \n                            \n                                'datatype'\n                            \n                            \n                            \n                            \n                            \n                            \n                                [FileMaker_FX]このコンテキストで使うサーバーがサポートするデータ形式（例：FMPro7）\n                            \n                        \n                            'send-mail'\n                            'load'コンテキストに対してレコードの取り出しを行った後にメールを送信する。\n                            'from'\n                            送信者名や送信者アドレスが含まれるフィールド名\n                        \n                            'to'\n                            送信先が含まれるフィールド名\n                        \n                            'cc'\n                            Cc先が含まれるフィールド名\n                        \n                            'bcc'\n                            Bcc先が含まれるフィールド名\n                        \n                            'subject'\n                            件名が含まれるフィールド名\n                        \n                            'body'\n                            メール本文が含まれるフィールド名\n                        \n                            'from-constant'\n                            送信者やアドレスを文字列で指定\n                        \n                            'to-constant'\n                            送信先を文字列で指定\n                        \n                            'cc-constant'\n                            Cc先を文字列で指定\n                        \n                            'bcc-constant'\n                            Bcc先を文字列で指定\n                        \n                            'subject-constant'\n                            件名を文字列で指定\n                        \n                            'body-constant'\n                            本文を文字列で指定\n                        \n                            'body-template'\n                            本文のテンプレートとなるファイルのファイル名\n                        \n                            'body-fields'\n                            テンプレートに差し込むフィールドの順序をカンマで区切る\n                        \n                            'f-option'\n                            UNIXでSMTPサーバを経由しない場合にtrueを指定すると、fromの指定が有効\n                        \n                            'body-wrap'\n                            右端の折り返しのバイト数\n                        \n                            'edit'\n                            \n                            コンテキストに対してレコードの更新処理を行った後にメールを送信する。第3次元については、loadと同様。\n                        \n                            'new'\n\t\t\t\t\t\t\t\n                            コンテキストに対して新たなレコードを作るアクションを起こした後にメールを送信する。第3次元については、loadと同様。\n                        \n                            'aggregation-select'\n\t\t\t\t\t\n\t\t\t\t\t\n                            PDOのデータベースクラスのみで利用できる。これらの3つの設定と、sort、queryの設定を加えて、集計処理などのSQLを構成する。このコンテキストは読み出しのみとなる。\n                        \n                            'aggregation-from'\n\t\t\t\t\t\n\t\t\t\t\t\n                        \n                            'aggregation-group-by'\n\t\t\t\t\t\n\t\t\t\t\t\n                        \n                \n                \n                    認証についは別項目「ユーザ認証とアクセス権の動作について」も参照してください。\n                \n\n                \n                    'relation'、'query'、'sort'、'script'については、配列の配列を指定します。サンプルのソース等で具体例を見てください。\n                \n\n                \n                    それぞれのパラメータの解釈は、データベースドライバによって異なる場合があります。\n                \n\n            \n\n            \n\n                第2引数、オプション設定\n\n                \n                    こちらは、「定義ファイルのオプション設定」と呼ぶことにします。\n                \n\n                \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                    \n                            \n                                配列指定\n                            \n                            \n                                値\n                            \n                        \n                            \n                                第1次元\n                            \n                            \n                                第2次元\n                            \n                            \n                                第3次元\n                            \n                        \n                            \n                                'separator'\n                            \n                            \n                            \n                            \n                            \n                            \n                                テーブル名とフィールド名を区切る文字（既定値は「@」）\n                            \n                        \n                            \n                                'formatter'\n                            \n                            \n                                (なし)\n                            \n                            \n                                'field'\n                            \n                            \n                                データコンバータを適用するフィールド名\n                            \n                        \n                            \n                                'converter-class'\n                            \n                            \n                                データコンバータクラス名\n                            \n                        \n                            \n                                'parameter'\n                            \n                            \n                                コンバータクラスに与えるパラメータ\n                            \n                        \n                            \n                                'aliases'\n                            \n                            \n                                (なし)\n                            \n                            \n                                エイリアス名\n                            \n                            \n                                エイリアスに対応する値。この値は正しい1つのターゲット指定である必要がある。この指定があれば、ターゲット指定の代わりに、エイリアス名をリンクノードに指定できる。\n                            \n                        \n                            \n                                'browser-compatibility'\n                            \n                            \n                                (なし)\n                            \n                            \n                                文字列\n                            \n                            \n                                キーにブラウザを示す文字列（safari, msieなど）を指定し、値にはバージョン番号を指定する。バージョン番号の後に+や-をつけて、以上あるいは以下をのバージョンを示すことができる\n                            \n                        \n                            \n                                配列\n                            \n                            \n                                要素にはキーにOSを指定し、その要素に前の行に説明のあるバージョン番号とプラス／マイナス記号を指定する。\n                            \n                        \n                            \n                                'transaction'\n                            \n                            \n                            \n                            \n                            \n                            \n                                編集可能コンポーネントの変更時の書き戻しについて、'none'なら行わない、'automatic'ならchangeイベントが発生するたびに書き戻す。省略するとautomaticが指定されたものとみなす\n                            \n                        \n                            \n                                'authentication'\n                            \n                            \n                                'user'\n                            \n                            \n                            \n                            \n                                利用可能なユーザを配列で指定。この記述がなければすべてのユーザにアクセス権。データベースのネイティブユーザで認証する場合には、値を「array('database_native')」と指定する。\n                            \n                        \n                            \n                                'group'\n                            \n                            \n                            \n                            \n                                利用可能なグループを配列で指定。この記述がなければすべてのグループにアクセス権\n                            \n                        \n                            \n                                'user-table'\n                            \n                            \n                            \n                            \n                                ユーザ情報が保存されているテーブル名。省略すると'authuser'\n                            \n                        \n                            \n                                'group-table'\n                            \n                            \n                            \n                            \n                                ユーザ情報が保存されているテーブル名。省略すると'authgroup',\n                            \n                        \n                            \n                                'corresponding-table'\n                            \n                            \n                            \n                            \n                                ユーザとグループが対応づけられている情報が保存されているテーブル名。省略すると'authcor',\n                            \n                        \n                            \n                                'challenge-table'\n                            \n                            \n                            \n                            \n                                チャレンジが保存されているテーブル名。省略すると'issuedhash',\n                            \n                        \n                            \n                                'authexpired'\n                            \n                            \n                            \n                            認証が自動的に継続される時間を秒数で指定する。省略すると'3600'（1時間）。バージョン4.4以降では、0を指定すると有効期限はWebブラウザー終了時まで\n                        \n                            \n                                'storing'\n                            \n                            \n                            \n                            \n                                認証情報のクライアントへの保存を指定。'cookie'ならPathを指定しないでクッキーに保存（既定値）、'cookie-domainwide'ならドメイン全体で共有できるようにクッキーに保存、'session-storage'ならブラウザのセッションストレージに保存、'none'ならクッキーに保存しない\n                            \n                        \n                            \n                                'realm'\n                            \n                            \n                            \n                            \n                                認証領域名。ログインパネルの上部に表示される。また、認証情報を記憶するクッキーの名称の末尾に付与される。\n                            \n                        \n                            \n                                'email-as-username'\n                            \n                            \n                            \n                            \n                                trueを指定すると、authuserテーブルのusernameと同時にemailフィールドも検索する。つまり、電子メールアドレスでの認証が可能になる。既定値はfalse\n                            \n                        \n                            'issuedhash-dsn'\n                        \n                        \n                        \n                        \n                            issuedhashテーブルに対するDSNを指定する。たとえば、FileMakerデータベースで、issuedhashテーブルをSQLiteで運用する場合に使える\n                        \n                        \n                            \n                                'password-policy'\n                            \n                            \n                            \n                            パスワード変更時に適用されるパスワードポリシー。useAlphabet useNumber useUpper useLower usePunctuation length(10) notUserNameの各単語をスペースで区切って指定する。useAlphabetはアルファベットを使用していないといけなくする。その他、同様に単語から意味が分かるはずである。length(10)はパスワードは10文字以上にする必要があるという意味で、( ) 内には任意の数値を記述できる。\n                        \n                            \n                                'media-root-dir'\n                            \n                            \n                            \n                             \n                            \n                           \n                                メディアアクセスに対して定義ファイルにリダイレクトの設定をWebサーバーで行う。そうすれば、この設定に指定したディレクトリにある画像などのメディアファイルを読み出す。\n                            \n                        \n                            \n                                'media-context'\n                            \n                            \n                            \n                                \n                            \n                        \n                                メディアアクセスに認証を設定するとき、ここで指定したコンテキストにアクセスしたときにメディアの認証用のトークンをクライアントに届ける。このトークンをクライアントが持つ事で、メディアプロキシが認証される\n                            \n                        \n                            'pusher'\n                            app_id\n                            \n                            Pusherで定義したAppのapp_id\n                        \n                            key\n                            \n                            Pusherで定義したAppのkey\n                        \n                            secret\n                            \n                            Pusherで定義したAppのsecret\n                        \n                            'smtp'\n                            'server'\n                            \n                            メール送信時に使用するサーバのホスト\n                        \n                            'port'\n                            \n                            メール送信時に使用するサーバのポート\n                        \n                            'username'\n                            \n                            メール送信時に認証で使用するユーザー名\n                        \n                            'password'\n                            \n                            メール送信時に認証で使用するパスワード\n                        \n                \n                \n                    認証についは別項目「ユーザ認証とアクセス権の動作について」も参照してください。\n                \n\n                \n                    browser-compatibilityは、params.phpファイルでも指定できますが、ここに指定をした方が有効になります。この指定に含まれているブラウザで通常処理を行い、含まれていないブラウザでは処理を行わないようにします。\n                \n\n                \n                    以前「trigger」というキーワードを書いていましたが、この設定は不要で、普通にノードに対してJavaScriptの記述をすればいいので、設定としては組み込まないこととします。\n                \n\n            \n\n            \n\n                第3引数、データベースへの接続情報\n\n                \n                    データベースヘの接続情報を設定します。この設定を「定義ファイルのデータベース接続設定」と呼ぶことにします。なお、INTER-Mediator.phpと同じフォルダに入れておく「params.php」でも、データベース接続に関する指定が可能です。ページごとに接続情報が違うなら、この引数に指定してもいいのですが、たくさんのファイルで同じ設定ならparams.phpで指定をしてもいいでしょう。さらに、IM_Entry関数の第一パラーメータで指定する配列のコンテキストに対しても設定できます。params.php内で指定できる変数についてもまとめておきます。なお、必要な情報は、データベースクラスごとに異なります。以下の表には、値を必要とするクラスも記述してあります。\n                \n\n                \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                    \n                            \n                                インデックス\n                            \n                            \n                                値\n                            \n                            \n                                params.phpで変数名\n                            \n                        \n                            \n                                'db-class'\n                            \n                            \n                                データアクセスクラスの名前（例：PDO、FileMaker_FX）\n                            \n                            \n                                $dbClass\n                            \n                        \n                            \n                                'dsn'\n                            \n                            \n                                [PDO]接続時に指定するDSN\n                            \n                            \n                                $dbDSN\n                            \n                        \n                            \n                                'option'\n                            \n                            \n                                [PDO]オプション指定。array型で指定\n                            \n                            \n                                $dbOption\n                            \n                        \n                            \n                                'database'\n                            \n                            \n                                [FileMaker_FX]データベース名\n                            \n                            \n                                $dbDatabase\n                            \n                        \n                            \n                                'user'\n                            \n                            \n                                [PDO][FileMaker_FX]ユーザ名\n                            \n                            \n                                $dbUser\n                            \n                        \n                            \n                                'password'\n                            \n                            \n                                [PDO][FileMaker_FX]パスワード\n                            \n                            \n                                $dbPassword\n                            \n                        \n                            \n                                'server'\n                            \n                            \n                                [FileMaker_FX]サーバーアドレス（例：127.0.0.1）\n                            \n                            \n                                $dbServer\n                            \n                        \n                            \n                                'port'\n                            \n                            \n                                [FileMaker_FX]サーバーポート（例：80）\n                            \n                            \n                                $dbPort\n                            \n                        \n                            \n                                'protocol'\n                            \n                            \n                                [FileMaker_FX]サーバーへの接続プロトコル（例：HTTP）\n                            \n                            \n                                $dbProtocol\n                            \n                        \n                            \n                                'datatype'\n                            \n                            \n                                [FileMaker_FX]サーバーがサポートするデータ形式（例：FMPro7）\n                            \n                            \n                                $dbDataType\n                            \n                        \n                \n\n            \n\n            \n\n                第4引数、デバッグ情報の表示\n\n                \n                    数値かfalseかを指定します。false以外だと、デバッグ情報をページの最初に表示します。1ないしは2を指定でき、2の方が多くの情報を出します。\n                \n\n            \n\n        "
}, {
    "id": 16,
    "parent": "/ja/for-developers/",
    "path": "/ja/for-developers/migration.html",
    "title": "バージョン移行ガイド",
    "breadcrumb": "バージョン移行ガイド",
    "body": "\n            \n                はじめに\n                INTER-Mediatorもバージョンを重ねてきており、以前の引き継がなくなってしまった箇所が出てきています。Ver.3 (2012/12/10) 以降の大きな変更点、つまりアプリケーション側を書き換えないといけないような変更をここにまとめておきます。\n            \n            \n                Ver.5.4-devでの変更\n                サーバーサイドのPHPのAPIを整理\nデータベースアクセスクラスの基本メソッド\nデータベースアクセスクラスでは、CRUDおよびその関連処理のためのメソッドを既定しています。従来は、そのメソッドに処理しているコンテキスト名を引数として渡していましたが、それをやめました。また、メソッドの名称もCRUDの各単語に対応したものとなりました。現在処理しているコンテキスト名は、DB_SettingsクラスのメソッドgetDataSourceName()で取得できます。Ver.5.4-dev以降は、getFromDBは呼び出されず、readFromDBが呼び出されるようになるので、必要な修正をしてください。\n従来の定義\n\ninterface DB_Interface extends DB_Spec_Behavior\n{\n    public function getFromDB($contextName);\n    public function countQueryResult($contextName);\n    public function getTotalCount($contextName);\n    public function setToDB($contextName);\n    public function newToDB($contextName, $bypassAuth);\n    public function deleteFromDB($contextName);\n    public function copyInDB($contextName);\n}\n\n新しい定義\n\ninterface DB_Interface extends DB_Spec_Behavior\n{\n    public function readFromDB();         // former getFromDB\n    public function countQueryResult();\n    public function getTotalCount();\n    public function updateDB();           // former setToDB\n    public function createInDB($bypassAuth);  // former newToDB\n    public function deleteFromDB();\n    public function copyInDB();\n}\n\n\nデータベースアクセス処理の拡張クラス\nコンテキストにextending-classキーで指定したクラス名にインプリメントするインタフェースを以下のように変更しました。名前をCRUDに対応するものにすると同時に、データソース名の引数は渡しません。拡張処理クラスがDB_UseSharedObjectsを継承している場合は、DB_SettingsクラスのインスタンスへdbSettingsプロパティでアクセスできます。これを利用すると、現在処理しているコンテキスト名は、DB_SettingsクラスのメソッドgetDataSourceName()で取得できます。Ver.5.4-dev以降は、従来の名称のメソッドは呼び出されず、新しいメソッドしか呼び出されませんので、必要な修正をしてください。\n従来の定義\n\ninterface Extending_Interface_BeforeGet {\n    public function doBeforeGetFromDB($dataSourceName);\n}\ninterface Extending_Interface_AfterGet {\n    public function doAfterGetFromDB($dataSourceName, $result);\n}\ninterface Extending_Interface_AfterGet_WithNavigation {\n    public function doAfterGetFromDB($dataSourceName, $result);\n    public function countQueryResult($dataSourceName);\n    public function getTotalCount($dataSourceName);\n}\ninterface Extending_Interface_BeforeSet {\n    public function doBeforeSetToDB($dataSourceName);\n}\ninterface Extending_Interface_AfterSet {\n    public function doAfterSetToDB($dataSourceName, $result);\n}\ninterface Extending_Interface_BeforeDelete {\n    public function doBeforeDeleteFromDB();\n}\ninterface Extending_Interface_AfterDelete {\n    public function doAfterDeleteFromDB($result);\n}\ninterface Extending_Interface_BeforeNew {\n    public function doBeforeNewToDB($dataSourceName);\n}\ninterface Extending_Interface_AfterNew{\n    public function doAfterNewToDB($dataSourceName, $result);\n}\n\n新しい定義\n\ninterface Extending_Interface_BeforeRead {\n    public function doBeforeReadFromDB();\n}\ninterface Extending_Interface_AfterRead {\n    public function doAfterReadFromDB($result);\n}\ninterface Extending_Interface_AfterRead_WithNavigation {\n    public function doAfterReadFromDB( $result);\n    public function countQueryResult();\n    public function getTotalCount();\n}\ninterface Extending_Interface_BeforeUpdate {\n    public function doBeforeUpdateDB();\n}\ninterface Extending_Interface_AfterUpdate {\n    public function doAfterUpdateToDB($result);\n}\ninterface Extending_Interface_BeforeCreate {\n    public function doBeforeCreateToDB();\n}\ninterface Extending_Interface_AfterCreate {\n    public function doAfterCreateToDB($result);\n}\ninterface Extending_Interface_BeforeDelete {\n    public function doBeforeDeleteFromDB();\n}\ninterface Extending_Interface_AfterDelete {\n    public function doAfterDeleteFromDB($result);\n}\ninterface Extending_Interface_BeforeCopy {\n    public function doBeforeCopyInDB();\n}\ninterface Extending_Interface_AfterCopy {\n    public function doAfterCopyInDB($result);\n}\n\n\nDB_Settingsクラスの整理統合\n以下のメソッドはVer.5.4-devでは定義されていません。代替メソッドを使ってください。\n\nfunction getTargetName()\nfunction getTargetDataSource()\nfunction setTargetDataSource($targetDataSource)\nfunction getIndexOfDataSource($dataSourceName)\nfunction setTargetFields($fields)\n\ngetTargetName/getTargetDataSource/setTargetDataSourceメソッドは、ほぼ同一の動きをするgetDataSourceName/setDataSourceNameメソッドに置き換えました。setTargetFieldsとgetIndexOfDataSourceメソッドは使われていないので、削除しました。\n              \n              \n                Ver.5.3での変更\n                CSRF攻撃対策の追加\n                params.phpファイルで$webServerNameという変数を設定することでCSRF攻撃対策を実施することができるようになりました。Webサーバーのドメイン名もしくはFQDN（完全修飾ドメイン名）を配列で設定するようにしてください。設定例1：array('inter-mediator.com');設定例2：array('www.inter-mediator.com', 'inter-mediator.org');\n            \n            \n                Ver.5.2での変更\n                データベースクラスでのメソッド定義の変更\n                Auth_Interface_DBインタフェースで定義しているauthSuportCreateUserメソッドの引数が、LDAP対応に伴い2つから4つに増えました。\n\t                データベースクラス（DB_PDO.phpなど）については、機能を組み込んでいなくても、メソッドの引数をインタフェースでの定義に揃えなければなりません。\n\t                定義内容は、DB_Interfaces.phpファイルを参照してください。\n                \n              \n            \n                Ver.4.7での変更\n                Internet Explorer Ver.8対応に関して\n                これまでは、Internet Explorerの最低サポートバージョンをVer.8としてきましたが、Ver.4.7現在、いくつかの機能が動かない状態になっています。これらについては、今後サポートする予定はありません。しかしながら、主要な機能はVer.4.7でも動いているので、IE8のサポートバージョンとして、最後のものがVer.4.7とします。Ver.4.7でIE8で動作に問題があるものとして、以下のものがわかっています。\n\n                \n                    \n                    \n                    \n                フィールドの文字列中に改行がある場合、TEXTAREAに正しく表示されない。これは、改行をBRタグに変更してinnerHTMLに設定するという手段が、IE8ではエラーになってしまうためです。Pusherをベースにしたクライアント間同期の仕組みのうち、レコード削除後の処理でエラーが出る。フィールドの更新や新規レコードは稼働します。ローカルコンテキストを利用して、検索パラメータを指定する機能のうち、1ページの件数の制限と、並べ替えに使用するフィールドの指定が正しく動作しません。検索条件と、「検索」ボタンは動作します。\n\n                なお、Ver.5以降は、IE8のためのコードを削除する可能性もあり、動かない機能がより増える可能性もあります。また、Ver.5以降は、Internet Explorerでの確認は、主として最新バージョンでのみ行うことにします。Firefox、Chrome、Safariと同様な扱いにします。なお、特定のバージョンでの不具合について、対応を希望する場合には、Facebookのグループ等でリクエストを出してください。\n              \n\n              \n                Ver.4.6での変更\n                setExeucteメソッド\n                グローバル変数のIMLibChangeEventDispatch、IMLibKeyEventDispatch、IMLibMouseEventDispatchの初期化は、constructメソッドを呼び出す後になりました。これらのオブジェクトで利用できていた、setExeucteなどのメソッドは、constructを呼び出した後に設定してください。具体的には、INTERMediatorOnPage.doAfterConstruct = function() { } という関数の定義と代入を行い、関数内でMLibChangeEventDispatch、IMLibKeyEventDispatch、IMLibMouseEventDispatchを利用してください。\n                INTERMediator.additionalCondition, additionalSortKeyプロパティ\n                コンテキストを利用して読み出しを行うとき、JavaScriptで検索条件や並べ替え条件を付加できるプロパティadditionalConditionとadditionalSortKeyがあります。これらは、従来までは単純にオブジェクトを記録していただけですが、Ver.4.4あたりでローカルコンテキストに記録して、ページを改めて呼び出した時にローカルコンテキストを復活させることで元に戻すという仕様を組み込みました。しかしながら、その動作を見直している時にバグが見つかりましたが、結果的に、additionalConditionとadditionalSortKeyの参照は変更ありませんが、追加や書き換えには以下のような変更が必要になります。これらの2つのプロパティにセッタとゲッタを設定しているため、セッタを稼働させるために、プロパティそのものへの代入が必要になります。あるいは、新しいAPIのaddConditionやaddSortKeyメソッドを利用してください。追加した条件を消去するclearConditions、clearSortKeysメソッドも利用できます。\n\n                \n                    INTERMediator.additionalCondition[\"acontext\"] = [];\nINTERMediator.additionalCondition[\"acontext\"].push({field: \"afield\", operator: \"=\", value: \"1001\"});\nINTERMediator.additionalCondition[\"acontext\"].push({field: \"live\", operator: \"=\", value: \"1\"});\n\n    ↓\n\n（修正方法A）\nINTERMediator.addCondition(\"acontext\", {field: \"afield\", operator: \"=\", value: \"1001\"});\nINTERMediator.addCondition(\"acontext\", {field: \"live\", operator: \"=\", value: \"1\"});\n\n（修正方法B）\nvar conditions = INTERMediator.additionalCondition;\nconditions[\"acontext\"] = [];\nconditions[\"acontext\"].push({field: \"afield\", operator: \"=\", value: \"1001\"});\nconditions[\"acontext\"].push({field: \"live\", operator: \"=\", value: \"1\"});\nINTERMediator.additionalCondition = conditions\n                \n\n                検索条件が1つだけの場合も、同様に、次のように書き換えが必要になります。\n\n                \n                    INTERMediator.additionalCondition[\"acontext\"] = {field: \"afield\", operator: \"=\", value: \"1001\"};\n\n    ↓\n\n（修正方法A）\nINTERMediator.addCondition(\"acontext\", {field: \"afield\", operator: \"=\", value: \"1001\"});\n\n（修正方法B）\nvar conditions = INTERMediator.additionalCondition;\nconditions[\"acontext\"].push({field: \"afield\", operator: \"=\", value: \"1001\"});\nINTERMediator.additionalCondition = conditions\n                \n            \n\n            \n                Ver.4.5での変更\n                valueChangeメソッド\n                INTERMediator.valueChange(idValue)はIMLibUI.valueChange(idValue)に変更されました。もしもJavaScriptのプログラム内でvalueChangeメソッドを使用している場合には書き換えが必要です。\n            \n\n            \n                Ver.4.1 (2014/2/7) での変更\n                ターゲット指定をclass属性に独自の記述方法で書いていましたが、Ver.4.1より、HTML5のdata属性での記述に移行しました。なお、従来の記述も基本的にはそのまま利用できるはずですが、大した手間にならないので、書き直すのがいいかと思います。\n                \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                    \n                            以前の表記法\n                            Ver.4.1以降の表記法\n                            利用場所\n                        \n                            class=\"IM[...]\"\n                            data-im=\"...\"\n                            ページファイルのターゲット指定\n                        \n                            class=\"IM_WIDGET[...]\"\n                            data-im-widget=\"...\"\n                            JavaScriptコンポーネントの指定\n                        \n                            class=\"_im_enclosure\"\n                            data-im-control=\"enclosure\"\n                            エンクロージャにしたいDIV, SPANタグ\n                        \n                            class=\"_im_repeater\"\n                            data-im-control=\"repeater\"\n                            リピータにしたいDIV, SPANタグ\n                        \n                            class=\"_im_ignore_enc_rep\"\n                            data-im-control=\"ignore_enc_rep\"\n                            リピータあるいはエンクロージャでなくする\n                        \n                            class=\"_im_for_noresult_\"\n                            data-im-control=\"noresult\"\n                            検索結果が0レコードの時に表示されるリピータ\n                        \n                            class=\"_im_post\"\n                            data-im-control=\"post\"\n                            ポストオンリーモードのエンクロージャおよび書き込みボタン\n                        \n                            name=\"IM[...]\"\n                            data-im-group=\"....\"\n                            ポストオンリーモードでのラジオボタンのグループ指定\n                        \n                \n                以下は書き換え例です。\n                \n                    <input class=\"IM[mytable@anyfield]\" />\n    ↓\n<input data-im=\"mytable@anyfield\" />\n                \n                IM[]に複数のターゲット指定を書いていた場合、|で区切っていましたが、空白で区切れるようになりました。\n                \n                    <option class=\"IM[mytable@myvalue@value|mytable@myname]\" />\n    ↓\n<option data-im=\"mytable@myvalue@value mytable@myname\" />\n                \n            \n            \n                Ver.4.0 (2013/12/4) での変更\n                INTER-Mediatorの配布ファイルのファイル構成が変わりました。ルート直下にフレームワークがあり、サンプルファイルはSamplesの下に配備しました。同時に、dist-docs/buildup.shを利用して、運用向けのフレームワークを用意する機能を加えています。こちらをごらんください。\n            \n            \n                Ver.3.8 (2013/8/22) での変更\n                params.phpファイルにおいて記述できていた$scriptPathPrefix、$scriptPathSufixを利用して、クライアントから呼び出すURLをコントロールできていましたが、$callURLという変数で完全にURLで指定できるようにしています。$scriptPathPrefix、$scriptPathSufixも使用できます。\n            \n        "
}, {
    "id": 17,
    "parent": "/ja/for-developers/",
    "path": "/ja/for-developers/docker.html",
    "title": "Dockerの利用",
    "breadcrumb": "Dockerの利用",
    "body": "\n          \n            INTER-MediatorをDockerで動かす\n          \n          \n            Dockerとは\n            \n              Docker（ドッカー[2]）はソフトウェアコンテナ内のアプリケーションのデプロイメントを自動化するオープンソースソフトウェアである。\n                Wikipediaより\n              \n            \n\n            \n              Dockerを使うことにより、例えば同じ設定内容のWebサーバーを素早く追加して並列化したり、プロダクション環境と同じWebサーバーを開発環境に用意することが迅速にできます。\n              もちろんWebサーバーに限らずDBサーバーにも使うことが出来ます。\n              ここではそんなDockerをINTER-Mediatorを動かす環境としてセットアップしてみます。\n            \n          \n          \n            Dockerのインストール\n            \n              まずはローカルに Docker が実行できる環境を作りましょう。以下のドキュメントを参考にしてください。\n              Mac では Docker Toolbox をインストールする方法と Docker for Mac をインストールする方法の2通りがあります。\n              Windows では Docker Toolbox をインストールする方法と Docker for Windows をインストールする方法の2通りがあります。\n              OSのバージョンによってはインストールの選択肢がDocker Toolboxのみとなります。\n            \n\n            macOSにDockerをセットアップする場合\n            \n              macOSの場合、Docker Toolboxを入れる方法とDocker for Macを入れる方法があります。\n              既にVirtualBoxを使用している場合はDocker Toolboxをダウンロードしてインストールします(ダウンロードに結構時間がかかるかもしれません...)。\n              仮想化ソフトウェアを一度もインストールしたことがないのでしたらDocker Toolboxを入れてもいいですし、Docker for Macを入れても構いません。\n              ※Docker Toolboxのインストーラの中でVirtualboxのインストールが行われます。\n              \n              Docker for Mac は、macOSのxhyveを使っています。\n              よく分からない場合やxhyveが信用ならない場合はDocker Toolboxでのセットアップを採用してください。\n              ここではDockerの詳しい説明は行いません。\n            \n\n            WindowsにDockerをセットアップする場合\n            \n              Windows7(64bit)以降であればWindowsでもDockerを動かすことが出来ます。\n              Docker Toolboxのwindows版をインストールします(ダウンロードに結構時間がかかるかもしれません...)。\n              ※Docker Toolboxのインストーラの中でVirtualboxのインストールが行われます。\n              Windows10 Proに限ってはHyper-Vを利用するDocker for Windowsのインストールが簡単です。\n              ※Docker for Windowsは2016/07/05時点ではWindows 10 Pro、Enterprise、Educationのみ対応ですが将来的には他のWindows10もサポートする予定だそうです。\n              ※Docker for WindowsではHyper-Vを使います。お使いのPCの構成によってはHyper-Vの構成と再起動が入ります。\n              ※Windows用のインストールでウィザード内でKitematicのインストールチェックボックスは外さないようにしてください。後で使います。\n              \n              \n            \n\n            KitematicでDockerを試す\n            \n              Dockerの便利ツールの中にKitematicというものがあります。\n              Dockerのお手軽さを体験するために、Kitematicを使ってみましょう。\n              KitematicはDockerをGUIで操作するツールです。Dockerのインストール時に一緒に入ってるはずです。\n              \n              ※Docker for mac の場合は別途ダウンロードが必要です。ダウンロードしたものをアプリケーションフォルダに入れてください。\n              \n              \n              ※Docker for Windowsの場合は別途ダウンロードが必要な場合があります。ダウンロードしたものを任意の場所に解凍(展開)してください。\n              \n              \n              \n              ※WindowsでDocker Toolboxをインストールした場合でKitematicの最初の起動に失敗した場合、Hyper-Vを使おうとしている時があります、選択肢にVirtualboxを使うがありますので、そちらで再度起動を試してください。\n              Kitematicを起動すると真ん中にDockerHubで公開されているDockerイメージのお薦めなどが表示されています。\n              \n              ここでは検索して任意のDockerイメージを探すことも出来ます。\n              虫眼鏡マークの検索欄に\n            \n\n            sakadonohito/im\n\n            \n              と入力して検索してみましょう。INTER-Mediatorを動かすDockerのサンプルが出てきます。これをNewしましょう。\n              ローカルにDockerイメージがダウンロードされますのでそれを起動してみましょう。\n              起動したらブラウザでアクセスしてみましょう。\n              http://localhost/im/Samples \n              INTER-MediatorのサンプルTOPページが表示されましたでしょうか。\n            \n            一体何がどうなったのでしょうか？仕組みを説明します。\n            \n              \n              \n              \n              \n              \n            INTGER-Mediatorが動く状態のPHP、MySQL、Apacheが組み込まれたDockerイメージがDockerHubにホストされていた。手元の環境にDockerやDockerのGUIツールKitematicをインストールした。KitematicからDOckerHubにアクセスし、INTER-MediatorのDockerイメージをダウンロードした。KitematicからダウンロードしたDockerイメージを起動した。ブラウザから起動したDockerイメージ上のINTER-Mediatorにアクセスした。\n            という流れです。\n              なぜ、先述のURLでDocker上のINTER-Mediatorにアクセス出来たのかは、そうなるようにDocker上のApacheの設定を行っているからです。\n              お手軽ですね。\n            \n          \n          \n            IMを動かすDockerイメージの作成\n\n            \n              前の項でKitematicを使って作成済みのDockerイメージを起動することが出来ました。\n              次に自作のINTER-MediatorアプリをDockerイメージ化するにはどうしたらよいでしょうか。\n              簡単に説明します。\n            \n\n            Dockerイメージの設計書？Dockerfile\n\n            詳しくはDockerの公式を参照して欲しいのですが、Dockerfileという名前のテキストファイルに\n\n            \n              \n              \n              \n            ベースとなるLinuxディストリビューションやDockerイメージ名の指定作成者の名前Dockerイメージにインストールしたいライブラリ等のインストールコマンド、事前に用意したファイルを取り込むコマンドなど\n\n            といった内容を記述します。\n              INTER-Mediator用のイメージを作りには\n            \n\n            \n              \n              \n              \n              \n              \n              \n            ベースとなるLinuxディストリビューションやDockerイメージ名の指定作成者の名前PHPのインストールと設定MySQLのインストールと設定Apacheのインストールと設定INTER-MediatorディレクトリをWeb公開用の場所に配置\n\n            のようになります。\n              終わったら記述したDockerfileからイメージを作成します。\n              Dockerfileのあるディレクトリで以下のようなコマンドでイメージを作成します。\n              参考Dockerfile\n            \n\n            docker build -t <name>/<app>:<tag>\n\n            nameはDockerHubの登録アカウント名、appは今回ならINTER-Mediatorと分かるような名称がいいでしょう。\n              tagはバージョン番号になります。\n            \n\n            注意点としては、Dockerは仮想サーバーではありません。Dockerイメージを起動したからといって、自動起動のサービスが勝手に起動したりはしません。\n              Dockerイメージの起動時に渡すコマンドで目的のサービスを起動します。\n            \n\n            作成したDockerイメージは例として以下の様なコマンドで起動できます。\n\n            docker run -d --name im -p 18880:80 myhoge/im:1.0\n\n            例はDocker(以降 コンテナ)を「im」という名前でバックグラウンドプロセスで起動。ローカルの18880ポートをコンテナの80ポートにマッピング、Dockerイメージは「myhoge/im:1.0」という意味になります。\n              正しくDockerイメージが作成できていれば http://localhost:18880/ でコンテナ内で起動したApacheのルートが表示されます。\n            \n\n            これでいつでも手元でINTER-Mediatorを起動できるようになりました。\n          \n          \n            DockerHubの登録手順\n\n            手元でDockerのイメージが作成出来るようになって、ローカルで起動もできるようになりました。\n              このイメージを他の環境でも使いたい場合はどうしたらよいでしょうか？\n              DockerfileをGithubに置いておいて、都度DockerfileをpullしてDockerイメージをbuildして構いません。\n              ですが、作成したイメージをDockerHubに登録しておいて、使いたい環境でpullするのが使う時はお手軽です。\n            \n\n            \n              Docker Hubにアクセスし、アカウントを持っていない人は登録します。\n              アカウントの登録ができていれば後は手元からDockerイメージをpushするだけです。\n              手元のターミナルで\n            \n\n            docker login\n\n            してでまずはターミナルでDockerHubにログインします。次に\n\n            docker push myhoge/im:1.0\n\n            のようにコマンドを入力します。myhoge/im:1.0は前項の例の流用です。\n              dockerイメージ名:tagという構文です。\n              ※latestというtagでイメージを作成してpushした場合はDockerHubからpullする際にtagを省略してDockerイメージをpull出来るようになります。\n            \n          \n          \n            Dockerコンテナの中身を分割する\n\n            \n              1つのDockerイメージに全てを詰め込むのはポータビリティが高いですが、本当はDockerの思想に反します。\n              1つのDockerコンテナには一つの役割にするのが理想とされています。\n              Webサーバー、DBサーバー、さらに分割するなら永続データとコンテナを分けてみましょう。\n              ※PHPをApacheで動かす前提で説明しますので、ここではPHPとWebサーバー(Apache)は分けません。\n            \n\n            docker-composeを使う\n\n            \n              上記のコンテナ分割を行うと、1つのアプリのために幾つものDockerコンテナをセットアップして起動しないといけなくなりちょっと煩雑になります。\n              Dockerにはその煩雑さを解消するため、docker-composeというツールが有りますので、使ってみましょう。\n              Dockerをインストールすると一緒についてきます。\n              ※docker-composeのバージョンが1.7未満の場合はバージョンを上げてください。\n            \n\n            \n              細かい内容説明はドキュメントを参照してください。完成形をpullしましょう。\n              任意のディレクトリで以下のコマンドを実行し、githubからサンプルのdocker-composeファイルをcloneします。\n            \n\n            git clone https://github.com/sakadonohito/im-compose.git \n\n            \n              cloneした内容にdocker-compose.ymlという設定ファイルがあります。\n              ここにどういったDockerコンテナの起動に関する設定を連携させたいコンテナ分だけ記述します。\n              YAMLファイルについての説明はここでは割愛します。\n              このdocker-compose.ymlで扱うMySQLとPHP(with Apache)のDocker起動設定を記載しています。\n              また、データボリュームの設定も書いてあります。\n              実はこのcloneした内容には2つ足りないものが有りますので、別途用意してください、\n            \n\n            \n              \n              \n            \n                INTER-Mediatorで使うMySQLのサンプルデータを流し込むSQLファイル(sample_schema_mysql.sql)\n                \n                  \n                  \n                  \n                INTER-Mediatorをダウンロードした際に内包しているsample_schema_mysql.txtファイルをsample_schema_mysql.sqlに拡張子変更してください。mysql/tmpというディレクトリがない場合は作成してください。sample_schema_mysql.sqlをmysql/tmpディレクトリに配置してください。\n              \n                INTER-Mediatorそのもの。\n                \n                  \n                INTER-Mediatorをapache/webrootディレクトリにimという名前に変更して配置してください。\n              \n\n            上記の追加作業を行ったら、以下のコマンドを実行してください。\n\n            docker-compose up -d\n\n            設定ファイルの内容に従って、イメージをpullしてデーモンで起動してくれます。\n              http://192.168.99.100/im/Samples にアクセスしてみてください。サンプルの画面が見えると思います。\n              今回の設定では、ローカルに配置したINTER-MediatorをDockerコンテナにマウントして使っていますので、ローカル上でINTER-Mediatorを編集すると、それが反映されます。htmlファイルを編集して画面を更新してみてください。\n            \n\n            コンテナを停止して削除するには以下のコマンドを実行します。\n\n            docker-compose down -v\n\n            コンテナの停止と削除、それからネットワーク設定とボリュームの削除が行われます。\n          \n          \n            さいごに\n\n            \n              INTER-MediatorのDockerイメージの作成についての説明は以上になります。\n              さてこうして作成したDockerイメージはどこで使えるのでしょうか？\n              以下の様な使い方ができます。\n            \n\n            \n              \n              \n              \n              \n              \n              \n              \n              \n              \n            手元でデモ環境として起動する。他の人にINTER-Mediatorを手軽に体験してもらうためにDockerHubに登録しておく作成したDockerイメージを本番用Linuxサーバー上で起動して使うAWSのElasticBeanstalk上で起動する。AWSのElasticContainerService上で起動する。HerokuというPaaSサービス上で起動する。ArukasというDocker専用のPaaSサービス上で起動する。Microsoft Azure上でDockerを起動する。Google Cloud Platform上でDockerを起動する。\n\n            \n              他にも、開発環境やテスト環境として利用することも可能です。INTER-Mediatorの開発ではCIでDockerを使っているそうです。\n              手軽にINTER-Mediatorを動かす環境としてDockerを是非活用してください。\n            \n          \n        "
}, {
    "id": 18,
    "parent": "/ja/for-developers/",
    "path": "/ja/for-developers/db.html",
    "title": "データベース特有の設定",
    "breadcrumb": "データベース特有の設定",
    "body": "\n            \n                FileMaker Server\n                FileMakerは、テーブル、TO、レイアウトといったオブジェクトを利用する。Web共有からテーブルを直接指定はできない。また、TOも指定できない。指定できるのはレイアウトのみである。レイアウトが事実上のテーブルに相当するエンティティとなる。したがって、定義ファイルのnameキー、viewキー、tableキーには、レイアウト名を指定する。たまたま、同じ名前のテーブルやTOがあっても、FileMakerのWebアクセス時に実際に利用するのはその名前のレイアウトである。\n\n                フィールドのタイプで、日時の記録用に「日付」「時刻」「タイムスタンプ」の3つがある。Web経由では、「月/日/年 時:分:秒」のフォーマットにしなければならない。また、日付フィールドに時刻を含む文字列を入力したり、時刻フィールドに日付を含む文字列を入力すると、エラーになり処理は何もなされない。その「日付等の書式エラー」の番号が500なので、余計なことを考えてしまいそうだが、この500はFileMakerが規定したエラー番号である。\n\n                データベース側の設定\n                FileMaker Serverでは、INTER-MediatorからはFileMaker ServerのXML Web公開機能を使用しているため、XML Web公開でのアクセスを許可する必要があります。INTER-Mediatorが使用するアカウントを用意し、XML Web公開でのアクセスを許可するようにしてください（拡張アクセス権のキーワードは「fmxml」）。\n\n                Windows版FileMaker Serverにおける注意点\n                Windows版FileMaker Server（バージョン13、14、15）ではmbstring拡張モジュールが標準で有効になっていません。FileMaker Serverフォルダ内のWeb Publishing > publishing engine > phpフォルダ以下にある「php.ini」ファイルにおいて「;extension=php_mbstring.dll」を「extension=php_mbstring.dll」に変更した上でIISの再起動を行い、mbstring拡張モジュールを有効にする必要があります。\n\n                定義ファイルに記述するテーブル名\n                FileMaker Serverでは、定義ファイルに記述するテーブル名（nameキーの値）は、FileMakerデータベースのレイアウト名を指定する必要があります。\n\n                各コンテキストにはレイアウトが必要\n                FileMaker Serverでは、カスタムWeb公開機能の仕様上、各テーブル／コンテキストごとにレイアウトを用意して、表示や更新に必要なフィールドを各レイアウト上に配置する必要があります。\n\n                主キーを省略できる場合\n                リレーションを設定していない場合、テーブル内の主キーや定義ファイルでの主キーの指定（keyキー）は不要です。リレーションを設定している場合、下記で説明するポータルアクセスモードを有効にすることで主キーの指定を省略できる場合があります。\n\n                ポータルアクセスモード\n                関連テーブルのデータをレイアウト上にあるポータルから取得する場合、定義ファイルでrelationキーの下位キーでportalキーの値をtrueとすることで、ポータルアクセスモードを利用できます。ポータルアクセスモードを利用することで、関連テーブル用の別レイアウトを作成する必要がなくなり、動作が若干高速化されます。\n\n                定義ファイルでは、relationキーのあるコンテキストのnameキーにテーブルオカレンス名（リレーションシップグラフで確認できる名称）を、viewキーにはポータルがあるレイアウト名を指定します。ページファイルでフィールドを指定する際には、「(nameキーの値)@(nameキーの値)::(フィールド名)」という形式で記述する必要があります。\n\n                なお、FileMaker Server 11およびそれ以前の場合には、FileMakerデータベースのレイアウト上において、ポータル内に関連テーブルの主キーフィールドを配置する必要があります。\n\n                未サポートの機能\n                以下の機能は、現在のバージョンでは未サポートです。\n                \n                    \n                繰り返しフィールド\n\n            \n\n            \n\n                PostgreSQL\n\n                PostgreSQLのサンプルを動かすためのデータベースのスキーマファイルは、INTER-Mediatorのレポジトリでは、\n                dist-docs/sample_schema_pgsql.txt\n                というファイルにあります。冒頭にコマンド例がありますが、PostgreSQLがどのOSのどのディストリビューションで動いているかによって、いろいろ違いがあると思います。例えばOS X Serverの場合：PostgreSQLの稼働ユーザはpostgresではなく、_postgresです。-Uの引数を_postgresにします。\n                INTER-Mediatorとの絡みについては、MySQLとほとんど同じなのですが、1点違いがあります。PostgreSQLでは、主キーフィールドにシリアル値を入力する方法として、SEQUENCEオブジェクトを利用する方法と、SERIAL型を利用する方法があります。どちらの方法も、原則として、定義ファイルのIM_Entry関数の第1引数にあるコンテキストに、'sequence' => 'xxxx' として、SEQUENCEオブジェクトを指定する必要があります。\n\n                sequenceキーに対する値がない場合の問題は、ページネーションコントロールを表示して1レコードずつ表示しているとき、「レコード追加」ボタンをクリックしてレコードを作成した場合、新たに作られたレコードが現在のレコードになっておらず、レコードの移動をしないといけません。他は問題ないのですが、これだけの問題ではありますが、使い勝手が変わるので注意が必要です。なお、検索して参照するだけなら、sequenceキーの指定はなくてもいいのかもしれません。\n\n                SEQUENCEオブジェクトを使用する場合\n                SEQUENCEオブジェクトを使用する場合、スキーマは以下のようになると思います。SCHEMAはim_sample、アクセスユーザはwebを想定しています。テーブルとシーケンスの両方のオブジェクトにアクセス権を与えるのを忘れないようにしましょう。\n\n                CREATE SEQUENCE serial START 1000;\nCREATE TABLE person (\n    id INTEGER DEFAULT nextval('serial'),\n    :\n}\nGRANT ALL PRIVILEGES ON im_sample.serial TO web;\nGRANT ALL PRIVILEGES ON im_sample.person TO web;\n                \n\n                そして、定義ファイルでは、次のように、sequeceキーで、シーケンスオブジェクトの名前を指定します。\n\n                \n                    array(\n    'records' => 1,\n    'paging' => true,\n    'name' => 'person',\n    'view' => 'im_sample.person',\n    'table' => 'im_sample.person',\n    'key' => 'id',\n    'repeat-control' => 'insert delete',\n    'sequence' => 'im_sample.serial',\n),\n                \n\n                SERIAL型を利用する場合\n                SERIAL型を利用する場合、以下のように、主キーフィールドの型をSERIALにすると思われます。このとき、背後では、「テーブル名_フィールド名_seq」というシーケンスオブジェクトが自動的に作られて、初期値が1になっています。自動的に作られるオブジェクトとは言え、アクセス権の設定は記述する必要があるのが一般的でしょうから、im_sample.person_id_seqに対してwebアカウントのアクセス権も設定しなければなりません。\n\n                \n                    CREATE TABLE person (\n    id SERIAL PRIMARY KEY,\n}\nGRANT ALL PRIVILEGES ON im_sample.serial TO web;\nGRANT ALL PRIVILEGES ON im_sample.person_id_seq TO web;\n                \n\n                SERIAL型を使った場合、INSERTでレコードを新規に作るときに、ここでのidフィールドへの値を代入はしないようにします。もし、自分で値を設定したい場合は、シーケンスの値と当たらないようにしないといけませんが、そこまでの状況でSERIAL型を使う事はほぼないと思われます。\n\n                そして、定義ファイルでは、このときも、次のように、sequeceキーで、シーケンスオブジェクトの名前を指定します。これをしないと、1レコード表示時に新規レコードを作成しても、新規レコードが編集状態で開いてくれません。\n\n                \n                    array(\n    'records' => 1,\n    'paging' => true,\n    'name' => 'person',\n    'view' => 'im_sample.person',\n    'table' => 'im_sample.person',\n    'key' => 'id',\n    'repeat-control' => 'insert delete',\n    'sequence' => 'im_sample.person_id_seq',\n),\n                \n\n            \n\n        "
}, {
    "id": 19,
    "parent": "/ja/for-developers/",
    "path": "/ja/for-developers/exp.html",
    "title": "計算式",
    "breadcrumb": "計算式",
    "body": "\n            \n定義ファイルのコンテキスト中に、calculationキーで指定する計算式の規則をこのページで紹介します。計算式自体はさらに配列中のexpressionキーの文字列で指定します。\n以下の演算子や関数を使い、フィールド名や「コンテキスト名@フィールド名」の形式で別のデータを参照できます。ただし、calculationキーがあるコンテキストでは、keyキーによる主キーの指定が必要です。また、文字列はシングルクォーテーションによる囲みのみです。ダブルクォートは利用できません。言い換えれば、expressionキーに対応する文字列は \"\" で囲い、式の中の文字列リテラルはシングルクォートを利用します。\n            \n\n            \n                項\n                \n                    \n                    \n                        \n                        \n                        \n                        \n                        \n                    \n                            種類\n                            例\n                            説明\n                        \n                            数値リテラル\n                            10.3\n                            \n                        \n                            文字列リテラル\n                            'abc'\n                            シングルクォートでの囲みのみ。シングルクォートは\\で要エスケープ\n                        \n                            定数\n                            PI\n                            EとPIが定義されている\n                        \n                            ターゲット指定\n                            person@住所\n                            展開されている対応するノードを参照。同一のコンテキスト内ならフィールド名のみ\n                        \n                \n\n            \n\n            \n\n                定数\n                \n                    \n                    \n                        \n                        \n                        \n                    \n                            定数\n                            対応するJavaScript\n                            解説\n                        \n                            E\n                            Math.E\n                            エクスポーネンシャル\n                        \n                            PI\n                            Math.PI\n                            円周率\n                        \n                \n\n            \n\n            \n\n                演算子\n                \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                    \n                            対象データ\n                            演算子\n                            記述例\n                            解説\n                        \n                            数値\n                            ^\n                            2^3 → 8\n                            べき乗\n                        \n                            \n                            +\n                            2+3 → 5\n                            加算\n                        \n                            \n                            -\n                            3-2 → 1\n                            減算（あるいは負の数）\n                        \n                            \n                            *\n                            3*2 → 6\n                            乗算\n                        \n                            \n                            /\n                            3/2 → 1.5\n                            除算\n                        \n                            \n                            %\n                            3%2 → 1\n                            剰余\n                        \n                            文字\n                            +\n                            'a'+'b' → 'ab'\n                            結合\n                        \n                            \n                            ⊕\n                            3⊕5 → '35'\n                            結合（文字列として）\n                        \n                            \n                            -\n                            'abc'-'c' → 'ab'\n                            除去\n                        \n                            \n                            ∩\n                            'abcdef' ∩ 'bdfx' → 'bdf'\n                            共通の文字\n                        \n                            \n                            ∪\n                            'abcdef' ∪ 'bdfx' → 'abcdefx'\n                            両方の文字\n                        \n                            \n                            ⊁\n                            'abcdef' ⊁ 'bdfx' → 'ace'\n                            文字の除去\n                        \n                            論理演算\n                            =\n                            10=9 → false\n                            等号\n                        \n                            \n                            ==\n                            10==9 → false\n                            等号\n                        \n                            \n                            !=\n                            10!=9 → true\n                            不等号\n                        \n                            \n                            \n                                <>\n                            \n                            10\n                                <>9 → true\n                            不等号\n                        \n                            \n                            >\n                            10>9 → true\n                            より大\n                        \n                            \n                            \n                                <\n                                    10\n                                        <9 → false\n                                            より小\n                        \n                            \n                            >=\n                            10>=9 → true\n                            以上\n                        \n                            \n                            \n                                <=\n                                    10\n                                        <=9 → false\n                                            以下\n                        \n                            \n                            ==\n                            10==9 → false\n                            等号\n                        \n                            \n                            ==\n                            10==9 → false\n                            等号\n                        \n                            \n                            &&\n                            true && false → false\n                            論理積\n                        \n                            \n                            ||\n                            true || false → true\n                            論理和\n                        \n                            文字リスト\n                            ⋀\n                            'abc¶dff¶ghi' ⋀ 'dff¶stu¶' → 'dff¶'\n                            共通項\n                        \n                            \n                            ⋁\n                            'abc¶dff¶ghi' ⋁ 'xyz¶stu¶' → 'abc¶dff¶ghi¶xyz¶stu¶'\n                            合同\n                        \n                            \n                            ⊬\n                            'abc¶dff¶ghi' ⊬ 'ghi¶dkg¶' → 'abc¶dff¶'\n                            差演算\n                        \n                \n                加算について\n                \n                    \n                    \n                2つの項がいずれも数値なら、数値として計算します。2つの項がいずれかでも数値に変換できないか文字列なら、文字列として計算します。\n                減算について\n                \n  \t\t\t   \n                    \n\t\t    2つの項がいずれも数値なら、数値として計算します。2つの項がいずれかでも数値に変換できないか文字列なら、文字列として計算します。\n                文字リストの改行の扱いについて\n                \n                    \n                    \n                    \n                    \n                引数の最後に改行があってもなくてもかまいません。結果の最後には改行が付きます。最後の改行の扱いも含めて、長さが0の項目は項目として扱わず無視します。3種類ある改行のどれも同じように扱いますが、結果の改行は最初の引数の最初に出てくる改行になります。\n\n            \n\n            \n\n                関数\n                数値、集計、判断、文字列\n                \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                    \n                            種類\n                            関数\n                            例（数値は丸めています）\n                            説明\n                        \n                            数値\n                            abs(x)\n                            abs(-3.1) → 3.1\n                            絶対値\n                        \n                            \n                            ceil(x)\n                            ceil(-3.1) → -3\n                            引数よりも大きな整数のうちの最小値\n                        \n                            \n                            floor(x)\n                            floor(-3.1) → -4\n                            引数よりも小さな整数のうちの最大値\n                        \n                            \n                            round(x,y)\n                            round(3.1415, 2) → 3.14\n                            1つ目の引数を四捨五入、2つ目の引数は少数以下の桁数で、正の数なら10の位から上位に上がる\n                        \n                            \n                            format(x,y)\n                            format(x,y)\n                            format(12345, 0) → 12,345\n                        \n                            \n                            sqrt(x)\n                            sqrt(3) → 1.73\n                            平方根\n                        \n                            \n                            exp(x)\n                            exp(0.5) → 1.65\n                            ネイピア数eのx乗\n                        \n                            \n                            log(x)\n                            log(0.5) → -0.69\n                            ネイピア数を底とする自然対数\n                        \n                            \n                            random()\n                            random() → 0.254\n                            0〜1の範囲の乱数\n                        \n                            \n                            pow(x, y)\n                            pow(2,3) → 8\n                            べき乗、xのy乗\n                        \n                            \n                            fac(x)\n                            fac(5) → 120\n                            累乗、x!の値\n                        \n                            \n                            pyt(x)\n                            pyt(3,4) → 5\n                            x^2+y^2の平方根\n                        \n                            集計\n                            sum(x,...)\n                            sum(1,2,3,4,5) → 15\n                            合計。引数は可変\n                        \n                            \n                            min(x,...)\n                            min(3,1,2,1,5,1) → 1\n                            引数の最小値。引数は可変\n                        \n                            \n                            max(x,...)\n                            max(3,1,2,1,5,1) → 5\n                            引数の最大値。引数は可変\n                        \n                            判断\n                            if(x,y,z)\n                            if(10 >= 1,'b','c') → 'b'\n                            最初の引数の結果がtrueなら2番目、falseなr3番目を返す\n                        \n                            \n                            choice(x, a1, a2, ..., an)\n                            choice(2,'a','b','c','d','e') → 'c'\n                            最初の引数の結果が0以上なら引数のいずれかを返す。0なら1番目の引数の値、1なら2番目の引数の値、....nなら(n+1)番目の引数の値を返す。最初の引数が範囲0〜nを越えるとundefinedを返す。最初の引数がnullあるいはundefinedなら、それぞれnullあるいはundefinedを返す\n                        \n                            \n                            condition(x1, a1, x2, a2, ..., xn, an)\n                            condition(3>10, 'a', 13>10, 'b', 23>10, 'c') → 'b'\n                            奇数番目の引数の値を1番目から調べて、最初にtrueになった引数の次の引数を返す。奇数番目の引数にtrueのものがないとundefinedを返す\n                        \n                            \n                            accumulate(x1, a1, x2, a2, ..., xn, an)\n                            accumulate(3>10, 'a', 13>10, 'b'', 23>10, 'c') → 'b¶c¶'\n                            奇数番目の引数の値を1番目から調べ、すべてのtrueになる奇数番目の引数に対し、その次の引数をLF(0x10)を改行とした文字列リストの形式で返す。奇数番目にtrueのものがない場合には''を返す。\n                        \n                            文字列\n                            length()\n                            length('test') → 4\n                            引数の文字列の長さを求める。nullが引数なら0を返す\n                        \n                            \n                            substr(x,y,z)\n                            substr('abcdefg', 3, 2) → 'de'\n                            xの文字列に対して、x番目からy文字分のみを取り出す。最初の文字は0\n                        \n                            \n                            substring(x,y,z)\n                            substring('abcdefg', 3, 5) → 'de'\n                            xの文字列に対して、x番目からy文字目までを取り出す\n                        \n                            \n                            indexof(x, y, fr)\n                            indexof('abcdefg','cd') → 2\n                            xの文字列の最初からyの文字列を探し、最初に見つかった場所を返す。引数frを指定するとその文字以降を探すが、省略すると最初から。JavaScriptのString.indexOfを利用\n                        \n                            \n                            lastindexof(x,y)\n                            indexof('abcdefg','cd') → 2\n                            xの文字列の最後からyの文字列を探し、最初に見つかった場所を返す。引数frを指定するとその文字以降を探すが、省略すると最初から。JavaScriptのString.lastIndexOfを利用\n                        \n                            \n                            replace(x,y,z,w)\n                            replace('abcdefgabc', 5, 8, 'yz') → 'abcdeyzbc'\n                            xの文字列のy番目からz文字分を、文字列wに置き換える\n                        \n                            \n                            substitute(x,y,z)\n                            substitute('abcdefgabc', 'bc', 'yz') → 'ayzdefgayz'\n                            xの文字列内にあるすべての文字列yを文字列zに置き換える\n                        \n                            正規表現\n                            test(str, reg)\n                            test('123a456', '[^0-9]') →true\n                            文字列strに対して、文字列regで表現した正規表現の検査を行い、マッチすればtrueを返す\n                        \n                            \n                            match(str, reg)\n                            match('123a456', '[0-9]([^0-9])([0-9]') →['3a4', 'a', '4']\n                            文字列strに対して、文字列regで表現した正規表現の検索を行う。マッチすれば配列を返す。要素0は正規表現に対する最後にマッチングした文字列、要素1以降は、( ) の部分に対応する文字列\n                        \n                            文字リスト\n                            items(x,y,z)\n                            items(x,0,1) →'abc¶'\n                            文字列リストxに対して、y番目からz項目分を文字列リストとして取り出す\n                        \n                            \n                            itemIndexOf(x,y)\n                            items(x,'abc') →0\n                            文字列リストxに対して、yの文字列が何番目の項目かを求めて返す。見つからない場合は、-1を返す。空行の連続では '' が要素として存在するものとして判定する\n                        \n                            三角関数\n                            sin(x)\n                            sin(PI/4) → 0.71\n                            \n                        \n                            \n                            cos(x)\n                            cos(PI/4) → 0.71\n                            \n                        \n                            \n                            tan(x)\n                            tan(PI/4) → 1\n                            \n                        \n                            \n                            tan2(x,y)\n                            atan2(0.5, 0.5) → PI/4\n                            \n                        \n                            \n                            asin(x)\n                            asin(0.71) → PI/4\n                            \n                        \n                            \n                            acos(x)\n                            acos(0.71) → PI/4\n                            \n                        \n                            \n                            atan(x)\n                            atan(1) → PI/4\n                            \n                        \n                \n                文字のカウントについて\n                \n                    \n                最初の文字、最初の項目は0です。\n\n                日付時刻の関数\n                日付時刻の関数は、Ver.4.6での対応を目指し、Ver.4.5以降で実装します。現在、実装中であり、一部の関数しか使えません。\n                \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                    \n                            関数\n                            例\n                            説明\n                        \n                            date(str)\n                            date('2014-02-18') → \n                            引数に指定した文字列の日付に対応する整数を返す。数値は1970/1/1からの日数。引数をそのままJavaScriptのDateクラスで処理をする\n                        \n                            datetimestr)\n                            datetime('2014-02-17 09:00:01') → \n                            引数に指定した文字列の日時に対応する整数を返す。数値は1970/1/1からの秒数。引数をそのままJavaScriptのDateクラスで処理をする\n                        \n                            datecomponents(y,m,d)\n                            datecomponents(2014,2,17) → \n                            引数に、年月日を指定して、その日付に対応する整数を返す。数値は1970/1/1からの日数\n                        \n                            datetimecomponents(y,m,d,h,i,s)\n                            datetimecomponents(2014,2,17,9,0,0) → \n                            引数に、年月日時分秒を指定して、その日時に対応する整数を返す。数値は1970/1/1からの秒数\n                        \n                            today()\n                            today() → \n                            今現在の日付を指定する整数を返す。数値は1970/1/1からの日数\n                        \n                            now()\n                            now() → \n                            今現在の日時を指定する整数を返す。数値は1970/1/1からの秒数\n                        \n                            year(x)\n                            year(datetime('2014-02-17')) → 2014\n                            日付ないしは日時から年を求める\n                        \n                            month(x)\n                            month(datetime('2014-02-17')) → 2 2014\n                            日付ないしは日時から月を求める\n                        \n                            day(x)\n                            day(datetime('2014-02-17')) → 17 2014\n                            日付ないしは日時から日を求める\n                        \n                            weekday(d)\n                            weekdaydt(datetime('2014-02-17 09:23:49') → 17\n                            日付ないしは日時からから曜日を求める\n                        \n                            hour(x)\n                            hour(datetime('2014-02-17 09:23:49') → 9 2014\n                            日付ないしは日時から時を求める\n                        \n                            minute(x)\n                            minute(datetime('2014-02-17 09:23:49') → 23 2014\n                            日付ないしは日時から分を求める\n                        \n                            second(x)\n                            second(datetime('2014-02-17 09:23:49') → 49 2014\n                            日付ないしは日時から秒を求める\n                        \n                            yeardt(d)\n                            yeardt(datetime('2014-02-17')) → 2014 2014\n                            日時から年を求める\n                        \n                            monthdt(d)\n                            monthdt(datetime('2014-02-17')) → 2\n                            日時から月を求める\n                        \n                            daydt(d)\n                            daydt(datetime('2014-02-17')) → 17\n                            日時から日を求める\n                        \n                            weekdaydt(d)\n                            weekdaydt(datetime('2014-02-17 09:23:49') → 17\n                            日時から曜日を求める\n                        \n                            hourdt(d)\n                            hourdt(datetime('2014-02-17 09:23:49') → 9\n                            日時から時を求める\n                        \n                            minutedt(d)\n                            minutedt(datetime('2014-02-17 09:23:49') → 23\n                            日時から分を求める\n                        \n                            seconddt(d)\n                            seconddt(datetime('2014-02-17 09:23:49') → 49\n                            日時から秒を求める\n                        \n                            yeard(d)\n                            yeard(date('2014-02-17')) → 2014\n                            日付から年を求める\n                        \n                            monthd(d)\n                            monthd(date('2014-02-17') → 2\n                            日付から月を求める\n                        \n                            dayd(d)\n                            dayd(date('2014-02-17') → 17\n                            日付から日を求める\n                        \n                            weekdayd(d)\n                            weekdayd(date('2014-02-17') → 17\n                            日付から曜日を求める\n                        \n                            addyear(d, x)\n                            addyear(datetime('2014-02-17 09:23:49'), 2) → 49\n                            日付ないしは日時に指定した年を加える\n                        \n                            addmonth(d, x)\n                            addmonth(datetime('2014-02-17 09:23:49'), 2) → 49\n                            日付ないしは日時に指定した月を加える\n                        \n                            addday(d, x)\n                            addday(datetime('2014-02-17 09:23:49'), 2) → 49\n                            日付ないしは日時に指定した日を加える\n                        \n                            addhour(d, x)\n                            addhour(datetime('2014-02-17 09:23:49'), 2) → 49\n                            日付ないしは日時に指定した時を加える\n                        \n                            addminute(d, x)\n                            addminute(datetime('2014-02-17 09:23:49'), 2) → 49\n                            日付ないしは日時に指定した分を加える\n                        \n                            addsecond(d, x)\n                            addsecond(datetime('2014-02-17 09:23:49'), 2) → 49\n                            日付ないしは日時に指定した秒を加える\n                        \n                            endofmonth(d)\n                            endofmonth(datetime('2014-02-17 09:23:49') → 49\n                            日付ないしは日時の月の最終日を求める\n                        \n                            startofmonth(d)\n                            startofmonth(datetime('2014-02-17 09:23:49') → 49\n                            日付ないしは日時の月の最初の日を求める\n                        \n                            addyeardt(d, x)\n                            addyeardt(datetime('2014-02-17 09:23:49'), 2) → 49\n                            日時に指定した年を加える\n                        \n                            addmonthdt(d, x)\n                            addmonthdt(datetime('2014-02-17 09:23:49'), 2) → 49\n                            日時に指定した月を加える\n                        \n                            adddaydt(d, x)\n                            adddaydt(datetime('2014-02-17 09:23:49'), 2) → 49\n                            日時に指定した日を加える\n                        \n                            addhourdt(d, x)\n                            addhourdt(datetime('2014-02-17 09:23:49'), 2) → 49\n                            日時に指定した時を加える\n                        \n                            addminutedt(d, x)\n                            addminutedt(datetime('2014-02-17 09:23:49'), 2) → 49\n                            日時に指定した分を加える\n                        \n                            addseconddt(d, x)\n                            addseconddt(datetime('2014-02-17 09:23:49'), 2) → 49\n                            日時に指定した秒を加える\n                        \n                            endofmonthdt(d)\n                            endofmonthdt(datetime('2014-02-17 09:23:49') → 49\n                            日時の月の最終日を求める\n                        \n                            startofmonthdt(d)\n                            startofmonthdt(datetime('2014-02-17 09:23:49') → 49\n                            日時の月の最初の日を求める\n                        \n                            addyeard(d, x)\n                            addyeard(datetime('2014-02-17 09:23:49'), 2) → 49\n                            日付に指定した年を加える\n                        \n                            addmonthd(d, x)\n                            addmonthd(datetime('2014-02-17 09:23:49'), 2) → 49\n                            日付に指定した月を加える\n                        \n                            adddayd(d, x)\n                            adddayd(datetime('2014-02-17 09:23:49'), 2) → 49\n                            日付に指定した日を加える\n                        \n                            endofmonthd(d)\n                            endofmonthd(datetime('2014-02-17 09:23:49') → 49\n                            日付の月の最終日を求める\n                        \n                            startofmonthd(d)\n                            startofmonthd(datetime('2014-02-17 09:23:49') → 49\n                            日付の月の最初の日を求める\n                        \n                \n            \n        "
}, {
    "id": 20,
    "parent": "/ja/for-developers/",
    "path": "/ja/for-developers/sendmail.html",
    "title": "メール送信",
    "breadcrumb": "メール送信",
    "body": "\n            \n                はじめに\n                メールはサーバーで送ります。送信方法は、PHPのmail関数を使う方法なので、UNIX系ならsendmailコマンドをたたく方法になります。一方、これだとSMTPサーバーへの転送ができないので、qdsmtpも組み込みました（Thanks to Mr. Spok）。SMTP認証はPlainのみの対応となっています。Windowsの場合はmail関数がすでにSMTPですので、php.iniにサーバー情報などを書くことで対処できます。なお、Windows環境はチェックしていないので、何かあれば知らせてもらえると助かります。\n\n                ただ、これだけではだめだろうというのはご存知の方はお分かりかと思いますが、昔作っていたOMEというメールソフトにはPHPのクラスもあったので、それをUTF-8で動くように改造してエンコードなどをさせるようにしました。ちなみに、さらにその前に『メール送信システムの作り方大全』という書籍も書いていて、その中の一部のクラスを使いやすいようにしたのがOME.phpです。この本、もう10年以上前なのですね…。\n\n                定義ファイルに指定可能なキーワードは以下の通り全て列挙します。しかしながら、すべてを記述することはないです。\n                \n                    IM_Entry(\n        array(   // Contexts\n            array(\n                'name' => 'request',\n                'send-mail' => array(\n                    'new' => array(\n                        'from' => '',\n                       'to' => 'email',\n                        'cc' => '',\n                        'bcc' => '',\n                        'subject' => '',\n                        'body' => '',\n                       'from-constant' => 'Officer <info@msyk.net>',\n                        'to-constant' => 'msyk@me.com',\n                       'cc-constant' => 'businessmatching@cocoa-study.com',\n                        'bcc-constant' => '',\n                       'subject-constant' => 'Cocoa勉強会ビジネスマッチング申し込み',\n                        'body-constant' => 'テストメール',\n                       'body-template' => 'welcome.txt',\n                       'body-fields' => 'name,compnay,email,tel',\n                       'f-option' => true,\n                        'body-wrap' => 68,\n                    )\n                )\n             )\n        ),\n        array(   // Options\n            'formatter' => array(...),\n            'smtp' => array(\n                'server' => 'mysmtp.msyk.net',\n                'port' => 587,\n              　　　'username' => 'msyktest@msyk.net',\n                'password' => 'oshienai',\n            )\n        ),\n        array('db-class' => 'PDO'),\n        false\n    );\n                \n\n            \n\n            \n                メールを送信するタイミングの指定\n                'send-mail'キーの配列の次のレベルのキーとして、'load' 'edit' 'new'のいずれかを指定できます。それぞれ、データベースからの読み込み時、更新時、新規レコード作成時を意味し、コンテキストに対するそれぞれのタイミングでメールを送信します。いずれも、データベース処理が終了してからメールの送信にかかります。上記の例では、新規レコード作成時に、メールが送信されます。\n            \n\n            \n                宛先や送信者の指定\n                宛先の指定は、'to'ないしは'to-constant'キーに指定します。もし、宛先が一定のものであれば、'to-constant'キーに指定をしてください。'to'キーにはフィールド名を指定します。データベース処理の結果、たとえば新規レコードの場合には新しいレコードが1つ作成されて、そのレコードの内容から'to'キーに指定したフィールドより宛先のデータが取り出されます。編集も原則は1レコードです。一方、読み出しの場合は1レコードにならないかもしれませんが、その場合は最初のレコードから取り出します。むしろ、1レコードに絞り込むコンテキストにするのがメールを送る場合には妥当だと考えられます。\n\n                メールアドレスは「名前 <アドレス>」ないしは「アドレス」の2つの形式のみのサポートになります。'to-constant'キーに対する値、あるいは'to'キーで指定されるフィールドの値は、このどちらかの形式にしてください。\n\n                cc、bccについてもまったく同様のルールです。'to'と'to-constant'の両方の指定があれば、'to-constant'が優先されます。cc、bccでも-constantが優先となります。\n\n                fromについても、fromとfrom-constantキーがあり、設定や動作等は同じです。ただし、UNIXでSMTPサーバーを使わない場合だと、通常はソース側のFrom:は無視されて、UNIXアカウントそのものをFrom:として設定してしまいます。ただし、サーバー側で許可されていれば「'f-option' => true」の指定を定義ファイル内に記述することで、sendmailコマンドの-fパラメータを指定して、送信者の指定が可能です。\n            \n\n            \n                件名と本文の指定\n                件名は、subjectあるいはsubject-constantのいずれかのキーに指定します。toなどと同じルールです。\n\n                メールの本文は、定義ファイル内に指定した通りに送信する'body-constant'、フィールドの内容をそのまま送信する'body'に加えて、テンプレートの処理も可能です。優先順はテンプレート、body-constant、bodyの順になりますので、不要なフィールドは消しておきましょう。\n\n                テンプレート処理をするには、テンプレートのファイル名をbody-templateキーに指定します。このとき、テンプレートのファイルは、定義ファイルのあるディレクトリを基準に検索します。つまり、定義ファイルといっしょに何らかのテキストファイルを億としたら、body-templateキーの値はファイル名だけでかまいません。\n\n                テンプレートのファイル内では、そのファイルの内容を本文にしますが、フィールドの値との置き換えも可能です。置き換えたい箇所に@@1@@、@@2@@のように、アットマーク2つに囲まれた1から始まる整数を指定します。テンプレートのファイルはUTF-8で保存します。\n\n                フィールドについては、'body-fields'キーに、半角のカンマで区切って指定します。最初が1で、順次番号が増えるようになります。例で言えば、emailフィールドの値は、テンプレート内の@@3@@と置き換わって表示されます。'body-fields'キーを省略すると、テンプレートのファイル通りにメールが送信されます。\n\n                本文は一定の長さで改行を入れます。既定値では72バイトですが、'body-wrap'キーで異なる値にできます。0に設定すると改行しません。ここで、バイト数ですが、実際のバイト数ではなく、日本語は2バイト、英語は1バイトと数えた結果で示しています。実際のエンコードはUTF-8なので、嘘と言えば嘘のカウントになりますが、おそらくこうして指定をすることに慣れている人が多いので、ここでは実態とは関係ない数値ではありますけども実用的という意味で「2バイトルール」でカウントしたものとします。\n\n            \n\n            \n\n                UNIXの場合のSMTPサーバーの指定\n                定義ファイルのIM_Entry関数の第3引数のオプション領域に'smtp'キーで配列を指定します。その他のキーは、前記の例の通りで、キーを見れば意味は分かると思います。もし、SMTP認証をしない場合は、serverとportだけを指定します。認証する場合は、server, port, username, passwordを指定します。したがって、2つないしは4つの要素があるかのどちらかになります。\n\n                SMTPサーバーの指定は、params.phpファイルでも指定が可能です。変数名として、$sendMailSMTPの定義し、値は'smtp'の右側の配列と同様に指定をします。params.phpファイルでの指定よりも、定義ファイルの指定が優先されます。どこにもSMTPサーバーの設定がない場合には、mail関数での送信になります。\n\n                Windowsの場合は、'smtp'の指定やparams.phpファイルでの指定は一般には不要ですが、もし設定すれば、mail関数ではなく、qdsmtpによるメール送信ができます。\n\n            \n\n            \n\n                送信されるメールの文字セット\n                基本的にはメールはUTF-8でエンコードして送られます。ISO-2022-JPの指定はOME.phpではできるのですが、必要なら定義ファイルでの指定ができるようにしようと思います。リクエストがなければUTF-8固定で行きます。\n\n                ヘッダについては、base64のインラインエンコードを、ASCIIコード以外の文字について行います。本文はそのままですが、ヘッダのContent-TyleのcharsetにUTF-8という文字を付けます。つまり、本文はbase64等でのエンコードは行いません。\n\n                ファイルの添付は実装する予定はありません。ファイルを送りたいのなら、そのリンクを送るようなアプリケーションの動作にしましょう。\n\n            \n\n        "
}, {
    "id": 21,
    "parent": "/ja/for-developers/",
    "path": "/ja/for-developers/auth.html",
    "title": "ユーザー認証とアクセス権",
    "breadcrumb": "ユーザー認証とアクセス権",
    "body": "\n            \n            ユーザ認証とアクセス権の設定をサポートします。INTER-Mediator自身がデータベースを利用して、ユーザーやグループを管理する手法を「ビルトイン認証」、データベースエンジン側に登録したユーザーを利用する認証を「ネイティブ認証」、LDAPサーバのユーザーを利用した認証を「LDAP認証」と呼びます。\n\n            認証動作に必要なテーブル\n            チャレンジ等を記録するテーブル\n            ユーザ認証ではセキュリティを高めるために、サーバーからクライアントに「チャレンジ」を送り、その値を利用して認証情報を作ります。そのため、サーバー側にチャレンジを残しておく必要があり、テーブルの定義が必要です。そのテーブルは、IM_Entryの第3引数あるいはparams.phpで指定したユーザで読み書きの権限が必要です。チャレンジのテーブル名は、IM_Entryの第2引数で指定するか、あるいは既定値の名前（issuedhash）のテーブルを作成します。テーブルには以下のフィールドが必要です。\n            チャレンジのテーブルに必要なフィールド\n                \n                    \n                    \n                    \n                    \n                    \n                フィールド名\n                    型の例\n                    説明\n                user_id\n                        INT,\n                        ユーザテーブルのキーフィールドとなるid値（ユーザをデータベース内のテーブルで管理する場合に利用）\n                    username\n                        VARCHAR(48),\n                        ユーザテーブルのキーフィールドとなるid値（ユーザをデータベースエンジンが提供するもので運用する場合に利用）\n                    clienthost\n                        VARCHAR(48),\n                        クライアントを識別するもの。Ver.1.0.5の実装では、クライアントのIPアドレスのみを記録している\n                    hash\n                        VARCHAR(48),\n                        チャレンジに使うハッシュ値。実際には24バイトの16進数文字列。\n                    expired\n                        DateTime,\n                        チャレンジの有効期限を示すタイムスタンプ値\n                    \n            \n            なお、このテーブルへの検索では、user_idとclienthostあるいはusernameとclienthostの2つのフィールドに対してAND演算での検索条件が与えられます。従って、高速化するためには、この2つのフィールドを合成したインデックスを作っておくなどの措置をとる事ができます。\n            ユーザーのテーブル\n            認証のためのユーザは、データベース内にテーブルを作成する方法と、データベースエンジンが管理するユーザによる方法を利用できます。データベース内にテーブルを作る場合、そのテーブルは、IM_Entryの第3引数あるいはparams.phpで指定したユーザで少なくとも読み出しの権限が必要です。チャレンジのテーブル名は、IM_Entryの第2引数で指定するか、あるいは既定値の名前（authuser）のテーブルを作成します。テーブルには以下のフィールドが必要です。\n            ユーザテーブルに必要なフィールド\n                \n                    \n                    \n                    \n                    \n                    \n                フィールド名\n                    型の例\n                    説明\n                id\n                        INT AUTO_INCREMENT,\n                        連番の数値を入れて、キーフィールドとする\n                    username\n                        VARCHAR(48)\n                        ユーザ名（特に制限はないが、重複した名前が定義されないようにするのが望ましい）\n                    hashedpasswd\n                        VARCHAR(48)\n                        パスワードのハッシュ値\n                    email\n                        VARCHAR(48),\n                        電子メールアドレス。ユーザー名の代わりに使用したり、パスワードのリセットで利用\n                    limitdt\n                        DateTime\n                        LDAP認証ユーザーのキャッシュの期限\n                    \n            \n            ユーザの場合は、ユーザ名をキーフィールドに使えるとも考えられますが、大量のユーザになったときなどに処理速度を有利にするために、内部的にはidフィールドによる連番で与えた数値で処理をすることにします。なお、usernameを条件として検索をかけるので、高速化のためにはこのフィールドにインデックスを作成しておきます。パスワードはハッシュを保存しますが、ハッシュ値は、次の手順で計算をします。\n            \n                \n                \n                \n            パスワード（pw）と、4バイトのソルト（s）を用意します。パスワードとソルトをつなげた文字列のSHA-1を求めます（ sha1(pw+s) → H1）H1の16進数表現した文字列と、ソルトを16進数表現した文字列をつなげます（hex(H1)+hex(s)→H2）H2をフィールドに保存します。\n            たとえば、OS Xにおいて、pw=user1、s=TESTとすると、以下のコマンドで「d83eefa0a9bd7190c94e7911688503737a99db0154455354」というハッシュ値の16進数表現を求めることができます。\n            pw=user1\nsalt=TEST\nh1=`/bin/echo -n \"${pw}${salt}\" | openssl sha1 -sha1`\nh2=`/bin/echo -n \"${salt}\" | xxd -ps`\necho ${h1}${h2}\n\n            \n            グループを管理するテーブル\n            グループそのものを管理するテーブルと、ユーザーやグループの特定のグループへの所属を記録するテーブルの2つがあります。\n            グループテーブル（既定名：authgroup）のフィールド\n                \n                    \n                    \n                フィールド名\n                    型の例\n                    説明\n                id\n                        INT AUTO_INCREMENT,\n                        グループを識別するための番号\n                    groupname\n                        VARCHAR(48),\n                        グループ名\n                    \n            \n            ユーザ・グループ対応付けテーブル（既定名：authcor）のフィールド\n                \n                    \n                    \n                    \n                フィールド名\n                    型の例\n                    説明\n                user_id\n                        INT,\n                        所属するユーザのidフィールドの値\n                    group_id\n                        INT,\n                        所属するグループのidフィールドの値\n                    dest_group_id\n                        INT,\n                        所属されるグループのidフィールドの値\n                    \n            \n            アクセス権に関する設定の評価\n            認証の設定は基本的にコンテキストに行いますが、IM_Entryの2番目の引数にも行えます。記述可能な内容については、『定義ファイルでの記述方法a>』を参照してください。つまり、2カ所の設定があるので、以下のように、コンテキストに設定する方を「コンテキストの認証設定」、2つ目の引数に設定するのを「オプションの認証設定」とします。また、いずれも、アクセス権の設定も行いますが、「認証とアクセス権」を合わせてここでは「認証」というネーミングをします。\n            IM_Entry(\n\tarray(\n\t\tarray(\n\t\t\t\"name\"=>\"context\",\n\t\t\t\"authentication\"=>array(\n\t\t\t\t/* コンテキストの認証設定 */\n\t\t\t),\n\t\t),\n\t),\n\tarray(\n\t\t\"authentication\"=>array(\n\t\t\t/* オプションの認証設定 */\n\t\t),\n...);\n\n            \n            コンテキストの認証設定なし、オプションの認証設定あり\n            タイトル用な条件だと、コンテキストの認証設定のuserとgroupがアクセス権の設定に関係します。もし、userもgroupも設定されていない場合は、認証が通ったユーザは何でもできると考えてください。\n            userあるいはgroupが設定されている場合、認証が通ると同時に、そのユーザあるいはそのユーザを含むグループが、userあるいはgroupの設定に含まれている必要があります。\n            コンテキストの認証設定あり、オプションの認証設定なし\n            オプションの設定のうちuserとgroupの設定がないということです。この場合、特定のコンテキストのデータベース処理に対して、コンテキストの認証設定が適用されます。\n            コンテキストの認証設定あり、オプションの認証設定あり\n            両方の認証設定があれば、先にオプションの認証設定が評価されて、その後にコンテキストの認証設定が評価されます。\n            コンテキストの認証設定の適用対象\n            適用対象として、4つのデータベース処理、load/update/new/deleteに対する処理と、それらすべてに対してまとめて設定を行うallがあります。\n            コンテキストの認証設定のtableとfleld\n            \"table\"キーに対する値がfield-userあるいはfield-groupの場合は、そのテーブルにあるfieldに指定したフィールドに、ログインが成功したユーザあるいはそのユーザが含むグループの名前が設定されちているレコードだけに絞り込まれます。検索条件にANDでユーザないしはグループの値をfieldに指定したフィールドに対する条件を付け加えます。したがって、fieldで指定したフィールドのうち、空欄ものは認証すればいっさいアクセスできないということになります。\n            \"table\"キーに対する値がfield-useやfield-groupではない場合、アクセス権はすべてのテーブルに渡って適用されます。レコードごとのアクセス権を記録するフィールドは不要です。このとき、userあるいはgroup属性に含まれていないユーザで認証した場合、いっさいのアクセスはできないようになっています。オプションの認証設定と異なる動作ですので、注意してください。\n            load/update/deleteに関しては、アクセス権は「検索条件」として集約されます。一方、newの操作に対しては、アクセス権がある場合だけ、レコードの作成が可能です。レコードの作成により、fieldで指定したフィールドに、ユーザないしはグループが設定されます。ユーザの場合は1つに決まりますが、グループの場合は、グループ名を並べ替えたときのいちばん先頭のグループ名を記録するようにします。\n            \n            ネイティブ認証、LDAP認証で使う鍵データ\n            ネイティブ認証やLDAP認証では、クライアントで入力したパスワードを、サーバー側でも利用します。そのため、クライアントからサーバーにパスワードそのものを伝達しなければなりませんが、平文で流すことがないように、暗号化してクライアントからサーバーに送ります。そのために、RSAの鍵ペアを生成してサーバーに記録します。クライアントへは公開鍵だけが送られて、暗号にしたデータをサーバーに送ります。鍵ペアは例えば、「openssl rsagen -out gen.key 2048」のようなコマンドを入れてファイルをまず作ります。そして、その内容のテキストを、$params.phpファイルの変数$generatedPrivateKeyに代入します。INTER-Mediatorに含まれているparams.phpファイルで、該当する変数を探して、生成した鍵に置き換えてください。もし、鍵にパスワードが必要な場合には変数$passPhraseに記述できますが、このファイル自体はPHPが稼働していればクライアントから参照できないとはいえ、扱いには注意しましょう。\n            \n            LDAP認証\n            LDAPサーバに関する情報を、params.phpファイルに記述をします。以下はその例です。変数ldapServerはLDAPサーバのURL、ldapPortはポート番号です。そして、ユーザーのDN（Distinguished Name）を決定するために、3つの変数を指定します。たとえば、ユーザー名がmsykなら、Open Directoryの場合はDNは「uid=msyk,cn=users,dc=homeserver,dc=msyk,dc=net」となります。「msyk」の前はldapAccountKey、後はldapContainerとldapBaseで指定した記述がつなげられて、DNを構成しています。ldapExpiringSecondsは、1回のLDAP認証後、指定した時間はLDAPサーバではなく、ネイティブ認証のためのテーブルにキャッシュした情報で認証します。これはパフォーマンスを高めるためです。最後に認証してから、変数ldapExpiringSeconds以上の時間が経過すると、改めてLDAPサーバに接続して認証を行います。\n$ldapServer = \"ldap://homeserver.msyk.net\";\n$ldapPort = 389;\n$ldapBase = \"dc=homeserver,dc=msyk,dc=net\";\n$ldapContainer = \"cn=users\";\n$ldapAccountKey = \"uid\";\n$ldapExpiringSeconds = 1800;\n\n        \n\n    "
}, {
    "id": 22,
    "parent": "/ja/for-developers/",
    "path": "/ja/for-developers/samples.html",
    "title": "サンプルファイル",
    "breadcrumb": "サンプルファイル",
    "body": "\n            \n                はじめに\n                \n                    \n                    \n                    \n                PHPの稼働が可能なWebサーバーをご用意ください。データベースとしては、FileMaker ServerないしはPDOに対応したデータベース（MySQLなど）も稼働させてください。\n                        ダウンロードしたファイルを展開したフォルダの中にある「INTER-Mediator_XXXX」フォルダをWebサーバーから参照できる場所にコピーしてください。以下、このフォルダを「INTER-Mediator」フォルダと参照します。このようにフォルダ名を変更してもかまいません。\n                    PHPでは、mbstringが動作していることを確認してください。Windows版のPHPではデフォルトではmbstringのDLLがコメントされていて読み込まれていないことが一般的ですので、ご注意ください。\n                    \n            \n            \n                ダウンロードしたファイルの中身\n                \n                    \n                    \n                    \n                ダウンロードしたフォルダ内ルートにあるファイルやフォルダが、INTER-Mediatorの本体です。その中にある「Samples」フォルダはサンプルです。\n                        「INTER-Mediator」フォルダは、PHPからから参照できる場所であれば、どこにあってもかまいません。このフォルダの中にJavaScriptファイルの「INTER-Mediator.js」があるのでWebで公開していないといけないかと思うかもしれませんが、このファイルは公開されている必要はありません。\n                    しかしながら、「INTER-Mediator」フォルダごと、Webサーバーで公開する場所に配置するのがいちばん手軽な方法です。\n            \n            \n                FileMaker Serverでの準備\n                \n                    \n                    \n                    \n                FileMaker Serverで利用する場合は、FX.php(This site is neither affiliated with nor endorsed by Chris Hansen)が必要ですが、INTER-Mediatorには含まれています。「INTER-Mediator/lib/FX」フォルダがそれです。一般に配布されるものをある程度改造したものを使っています。\n                    FileMaker Serverで付属のサンプルを利用する場合、解凍したフォルダのルートにあるTestDB.fp7をFileMaker Serverにインストールしてください。このファイルの管理ユーザは「admin」でパスワードは「1234」です。\n                    FileMaker ServerではXML共有を開始していることを確認してください（FXの動作条件です）。\n            \n            \n                MySQLでの準備\n                \n                    \n                    \n                \n                        MySQLで付属のサンプルを利用する場合、「INTER-Mediator/dist_docs/sample_schema_mysql.txtをmysqlコマンド等でデータベースに読み込んで、テーブルなどを定義してください。このファイルの最初に、コマンド入力方法について簡単に記載してあります。\n                    INTER-Mediator/params.phpの値、特に、$dbDSN 変数の値を適切なものに変更してください。\n            \n            \n                PostgreSQLでの準備\n                \n                    \n                    \n                \n                        PostgreSQLで付属のサンプルを利用する場合、「INTER-Mediator/dist_docs/sample_schema_pgsql.txtをpgsqlコマンド等でデータベースに読み込んで、テーブルなどを定義してください。このファイルの最初に、コマンド入力方法について簡単に記載してあります。\n                    INTER-Mediator/params.phpの値、特に、$dbDSN 変数の値を適切なものに変更してください。\n            \n            \n                SQLiteでの準備\n                \n                    \n                    \n                \n                        SQLiteで付属のサンプルを利用する場合、「INTER-Mediator/dist_docs/sample_schema_sqlite.txtをsqliteコマンド等でデータベースに読み込んで、テーブルなどを定義してください。このファイルの最初に、コマンド入力方法について簡単に記載してあります。\n                    データベースファイルの位置は特に問いませんので、適当な場所に作成します。INTER-Mediator/params.phpの値、特に、$dbDSN 変数の値を適切なものに変更してください。\n            \n            \n                サンプルファイルのチェックポイント\n                \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                    \n                \n                        インストール等の準備が行われれば、Webブラウザからサーバーに公開した「INTER-Mediator/Samples」ディレクトリを参照してください。Webサーバーのルートに「INTER-Mediator」フォルダがある場合、http://ホスト名/INTER-Mediator/Samples/index.htmlで、各サンプルへのリンクを貼ったページが表示されます。\n                    サンプルの一覧のページが表示されます。サンプルはデータベースごとに分類されています。\"Sample Portal Page\"は、テーブル形式の画面が表示されています。テキストフィールドに何か表示されていれば、インストールは成功です。これらのデータはデータベースの中にあるものが見えています。データベースを開いてページの内容と一致していることを確認します。たとえばFileMaker Proを使って開いたFileMakerのデータベースと、Webブラウザに見えているデータベースの内容が同じであることを確認してください。\n                    \n                        サンプルは、人間１人に対するコンタクト情報を記録するようなものです。意図的にあまり凝っては作っていません（INTER-Mediatorは「きれいな表」を作るツールではないからです）。まず、テキストフィールドに、フィールドの値がそのまま表示されていることを確認します。また、テキストフィールドのデータを変更してTabを押すなどすれば、そのタイミングでデータベース側ではそのフィールドだけが更新されています。つまり、テキストフィールドでは表示して編集し、編集結果をデータベースに書き戻す事ができます。\n                    チェックボックスやラジオボタンもあります。これらも、値に応じて選択されていたり、いなかったりといった動作をします。また、選択肢を変更すると、その結果がデータベースに書き込まれています。1人の人間に対して、複数のコンタクト先があります。つまり、1対多の関係をWebページ上に展開できます。\n                        コンタクトの情報では、WayとKindという2つのフィールドでポップアップメニューがあります。Wayの選択肢に応じてKindの選択肢が変わるようになっています。WayとKindの選択肢は多対多の関係にあるため、スキーマ的には中間テーブルを定義しています。\n                    「Delete」や「Insert」ボタンがあります。おそらく、期待通りに削除や挿入ができているのではないかと思います。1対多の関係にあるレコードについても、適切に外部キーの値を設定して、レコードの挿入を行います。\n                    いずれも、「保存」や「更新」という処理をしなくても、データベースが更新されていることが分かります。\"Sample Search Page\"は、郵便番号検索のサンプルです。検索条件にあらかじめ入れられているテキストで検索してみてください。また、その後、適当にいろいろと検索をしてみてください。複数のレコードを、決められた数のレコードごとに表示することができます。このサンプルの場合は、ボタンをクリックすればページを合成するという仕組みを利用して、「検索」の動きをさせています。\n                    \n            \n        "
}, {
    "id": 23,
    "parent": "/ja/for-developers/",
    "path": "/ja/for-developers/bindingfunc.html",
    "title": "検索ページを作成するための機能",
    "breadcrumb": "検索ページを作成するための機能",
    "body": "\n            \n                はじめに\n                データベースの内容を一覧するときに、検索結果を適用するという仕組みを一切プログラムを書かずに実現するために、ボタンやテキストフィールド、あるいは一般的なノードに対して機能を割り当てるという考え方を導入しました。要素のdata-im属性を利用して、ローカルコンテキスト（名前は「_」）に特別なキー名でバインドすることで、機能が割り当てられます。今の所、検索ページを作るための以下のものが利用できます。抽象的に記述してもわかりにくいと思いますので、具体的なタグのテキストともに紹介します。\n            \n            \n                検索条件の付加\n                テキストフィールドを「_@condition:....」のローカルコンテキストへバインドさせると、そのテキストフィールドに入れた文字列が検索条件になります。また、Enterキーで、コンテキストの更新が実行されます。\n                <input type=\"text\" data-im=\"_@condition:postalcode:f3,f7,f8,f9:*match*\">\n                \n                @以降は、コロン（:）で4つのセクションに分かれます。\n                \n                    \n                    \n                    \n                    \n                第1セクション（例：condition）：この文字列第2セクション（例：postalcode）：コンテキスト名第3セクション（例：f3,f7）：フィールド名。複数の指定も可能第4セクション（例：*match*）：演算子\n                最初の2つはいいとして、3つ目のフィールドは複数指定も可能です。複数指定をすると、それぞれのフィールドに対して同じ値の検索条件をORで与えます。演算子は、一般的なものに加えて「*match」「match*」「*match*」の3つが用意されています。データベースエンジンに関わらずに、部分一致や前方一致などをこの演算子で記述します。\n\n                上記のテキストフィールドに、例えば「新宿」と入れてEnterキーを押すと、以下の検索条件がコンテキストに付加されて、再度検索を行い、そのコンテキストのエンクロージャー内が更新されます。\n                (f3 LIKE '%新宿%' OR f7 LIKE '%新宿%' OR f8 LIKE '%新宿%' OR f9 LIKE '%新宿%')\n                \n            \n            \n                表示件数の制御\n                以下のポップアップメニューを選択すると、レコードの表示件数をポップアップの選択肢で指定でき、選択と同時にコンテキストが更新されます。「limitnumber」が決められた名前で、コロンより後にはコンテキスト名を記述します。changeイベントにより、コンテキストの更新します。\n                <select type=\"text\" data-im=\"_@limitnumber:postalcode\">...</select>\n                \n            \n            \n                コンテキストの更新ボタン（検索ボタン）\n                以下のボタンをクリックすると、指定したコンテキストが更新されます。つまり、「検索」ボタンとして機能するということです。「update」が決められた名前で、コロンより後にはコンテキスト名を記述します。clickイベントにより、コンテキストの更新します。\n                <button data-im=\"_@update:postalcode\">search</button>\n                \n            \n            \n                並べ替えフィールドの指定\n                以下のSPANタグ内の▲をクリックすると、f3フィールドの昇順で並べ替えを行います。同一のコンテキストに対する「addorder」の機能を持った要素は連動します。たとえば「f3で昇順」の後に「f9の降順」を選択すると、「f9の降順」を最優先とし、続くキーとして「f3で昇順」を設定します。最後に設定した条件が最優先になるようになっています。このバインドはclickイベントに対応しており、クリックすれば指定したコンテキストが更新されます。\n                <span style=\"cursor: pointer\" data-im=\"_@addorder:postalcode:f3:asc\">▲</span>\n                \n                @以降は、コロン（:）で4つのセクションに分かれます。\n                \n                    \n                    \n                    \n                    \n                第1セクション（例：addorder）：この文字列第2セクション（例：postalcode）：コンテキスト名第3セクション（例：f3）：フィールド名。1つのみ第4セクション（例：asc）：昇順ならasc、降順ならdesc\n            \n        "
}, {
    "id": 24,
    "parent": "/ja/for-developers/",
    "path": "/ja/for-developers/sharing.html",
    "title": "変更結果の即時更新をマルチクライアントで実現する",
    "breadcrumb": "変更結果の即時更新をマルチクライアントで実現",
    "body": "\n            \n                はじめに\n                \n                    コンテキストの共有化をマルチクライアントで実現する仕組みが稼働します。つまり、同一のページを複数のクライアントで参照しているとき、誰かがデータを変更すると、その結果は他のユーザのページにも反映されるという動作が典型的です。従って、1つのフィールドを単一の要素にバインドしている場合でも、マルチユーザつまり複数のブラウザで同一のエンティティをバインドしているという点で「共有化」されていると言えるわけです。コンテキストの共有化を実現するために、ページファイル上でのターゲット指定や、定義ファイルでのコンテキスト定義以外に何をしなければならないかをこの文書にまとめておきます。\n\n            \n            \n                機能の概要と実現手法\n\n                \n                    INTER-Mediatorでは、「コンテキスト」は、データベースに対するデータの出入り口的なイメージのものであり、検索条件などでの意味づけされたデータソースを意味します。その「共有化」とは、同一エンティティが複数のページ上のオブジェクトに展開されているとき、1つのエンティティを変更すると、その結果が他のオブジェクトにも反映される仕組みと定義します。Ver.4.4までに、単一ページ内のコンテキストの共有化が実現しています。つまり、あるページ上に、同一フィールドとバインドした要素がある\bとすると、一方を変更すると、もう一方は自動的に更新します。この動作を実現するためのプログラミングは必要なく、バインドの設定（ターゲット指定の付与）だけで可能です。しかしながら、マルチクライアントでのコンテキストの共有化では、WebRTCを利用したPusherというサービスを利用することにしました。試用程度なら無償ですが、実運用には有償となってしまうものの、開発の効率化のために利用することにしました。\n                \n            \n            \n                Pusherアカウントの取得とアプリケーション登録\n\n                Pusherのサイトでアカウントを取得します。Pusherでは「App」という単位で管理ができるので、たとえばINTER-Mediatorで作る1つのソリューションを、1つのPusherのAppとして登録するという方法もありますし、複数のソリューションで共有してもいいかもしれません。いずれにしても、アカウントを作成し、New Appというボタンなどで新たに1つのAppを作成します。ページ上に表示されるapp_id、key、secretの3つの情報がこの後に必要となります。\n                \n            \n            \n                Pusherのサーバープログラムのインストール\n\n                PusherのサーバーモジュールはPHP版を利用します。こちらのレポジトリをダウンロードし、そこから得られるlibディレクトリにあるPusher.phpという1つのファイルだけをサーバーにインストールします。他は使用しません。ファイルはPHPの設定ファイル（php.iniが代表的）で、include_pathの設定で参照できるディレクトリにあればかまいません。もっとも安直な方法は、INTER-Mediatorフォルダに入れて、サーバーにコピーしておくことです。もし、設定が以下のようなものであれば、例えば/usr/lib/phpディレクトリにPusher.phpをコピーしておけば良いでしょう。\n                include_path = \".:/usr/lib/php/pear:/usr/lib/php\"\n            \n            \n                ページファイルへの追加\n\n                \n                    Pusherのクライアントソフトウエアを、ページファイルで組み込む必要があります。たとえば、以下のように、ヘッダ部で定義ファイル（include_MySQL.php）の読み込みの前に読み込みます。この方法だと、Pusherのサイトから直接取り出すので、ファイルを自分のサーバーにコピーする必要はありません。ソースはこの通りコピペで大丈夫ですが、Pusherのバージョンが変わった時などはそれに合わせてください。\n                <html>\n<head>\n    :\n    <script src=\"http://js.pusher.com/2.2/pusher.min.js\" type=\"text/javascript\"></script>\n    <script type=\"text/javascript\" src=\"include_MySQL.php\"></script>\n</head>\n                \n            \n            \n                定義ファイルあるいはparams.phpへの追加\n\n                \n                    Pusherで定義したAppに関する指定は、定義ファイルのオプション部あるいはparams.phpで指定をします。原則的にはどちらか一方で定義をしてください。両方指定すると、定義ファイルの方が優先されます。定義ファイルでは、pusherをキーにした配列を定義し、さらにPusherのAppで示された3つの値を配列の各要素の値とします。以下は、定義ファイルでの定義例です。\n                IM_Entry(\n    array(\n　　　　　　　　　　　　　　/* コンテキストの定義 */\n　　　　　　　),\n    array(\n        :\n        'pusher' => array(\n            'app_id' => '1234',\n            'key' => '9876543210',\n            'secret' => '9876543210',\n        ),\n    ),\n    array('db-class' => 'PDO'),\n    false\n);\n                \n                params.phpファイルに記述するときには、以下のように、$pusherParameters変数に同様な配列として定義をします。\n                $pusherParameters = array(\n 'app_id' => '1234',\n 'key' => '9876543210',\n 'secret' => '9876543210',\n);\n                \n                \n                    上記のいずれかがあると、マルチクライアントのコンテキストの共有化がオンになります。定義ファイルあるいはparams.phpの指定の有無だけで、共有化の利用／不使用が決まります。指定がないと一切何も行いません。指定があるのに、Pusherのサーバーあるいはクライアントソフトウエアが利用できない状態になると、なんらかのエラーが発生します。\n            \n            \n                Ver.4.6での制約\n\n                \n                    レコードの追加においては、そのコンテキストの検索条件を加味して、検索条件に合わないレコードの追加は行いません。しかしながら、別のクライアントで作成したレコードが当初はコンテキストに合わないものの、フィールドの値を変更してコンテキストの検索条件に合うようになっても、現状ではそのレコードが見えるようにはなりません。\n\n                さらに、コンテキストのソート条件は現状では加味されておらず、一連の表示リストのサイトに常に追加されます。\n            \n            \n    "
}, {
    "id": 25,
    "parent": "/ja/for-programmers/",
    "path": "/ja/for-programmers/api.html",
    "title": "JavaScriptのインタフェース",
    "breadcrumb": "JavaScriptのインタフェース",
    "body": "\n            \n\n                はじめに\n                クライアント側ではもちろん、JavaScriptのプログラムを記述できますが、一般的なJavaScriptの関数などを使うことに加えて、INTER-Mediatorが稼働していれば利用できるメソッドについて、ここで解説をします。\n\n            \n\n            \n\n                ページ合成処理\n\n                INTERMediator.construct(targetContext)\n                \n                    \n                    \n                    \n                解説：実際のページ合成処理は、非同期にスタートするが、並行度合いはブラウザ依存し、さらに言えば、あまりパラレル動作している感覚は薄い。なお、この呼び出しの直後のステートメントは、ページ合成終了前に呼び出されてしまうので注意が必要である。ページ合成語の処理は、INTERMediatorOnPage.doAfterConstructに記述する。引数：targetContext：省略あるいはtrueで、ページファイルのすべての要素に対して合成を行う。引数にコンテキストのオブジェクト（IMLibContext）を指定すれば、そのオブジェクトに対応したエンクロージャー内部のみを合成する。返り値：なし\n                INTERMediator.constructMain(targetContext)\n                \n                    \n                    \n                    \n                解説：非同期処理を呼び出さないので、引き続いてページ合成を行う。引数：targetContext：省略あるいはtrueで、ページファイルのすべての要素に対して合成を行う。引数にコンテキストのオブジェクト（IMLibContext）を指定すれば、そのオブジェクトに対応したエンクロージャー内部のみを合成する。返り値：なし\n\n                INTERMediatorOnPage.doAfterConstruct = function() { }\n                ページの合成処理が終わったときに呼び出す関数を指定します。引数のない関数を代入します。INTERMediator.construct(true)でページ合成を行いますが、非同期に処理を進めるため、このステートメントの次に書かれた命令は、通常は合成途中に実行されるなど、少なくともページを作り終える前になってしまいます。ページができていないと取得できないような情報もあるので、このようなコールバックの仕組みを用意してあります。\n\n\n検索条件やソート条件の追加\nINTERMediator.addCondition(contextName, {field:xxx,operator:xxx,value:xxxx})\nコンテキストに従ってデータベースのクエリを行うとき、ここで指定した検索条件が、他の条件に対してAND条件で追加される。引数contextNameにはコンテキスト名を指定する。第2引数は条件を示すオブジェクトを指定する。このオブジェクトではfield、operator、valueのプロパティを指定し、それぞれフィールド名、演算子、値を指定する。複数の条件を追加する場合には、このメソッドを繰り返し呼べば良い。additionalConditionプロパティはセッター／ゲッターで実装しているため、内部のオブジェクトへの追加はこのAPIを使うようにする。\nINTERMediator.clearCondition(contextName)\n検索条件に追加される設定を、引数に指定したコンテキスト名のものついて初期化して、指定なしにする。\nINTERMediator.additionalCondition = {};\nすべての検索条件に追加される設定を消す。\nINTERMediator.addSortKey(contextName, {field:xxx,direction:xxxx})\nコンテキストに従ってデータベースのクエリを行うとき、ここで指定したソート条件が設定される。コンテキストのソート条件より高い優先順になっている。引数contextNameにはコンテキスト名を指定する。第2引数はそーと条件を示すオブジェクトを指定する。このオブジェクトではfield、directionのプロパティを指定し、それぞれフィールド名、昇順か降順かをASCないしはDESCを指定する。複数の条件を追加する場合には、このメソッドを繰り返し呼べばよく、先に指定した方が優先順位が高い。\nINTERMediator.clearSortKey(contextName)\nソート条件に追加される設定を、引数に指定したコンテキスト名のものついて初期化して、指定なしにする。\nINTERMediator.additionalSortKey = {};\nすべてのソート条件に追加される設定を消す。\nINTERMediator.additionalFieldValueOnNewRecord\n新規レコードを作った時のフィールドの既定値を、JavaScript上で追加定義する。INTERMediator.additionalFieldValueOnNewRecord[\"コンテキスト名\"] = [{field: フィールド名, value: 値}, ...] の形式で利用する。\nINTERMediator.additionalFieldValueOnUpdate\nレコード更新時に変更するフィールドとその値を、JavaScript上で追加定義する。INTERMediator.additionalFieldValueOnUpdate[\"コンテキスト名\"] = [{field: フィールド名, value: 値}, ...] の形式で利用する。\nINTERMediator.additionalFieldValueOnDelete\nレコード削除時の検索条件を、JavaScript上で追加定義する。INTERMediator.additionalFieldValueOnDelete[\"コンテキスト名\"] = [{field: フィールド名, value: 値}, ...] の形式で利用する。\n\n\nページ合成処理に割り込む処理の記述\nINTERMediatorOnPage.expandingEnclosureFinish (name,target) \nINTERMediatorOnPage.《コンテキストで指定した名前》 (target) \n                \n                    \n                    \n                    \n                引数：name：展開が終わった箇所で利用した定義ファイルのコンテキストのname属性の値引数：target：展開が終わったエンクロージャのノード返り値：なし\n\n                \n                    エンクロージャの展開が終わる度に呼び出されます。《コンテキストで指定した名前》は、定義ファイルのコンテキストの指定で、'post-enclosure'というキーに対応する文字列で、メソッド名を指定します。そのメソッドを上記のように定義して、プログラムを記述します。前者はすべてのコンテキスト、後者は指定したコンテキストに対しての処理のときだけに呼び出されます。実際には、ヘッダのscriptタグの要素内で、以下のように記述し、{ } 内に独自のプログラムを記述します。\n\n                INTERMediatorOnPage.expandingEnclosureFinish = function(name,target) {\n    :\n}\n                \n\n                INTERMediatorOnPage.expandingRecordFinish(name,repeaters)\n                INTERMediatorOnPage.《コンテキストで指定した名前》(repeaters)\n                \n\n                    \n                    \n                    \n                引数：name：展開が終わった箇所で利用した定義ファイルのコンテキストのname属性の値引数：repeaters：1レコード分の展開をしたリピーターの配列返り値：なし\n\n                \n                    リピータの展開時に、1レコード分の処理が終わった度に呼び出される。《コンテキストで指定した名前》は、定義ファイルのコンテキストの指定で、'post-repeater'というキーに対応する文字列で、メソッド名を指定します。そのメソッドを上記のように定義して、プログラムを記述します。前者はすべてのコンテキスト、後者は指定したコンテキストに対しての処理のときだけに呼び出されます。実際には、ヘッダのscriptタグの要素内で、以下のように記述し、{ } 内に独自のプログラムを記述します。\n                INTERMediatorOnPage.expandingRecordFinish = function(name,repeaters) {\n    :\n}\n                \n\n            \n\n            \n\n                特定のターゲット指定を持つノードの検索\n                INTERMediatorOnPage.getNodeIdsHavingTargetFromNode(fromNode, imDefinition)\n                \n                    \n                    \n                    \n                引数：fromNode：基準となるノードで、このノードより下位のノードを検索する。ノードの配列でもOK引数：imDefinition：ターゲット指定。例えば、「<input type=\"text\" class=\"IM[item@unitprice]\" />」については、引数に \"item@unitprice\" を指定する\n                    返り値：ノードのid属性を示す文字列の配列。ノードが発見された場合でid属性がない場合は、そのノードへの参照\n                INTERMediatorOnPage.getNodeIdsHavingTargetFromRepeater(fromNode, imDefinition)\n                \n                    \n                    \n                    \n                引数：fromNode：基準となるノードで、このノードより上位のノードを検索し最初に見つかったリピータよりも下位のノードを検索する引数：imDefinition：ターゲット指定。例えば、「<input type=\"text\" class=\"IM[item@unitprice]\" />」については、引数に \"item@unitprice\" を指定する\n                    返り値：ノードのid属性を示す文字列の配列。ノードが発見された場合でid属性がない場合は、そのノードへの参照\n                INTERMediatorOnPage.getNodeIdsHavingTargetFromEnclosure(fromNode, imDefinition)\n                \n                    \n                    \n                    \n                引数：fromNode：基準となるノードで、このノードより上位のノードを検索し最初に見つかったエンクロージャよりも下位のノードを検索する引数：imDefinition：ターゲット指定。例えば、「<input type=\"text\" class=\"IM[item@unitprice]\" />」については、引数に \"item@unitprice\" を指定する\n                    返り値：ノードのid属性を示す文字列の配列。ノードが発見された場合でid属性がない場合は、そのノードへの参照\n\n            \n\n            \n\n                URLからパラメータを取り出す\n                INTERMediatorOnPage.getURLParametersAsArray()\n                URLの中のパラメータを取り出し、パラメータ名をキーとしたオブジェクトを返す。たとえば、「http://domain.name/page.html?a=1&b=2」というページなら、返り値は {a:1, b:2}となる。\n\n            \n\n            \n\n                Post Onlyモードでのメソッド\n                INTERMediatorOnPage.processingBeforePostOnlyContext = function(targetNode) {}\n                バリデーションが完了し、データベースへの書き込み前に呼び出される。falseを返すとデータベースの書き込み処理はキャンセルされる。引数targetにはPost Onlyモードのエンクロージャーへの参照が設定される。\n                INTERMediatorOnPage.processingAfterPostOnlyContext = function(targetNode, idValue) {}\n                新規レコードを作成した直後に呼び出される。引数targetにはPost Onlyモードのエンクロージャーへの参照が設定される。引数idValueは新たに作成されたレコードの主キー値が設定される。設定されていない場合は、レコード作成ができなかったことを示す。\n\n            \n\n            \n\n                数値の書式設定\n                INTERMediatorLib.toNumber( str );\n                引数の文字列を数値に変換する\n                INTERMediatorLib.numberFormat( str, digit );\n                引数strの文字列を数値に変換し、カンマ区切りで表示する。小数点以下の桁数をdigitで指定する。\n\n            \n\n            \n\n                日付時刻のデータから文字列を生成\n                INTERMediatorLib.dateTimeStringISO( dt );\n                引数のDateクラスの値を、ISO8601形式（2015-06-21 00:00:00）に変換する。引数を省略すると、現在の日付を得る。日時はブラウザのローカル時刻。\n                INTERMediatorLib.dateTimeStringFileMaker( dt );\n                引数のDateクラスの値を、FileMaker Serverが受け付ける形式（06/21/2015 00:00:00）に変換する。引数を省略すると、現在の日付を得る。日時はブラウザのローカル時刻。\n                INTERMediatorLib.dateStringISO( dt );\n                引数のDateクラスの値を、ISO8601形式（2015-06-21）に変換する。引数を省略すると、現在の日付を得る。日付はブラウザのローカル時刻。\n                INTERMediatorLib.dateStringFileMaker( dt );\n                引数のDateクラスの値を、FileMaker Serverが受け付ける形式（06/21/2015）に変換する。引数を省略すると、現在の日付を得る。日付はブラウザのローカル時刻。\n                INTERMediatorLib.timeString( dt );\n                引数のDateクラスの値を、時刻の形式（12:34:56）に変換する。引数を省略すると、現在の時刻を得る。時刻はブラウザのローカル時刻。\n\n            \n\n            \n\n                要素の値を更新する\n                IMLibUI.valueChange(idValue)\n                引数にINTER-Mediatorによって展開されたノードのid属性値を指定すると、現在の値をもってデータベース側に更新を行う。INTER-Mediatorによる自動更新をしない場合に利用するかもしれない。\n                \n                    \n                注記：バージョン4.5でINTERMediator.valueChange(idValue)からIMLibUI.valueChange(idValue)に変更されました。\n\n            \n\n            \n\n                INTERMediatorクラスのプロパティ\n                INTERMediator.debugMode = true | false\n                デバッグモード（展開の過程をページの最初に表示）での実行を行う。IM_Entryの4つ目の引数でコントロールするのが手軽\n                INTERMediator.separator = '@'\n                リンク定義の区切り文字で、既定値は@\n                INTERMediator.defDivider = '|',\n                複数のリンク定義がある場合の区切り文字で、既定値は |\n                INTERMediator.defaultTargetInnerHTML = true\n                リンク設定のターゲット指定がない場合、既定値はテキストノードを作成して下位のノードとする。ここにtrueを指定すると、ターゲット指定がない場合にはinnerHTMLに代入する\n                INTERMediator.navigationLabel = ...\n                ナビゲーションのカスタマイズ（別項目で詳細を解説）\n                INTERMediator.titleAsLinkInfo = true;\n                titile属性の内容をリンク設定として解釈する。既定値はtrue\n                INTERMediator.classAsLinkInfo = false;\n                class属性にあるIM[ ] でかこった箇所をリンク設定として解釈する。既定値はtrue\n\n            \n\n            \n\n                エラーメッセージ、デバッグメッセージ\n                INTERMediator.setDebugMessage(message, level)\n                でバッグメッセージを設定する。引数messageが実際のメッセージで、levelはそのレベル。定義ファイルでのIM_Entry関数の4つ目の引数の数値より低いレベルのデバッグメッセージが画面あるいはコンソールに表示される。\n                INTERMediator.setErrorMessage(ex, moreMessage)\n                単にエラーメッセージを表示するだけなら第1引数に文字列を指定するだけでよい。フレームワーク内では、exにExceptionクラスのオブジェクト、第2引数に付加的なメッセージを設定している。\n                INTERMediator.flushMessage()\n                エラーメッセージやデバッグメッセージを表示する\n\n            \n\n            \n\n                バリデーション処理後に呼び出される関数\n                INTERMediatorOnPage.doAfterValidationSucceed(target,linkInfo)\n                バリデーションの設定がされていて、ルールの結果がtrueとなった直後に呼び出される。引数targetは調べたノードへの参照、linkInfoは対照となったリンク定義の文字列が得られる\n\n                INTERMediatorOnPage.doAfterValidationFailure(target,linkInfo)\n                バリデーションの設定がされていて、ルールの結果がfalseとなった直後に呼び出される。引数targetは調べたノードへの参照、linkInfoは対照となったリンク定義の文字列が得られる。テキストフィールドの値をもとにして計算処理をしている場合、間違えた値で再計算をしてしまっているかもしれないが、この関数は、元の値に戻された後に呼び出されるので、さらに再計算などを組み込むことができる。\n\n            \n            \n                マスター/ディテール形式のユーザーインタフェース処理前後\n                INTERMediatorOnPage.naviBeforeMoveToDetail(masterContext, detailContext)\n                マスター表示からディテール表示への切り替え前に呼び出される。引数はマスターおよびディテールのコンテキストオブジェクト。\n                INTERMediatorOnPage.naviAfterMoveToDetail(masterContext, detailContext)\n                マスター表示からディテール表示への切り替え後に呼び出される。引数はマスターおよびディテールのコンテキストオブジェクト。\n                INTERMediatorOnPage.navibeforeMoveToMaster(masterContext, detailContext)\n                ディテール表示からマスター表示への切り替え前に呼び出される。引数はマスターおよびディテールのコンテキストオブジェクト。\n                INTERMediatorOnPage.naviAfterMoveToMaster(masterContext, detailContext)\n                ディテール表示からマスター表示への切り替え後に呼び出される。引数はマスターおよびディテールのコンテキストオブジェクト。\n            \n\n            \n\n                ローカルコンテキスト\n                IMLibLocalContext.clearAll()\n                ローカルコンテキストのオブジェクトを初期化して、記録された内容をクリアする\n                IMLibLocalContext.setValue(key, value)\n                指定したキーで値を保存する\n                IMLibLocalContext.getValue(key)\n                指定したキーの値を取り出す\n                IMLibLocalContext.archive()\n                ローカルコンテキストの内容をセッションストレージ（またはクッキー）に記録する\n                IMLibLocalContext.unarchive()\n                セッションストレージ（またはクッキー）に記録したデータからローカルコンテキストを復元する\n                IMLibLocalContext.update(idValue)\n                引数に指定したid属性値のノードがローカルコンテキストにバインドされていれば、その要素の値をコンテキストに反映させる。通常はchangeイベントで自動的にコンテキストに値が設定されるが、changeイベント以外での動作時に利用する必要が出る\n\n            \n\n            \n\n                コンテキストオブジェクト\n                IMLibContextクラスのオブジェクトに対するメソッドは以下の通りです。通常は、new IMLibContext(contextName)で生成された結果を使っています。《IMLibContext》は、IMLibContextクラスのインスタンスを示します。\n\t\t\tコンテキストごとに生成されるオブジェクト\n                《IMLibContext》.contextName\n                コンテキスト名\n                《IMLibContext》.enclosureNode\n                エンクロージャーの要素への参照\n                《IMLibContext》.repeaterNodes\n                リピーターの初期状態で、ドキュメントツリー外に複製して取ってあるもの。値はノードの配列。\n                《IMLibContext》.store\n                コンテキストが保持するデータベースの値。このオブジェクトのプロパティは、keyフィールードが「id」とすれば、id=3、id=420のように、「主キーフィールド名=値」の文字列。その文字列のプロパティはさらにオブジェクトとなっていて、そのオブジェクトのプロパティはフィールド名。そのフィールド名のプロパティに対する値がデータベースに記録された値。FileMaker Serverで、relationキーのportalがtrueの場合、その値がさらにオブジェクトとなっており、プロパティはリレーションシップの関連キーの値である。なお、この値は更新しても、データベースへの更新は自動的には行われない。\n                《IMLibContext》.setValue(recKey, key, value, nodeId, target)\n                コンテキストに値valueを設定する。キーとしてはrecKey（id=34、つまり主キーとイコール、その値を合成した文字列）およびkey（フィールド名）を指定する。最初は要素のid属性値nodeIdを伴ってい指定され、id属性値とターゲット指定targetで決定されるページ内のノードと、データベースの値の対応関係を記録する。nodeIdを省略すると、値を保存すると同時に、他のコンテキストの同じテーブルの同じレコードの同じフィールドとバインドしている値も更新し、要素に表示する値も更新する。\n                《IMLibContext》.getValue(recKey, key)\n                2種類のキーを指定して値を取り出す。最初のキーは、「主キーフィールド名=値」の文字列、次のキーはフィールド名。つまり、storeプロパティへのアクセッサーメソッド。なお、keyに \"_im_buttom_master_id\" を指定すると、「詳細」ボタンの要素に設定されているid属性値を得られるので、プログラムでクリック操作をしたい時には利用できる。\n                《IMLibContext》.getContextInfo(nodeId, target)\n                要素のid属性値とターゲットから、コンテキスト情報（{context: this, record: recKey, field: key}形式のオブジェクト）を得る。コンテキスト名とフィールド名だけのターゲットの場合は、\"\" を指定する\n                《IMLibContext》.getContextValue(nodeId, target)\n                要素のid属性値とターゲットから、コンテキストでの値を得る\n                《IMLibContext》.setDataAtLastRecord(key, value)\n                コンテキストの最後のレコードのkeyで指定したフィールドに、valueの値を設定し、データベースへの更新を行う。\n                《IMLibContext》.setDataWithKey(pkValue, key, value)\n                コンテキストにあるレコードをpkValueで指定して、そのレコードにあるkeyで指定したフィールドに、valueの値を設定し、データベースへの更新を行う。レコードの指定は「主キーフィールド名=値」の文字列。\n \t\t\tコンテキストを管理するIMLibContextPool\n               IMLibContextPool.poolingContexts\n                IMLibContextPoolは複数のコンテキストを管理するオブジェクト。このプロパティは配列で、管理しているそれぞれのIMLibContextクラスのオブジェクトが要素として記録されている\n                IMLibContextPool.getContextInfoFromId(idValue, target)\n                要素のid属性値とターゲットから、コンテキスト情報（{context: this, record: recKey, field: key}形式のオブジェクト）を得る。コンテキストをまたいで検索する\n                IMLibContextPool.updateContext(idValue, target)\n                id属性値とターゲットで示す要素の現在の値を、対応するコンテキストに書き込む\n                IMLibContextPool.contextFromEnclosureId(idValue)\n                指定したid属性を持つ要素がエンクロージャーのコンテキストオブジェクトを返す\n                IMLibContextPool.contextFromName(cName)\n                コンテキスト名からコンテキストを返すが、最初のコンテキストオブジェクトのみが返される\n                IMLibContextPool.getContextFromName(cName)\n                コンテキスト名からコンテキストを返すが、引数のコンテキスト名を持つすべてのコンテキストオブジェクトを含む配列が返される\n            \n            \n                イベント対応\n                IMLibMouseEventDispatch.setExecute(idValue, exec)\n                指定したid属性値の要素に対してclickイベントが発生したときにexecに指定した関数が実行されるようにする\n                IMLibMouseEventDispatch.setTargetExecute(targetValue, exec)\n                指定したターゲット指定の要素に対してclickイベントが発生したときにexecに指定した関数が実行されるようにする\n                IMLibKeyEventDispatch.setExecute(idValue, charCode, exec)\n                指定したid属性値の要素に対して、charCodeのキーを押したことによるkeydonwイベントが発生したときにexecに指定した関数が実行されるようにする\n\n            \n\n            \n\n                クライアントからの直接的なデータベース処理\n                INTER-Mediatorは、INPUT、SELECT、TEXTAREAタグ要素を編集してフォーカスを離れる時（つまり、onchangeイベントを受けて）、自動的にデータを書き戻すようにしています。しかしながら、データベースの読み書きの処理はこれだけでは足りないと思われます。たとえば、DIVタグ要素をドラッグできるようにして、ドラッグ先の座標をデータベースに書き戻すようなことをしたいと思うかもしれません。その場合、イベント処理関数で、ノードの属性やスタイルの値を取り出して、データベース処理を自前でやりたくなります。そのために、以下のように、CRUDに対応した4つの関数を用意してあります。\n\n\t\t\t同期通信による手法\n                INTER-Mediatorでは古くからあるAPIで、通信処理はAjaxの関数を使用しながらも同期で行います。通信結果を持って何か処理を記述するプログラムが書きやすい手法です。Ver.5.3より、一部の処理は非同期通信をサポートしますが、これらのAPIは過去に作られたプログラムでの互換性を確保するために削除しないでそのまま残します。認証を必要とする状況では、WithAuthという名前が付加されたメソッドが用意されています。引数argは通常のメソッドと同じですが、引数completionには認証が成功した後に実行されるプログラムを関数リテラルの形式で与えておくことができます。\n\n                INTERMediator_DBAdapter.db_query(args)\n                INTERMediator_DBAdapter.db_queryWithAuth(args, completion)\n                データベースからの取り出しを行います。関数の返り値は1レコードがオブジェクトとなった配列です。\n                \n                    \n                        \n                        \n                        \n                        \n                        \n                        \n                        \n                    \n                            属性\n                            指定する値\n                        \n                            name\n                            定義ファイルのIM_Entry関数の第1引数に指定する配列のname属性の値\n                        \n                            records\n                            取り出すレコードの数（レコード数の上限）\n                        \n                            fields\n                            取り出すフィールドの名前の配列（現在はすべて*でアクセスしており無視される）\n                        \n                            parentkeyvalue\n                            外部キーフィールドの値\n                        \n                            conditions\n                            {field:xx, operator:xx, value:xx} の形式のオブジェクトの配列。検索条件をANDで追加する\n                        \n                            useoffset\n                            trueならオフセットの値を利用する。falseなら利用しない\n                        \n                \n\n                INTERMediator_DBAdapter.db_update(args)\n                INTERMediator_DBAdapter.db_updateWithAuth(args, completion)\n                　データベースのレコードの更新を行います。\n                \n                    \n                        \n                        \n                        \n                        \n                    \n                            属性\n                            指定する値\n                        \n                            name\n                            定義ファイルのIM_Entry関数の第1引数に指定する配列のname属性の値\n                        \n                            conditions\n                            {field:xx, operator:xx, value:xx} の形式のオブジェクトの配列。検索条件をANDで追加する\n                        \n                            dataset\n                            {field:xx, value:xx}の形式のオブジェクトの配列。設定するフィールドとその値を指定する\n                        \n                \n\n                INTERMediator_DBAdapter.db_delete(args)\n                INTERMediator_DBAdapter.db_deleteWithAuth(args, completion)\n                データベースのレコード削除を行います。\n                \n                    \n                        \n                        \n                        \n                    \n                            属性\n                            指定する値\n                        \n                            name\n                            定義ファイルのIM_Entry関数の第1引数に指定する配列のname属性の値\n                        \n                            conditions\n                            {field:xx, operator:xx, value:xx} の形式のオブジェクトの配列。検索条件をANDで追加する\n                        \n                \n\n                INTERMediator_DBAdapter.db_createRecord(args)\n                INTERMediator_DBAdapter.db_createRecordWithAuth(args, completion)\n                データベースに新しいレコードを作成します。関数の返り値は、作成したレコードのキーフィールドの値です。\n\n                \n                    \n                        \n                        \n                        \n                    \n                            属性\n                            指定する値\n                        \n                            name\n                            定義ファイルのIM_Entry関数の第1引数に指定する配列のname属性の値\n                        \n                            dataset\n                            {field:xx, value:xx} の形式のオブジェクトの配列。新しいレコードに対して指定フィールドに値を設定する\n                        \n                \n\n\t\t非同期通信によるネットワーク処理\n\t\t以下のメソッドはいずれも、ネットワーク処理を非同期で行います。通信のためのパラメータは、argsに指定します。それぞれ、直前に示した、同期通信の対応するAPIと同じように、argsを指定します。successProcとfailProcはそれぞれ、通信が成功した時、エラーが発生した時に呼び出されるメソッドを指定します。何もしないなら、nullを指定します。通信処理は非同期で実行されるため、これらのメソッドの直後にステートメントは、通常は通信終了前に実施されるでしょう。原則として、このメソッド以降はプログラムを何も書かない、つまり、一連の処理がこのメソッドの呼出で終わるように記述する必要があります。これらのメソッドは認証が必要な場合でも、不要な場合でも利用されます。認証が必要な場合、認証が失敗すると、繰り返しログインパネルが表示する仕組みも組み込んであります。\n               INTERMediator_DBAdapter.db_query_async(args, successProc, failProc)\n               INTERMediator_DBAdapter.db_update_async(args, successProc, failProc)\n               INTERMediator_DBAdapter.db_delete_async(args, successProc, failProc)\n               INTERMediator_DBAdapter.db_createRecord_async(args, successProc, failProc)\n               INTERMediator_DBAdapter.db_copy_async(args, successProc, failProc)\n通信が失敗した時に呼び出されるfailProcの関数は引数がありません。成功した時に呼び出されるメソッドは、引数が1つあり、通信結果を含むオブジェクトを引数で得られます。そのオブジェクトは、以下のプロパティを持っています。このsuccessProcに、通信結果をもとにした処理を記述することが可能です。\n\n\n\n\n\n\n\n\n\n\n\nプロパティ内容dbresult検索結果あるいは処理したレコードを示すオブジェクトの配列resultCount検索あるいは処理したレコード数totalCount現在の検索条件で得られる総レコード数newRecordKeyValue新しいレコードを作ったり複製をした時、新しいレコードのキーフィールドの値newPasswordResultパスワードの変更が成功したかどうかを示す論理値registeredIdクライアント間連携で利用する登録IDnullAcceptableフィールドの値にnullが許可されているかどうか\n\n            \n        "
}, {
    "id": 26,
    "parent": "/ja/for-programmers/",
    "path": "/ja/for-programmers/jscomponent.html",
    "title": "JavaScriptコンポーネントの使い方",
    "breadcrumb": "JavaScriptコンポーネントの使い方",
    "body": "\n            \n                はじめに\n                以下のムービーのようなドラッグ&ドロップによるファイルのアップロードができます。サンプルでは、Sample_webpageにあるfileupload_MySQL.htmlを中心に見てください。\n                \n                    dragdrop\n                \n\n                単一のコンテキストとバインドしたファイルアップロード\n                ファイルのドラッグ&ドロップによるアップロード機能は、JavaScriptのドラッグ&ドロップの機能などを利用して実装しています。シンプルな利用方法は、ファイルのドラッグを受け付けたい箇所に、以下のように記述します。JavaScriptのプログラムはINTER-Mediatorに含まれているので、定義ファイルをscriptタブで読み込むだけで基本的には利用できます。\n\n                \n                    <span data-im=\"testtable@vc1\" data-im-widget=\"fileupload\"></span>\n                \n\n                単にドラッグ&ドロップしてファイルをサーバーにアップロードするだけということは通常はなく、そのファイルをどこかに記録し、さらにパスなどを記録しておくことになるはずです。前述の例では、testtableというコンテキストのvc1フィールドに、ファイルのパスを記述します。実際にアップロードしたファイルが置かれるディレクトリは、IM_Entryの第2引数（オプション指定）で、'media-root-dir'キーでパスを指定します。\n\n                アップロード結果を関連レコードとして追加する\n                前述の方法は、アップロードを複数回行った場合、最後のアップロードしたファイルへのパスのみが残ります。これに対して、アップロード結果を別のコンテキストに新しいレコードを作成し、アップロードごとに新しいレコードを作成することもできます。別のコンテキストとの間にはリレーションシップの定義が必要です。以下の例は、testtableコンテキストのvc1フィールドに対してファイルアップロードのコンポーネントを使う場合です。まず、この場合も、testtable側にはパスを記録するフィールド（ここでのvc1）を一つ用意します。そして、アップロードがあれば、2つ目のコンテキストfileuploadに新たにレコードを作るとします。まず、2つのコンテキストは、fileupload側のreatlionキーの定義に従って1対多の関係にあります。加えて、testtable側にfile-uploadキーによる配列を定義します。この配列により、vc1フィールドでファイルのアップロードがあれば、fileupload側に新たなレコードを作るという動作をします。\n\n                \n                    IM_Entry(\n    array(\n        array(\n            'records' => 10000,\n            'name' => 'testtable',\n            'key' => 'id',\n            'file-upload' => array(\n                array('field'=>'vc1', 'context'=>'fileupload',)\n            ),\n        ),\n        array(\n            'name' => 'fileupload',\n            'key' => 'id',\n            'relation' => array(\n                array('foreign-key' => 'f_id', 'join-field' => 'id', 'operator' => '=')\n            ),\n        ),\n    ),\n    array(\n        'media-root-dir' => '/tmp',\n    ),\n    array('db-class' => 'PDO'),\n    false\n);\n                \n\n                そして、アップロードが行われた場合、fileuploadコンテキストに新しいレコードを作りますが、relationの指定に従って、fileupload側の外部キーのフィールドに、testtable側の主キーの値が自動的に設定されて、アップロードのレコードが関連付けられます。fileuploadコンテキスト側には、文字列型のpathフィールドを作成しておきます。このフィールドに、アップロードされたファイルのパスが設定されます。このフィールド名は決め打ちになります。fileuploadコンテキストのテーブルには他のフィールドも定義できます。\n\n                アップロードのプログレスバー\n                アップロードの経過を表示するプログレスバーを表示したい場合には、INTERMediator.construct(); の実行前に、以下のステートメントを実行させてください。\n\n                \n                    IMParts_Catalog.fileupload.progressSupported = true;\n                \n\n                加えて、Sample_webpageフォルダにあるupload_frame.phpファイルを、定義ファイルと同じフォルダにコピーしておいてください。\n                なお、プログレス表示はPHPがAPC(Alternative PHP Cache)に対応している必要があります。PHP v5.3で稼働させる方法は、こちらを参考にしてください。\n\n                フォーム形式のアップロード\n                ドラッグ&ドロップによるファイルのアップロードは、実はInternet Explorer 10では動きません。それに必要なクラスがブラウザに用意されていないからです。その場合、フォーム形式のアップロードコンポーネントが表示されます。これと同じように、常に、フォーム形式のアップロード機能を設定したい場合、INTERMediator.construct(); の実行前に、以下のステートメントを実行させてください。\n\n                \n                    IMParts_Catalog.fileupload.forceOldStyleForm = true;\n                \n\n                FileMakerのオブジェクトフィールドにファイルをアップロードする\n                INTER-Mediator 5.1以降を使用している場合、FileMakerのオブジェクトフィールドに直接ファイルをアップロードできます。ただし、FileMaker Serverのバージョン13以降が必要、かつあらかじめデータベースのフィールドオプションにおいて［入力値の自動化］オプションの［計算値］に下記を設定しておく必要があります。\n                If (\n    GetContainerAttribute(Self; \"filename\") ≠ \"\";\n        Self;\n        Let([\n            fileName = GetValue(Self; 1);\n            content = Substitute(Self; fileName & ¶; \"\")\n        ];\n        Base64Decode(content; fileName)\n    )\n)\n                定義ファイルでは、'file-upload'キーおよび下位のキーとして'field'キーと'container'キーを下記のように指定します。'field'キーの値はオブジェクトフィールドの名称です（下記の例ではvc1）。\n                'file-upload' => array(\n    array('field'=>'vc1', 'container' => true)\n),\n\n\n            \n            \n                JavaScriptコンポーネントのプラグイン\n                以前から、HTMLエディタのtinyMCE、コードエディタのCodeMirrorや独自作成したファイルアップロードコンポーネントを使えるようにしていたのですが、なんとか「プラグイン」的に使える状態になったので、一度ドキュメントを作成します。JavaScriptで作ったコンポーネントに、データベースにあるフィールドの値を表示し、修正するとそれが書き戻される仕組みを提供します。ただし、コンポーネントごとに、初期化の方法は違うので、その部分を吸収するプラグインを作らないといけません。\n\n                JavaScriptコンポーネントの使い方\n                まず、JavaScriptのコンポーネントを使いたい場合には、次のように、data-im-widget属性にキーワードを書きます。プラグインができていればこれだけです。\n\n                \n                    <div data-im=\"testtable@text1\" data-im-widget=\"tinymce\"></div>\n                \n\n                ここで、tinyMCEを使うにはプラグインが必要ですが、これについては、すでにINTER-Mediatorの中にあります。Samples/Sample_webpage/tinymce_im.jsがそれなので、たとえば、ページファイルのヘッダ部に、次のような記述を行ってtinyMCE自身の読み込みと、プラグインの読み込みを行っておきます。もちろん、パスは適切なものを指定してください。\n\n                \n                    <script type=\"text/javascript\" src=\"tinymce/js/tinymce/tinymce.min.js\"></script>\n<script type=\"text/javascript\" src=\"tinymce_im.js\"></script>\n                \n\n                Ver.4.4現在、tinyMCE、CodeMirror、それから独自に作ったファイルアップロードコンポーネント（Samples/Sample_webpage/fileupload_MySQL.htmlがサンプル）が利用可能です。\n\n                JavaScriptコンポーネントプラグインの作り方\n                プラグイン（前記のtinymce_im.jsに相当）は、JavaScriptで記述します。もちろん、tinymce_im.jsもサンプルとして参照する必要があるでしょう。\n                プラグインのファイルでは、IMParts_Catalog変数のオブジェクトに、プラグインのオブジェクトを追加します。このときのキーが、data-im-widget属性に指定するキーワードとなります。以下はその基本構造です。\n\n                \n                    IMParts_Catalog[\"tinymce\"] = {\n    instanciate: function (parentNode) { },\n    ids: [],\n    finish: function (update) { }\n}\n                \n\n                右辺のオブジェクトは、instanciateとfinishという2つのメソッドを持つ事が重要です。INTER-Mediatorは、ページ合成時に、im-data-widget属性があるノードを見つけると、そのノードを引数にとって、instanciateメソッドを呼び出します。\n                一方、ページ合成の最終段階、つまり、DOMオブジェクトが確定してページ上に存在する状態になった後に、finishメソッドが呼び出されます。結果的に、im-data-widget属性が設定された要素×レコード数の回数instanciateメソッドが呼び出され、最後に1回finishが呼び出されます。\n\n                プラグインの作業として必要なこと\n                この2つのメソッドが行うことは、コンポーネントに対するゲッタおよびセッタメソッドをそれぞれ展開したコンポーネントに対して設定することです。また、対応コンポーネントのid属性値を得るメソッドも実装します。たとえば、instanciateメソッドに記述するとしたら、次のようになります。instanciateメソッドを呼び出されたときの引数parentNodeあるいはコンポーネントのルートの要素に対して、以下の決められた名称のメソッドを実装します。メソッドの中身はtinyMCEの場合の例です。\n\n                \n                    parentNode._im_getComponentId = function () { // data-im-widgetのある要素に設定\n    var theId = newId;\n    return theId;\n};\nparentNode._im_setValue = function (str) { // data-im-widgetのある要素に設定\n    var targetNode = newNode;\n    targetNode.innerHTML = str;\n};\ntargetNode._im_getValue = (function () { // コンポーネントのルートの要素に設定\n    var thisId = targetId;\n    return function () {\n        return tinymce.EditorManager.get(thisId).getContent();\n    }\n})();\n                \n\n                instanciateメソッドでの作業\n                通常、JavaScriptのコンポーネントは、特定の要素にidやclass値を適当に与えて、その要素の中に必要なオブジェクトを詰め込むといった動作をします。つまり、起点となる要素を用意しておき、そこに必要なオブジェクトを追加します。tinyMCEだと、手軽な作り方はTEXTAREAタグ要素を用意することですが、ページファイル上に記述した要素がどんな種類のタグ要素でもいいように、data-im-widget属性がある要素の子要素にTEXTAREAタグ要素を作り、その要素をtinyMCEで初期化するようにしています。\n                そのTEXTAREA要素のid属性は、適当に付けます。targetNodeで参照されるリピーター内の要素は、すでにid属性が設定されているので、そのid値に適当な文字を追加すれば、一意なid属性になります。_im_getComponentIdメソッドは、ここでのTEXTAREA要素に付けたidを返します。\n                なお、instanticateメソッド中は、まだ、リピーターはエンクロージャーに挿入されておらず、documentからたどれない状態になっています。その場合、初期化をしてもうまく動作しないと思われます。従って、instanciateメソッドでは、元になるTEXTAREA要素を作り、id番号を振り、そのid番号をidsプロパティの配列に追加して、必須のメソッドを定義するところまでしかできないのが一般的かと思います。idsプロパティはなくてもいいのですが、この後のfinalizeメソッドでそれぞれの要素を初期化するために、初期化すべき要素を後から特定できるようにするために、instanciateで作成した要素のidを残します。\n                instanciateメソッドの段階で実際に利用されるのは、_im_getComponentIdメソッドと_im_setValueメソッドなので、_im_getValueメソッドは実際には設定する必要はありません。_im_setValueメソッドについては、JavaScriptコンポーネントが初期化前であることを考慮して、機能する前の状態での値設定が可能なプログラムを記述する必要があります。\n                finalizeメソッドでの作業\n                この段階では、全ての要素がdocument配下にいるので、JavaScriptコンポーネントの初期化を実際に行います。なお、初期化した結果、ゲッタやセッタの動作を変えたい場合は、設定をしなおします。JavaScriptのコンポーネント内で修正した結果をデータベースに書き戻すには、_im_getValueメソッドを、初期化が終わった後の状態でのゲッタとして動作するように設定をする必要があります。単にデータベースに書き戻すだけでいいのなら、ゲッタの設定のみでかまいません。以下は、tinyMCEの例で、idsプロパティにコンポーネントのid属性値が配列として残されています。1つ1つの要素に対して、_im_getValueメソッドを追加しています。\n\n                \n                    for (var i = 0; i < this.ids.length; i++) {\n     var targetNode = document.getElementById(this.ids[i]);\n     var targetId = this.ids[i];\n     if (targetNode) {\n         targetNode._im_getValue = (function () {\n             var thisId = targetId;\n             return function () {\n                 return tinymce.EditorManager.get(thisId).getContent();\n             }\n         })();\n     }\n }\n                \n\n                tinyMCEのプラグインは、ページ上にあるすべてTEXTAREAをHTMLエディタにしてしまう動作で初期化するので、tinyMCE.initメソッドを呼び出すだけです。コンポーネントによっては、個別にオブジェクトをidsプロパティから取得したid値で参照して、それぞれに何らかのメソッドを適用しないといけないかもしれません。\n                結果的に、それぞれのJavaScriptコンポーネントごとにうまく初期化をしないといけませんが、場合によってはフレームワークの更新も必要になるかもしれません。\n\n                自分でJavaScriptコンポーネントを作る場合\n                自分で１からコンポーネントを作る場合は、以下のプラグインの骨格を作り、後は自由につくっていいでしょう。このクラスにメソッドを集めてもいいですし、他のファイルから参照してもかまいません。\n\n                \n                    IMParts_Catalog[\"myjscomponent\"] = {\n    instanciate: function (parentNode) { },\n    ids: [],\n    finish: function (update) { }\n}\n                \n            \n        "
}, {
    "id": 27,
    "parent": "/ja/for-programmers/",
    "path": "/ja/for-programmers/media.html",
    "title": "MediaAccessクラスとその拡張点",
    "breadcrumb": "MediaAccessクラスとその拡張点",
    "body": "\n            \n                はじめに\n                INTER-Mediatorはデータベースの内容を取り出し、Webページに展開し、場合によっては書き直したデータをデータベースに書き戻します。この一連のDBを中心としたデータの流れがあるのですが、Webアプリケーションではこれだけではすべてはまかなえません。HTMLでページを作るときは写真などの画像を別のファイルで供給します。このHTML外に実データが存在するようなものを「メディア」と呼ぶことにします。\n                メディアにはいろいろな種類があります。主要なものはIMGタグ要素で表示する画像、OBJECTタグなどで表示するFlashのコンテンツやビデオなど、そしてリンク先で得られるものとなるでしょうか。また、それぞれ、サーバー上にスタティックにあるものや、データベースのオブジェクト型フィールドに存在する場合もあります。WebページからこれらにアクセスするためのものがMediaAccessクラスです。概ね、次のような用途に使用方法は分類できます。\n                \n                    \n                    \n                    \n                サーバー上にある画像ファイルを参照するFileMakerのオブジェクトフィールドを参照するデータ生成を指定したクラスにさせ、生成結果を返す\n                ここで、単なる画像は普通にHTMLを書けばいいじゃないかと思うかもしれませんが、MediaAccessクラスを使う理由は、認証やアクセス権の設定との連携が可能になっているところです。\n            \n            \n                サーバー上にある画像ファイルを単に参照する\n                スタティックな画像で、認証が絡まない場合は、普通にIMGタグを記述します。また、画像ファイル名やパスがデータベースにある場合でも、必ずしもMediaAccessクラスは必要ないかもしれません。たとえば、あるテーブルのfilepathフィールドにファイル名が記録されているのなら、このようなIMGタグで表示できるでしょう。#srcにより、この要素のSRC属性にフィールドのデータが追加されます。\n\n                \n                    <img src=\";figs/\"; data-im=\";context@filepath@#src\"; />\n                \n            \n            \n                サーバー上にある画像ファイルを認証を伴って参照する\n                一方、ページの内容を認証しなければ参照できないようにしたとき、やはりページに埋め込んだ画像なども認証を経由したいと考えます。Webサーバーレベルでの認証の場合は、ある意味、認証がない場合と概ね同じことで可能ですが、INTER-Mediatorの認証機能を使った場合、SRC要素がスタティックな画像を参照していれば、もしかしたら、認証しなくても画像だけは見えてしまうかもしれません。そんなことをしても大した情報流出にならないとも言えるのですが、ガードしたいものはガードするのが基本ですし、認証しているのに一部は誰でも見えるのは正しい運用ではありません。\n                そこで、IM_Entry関数の2つ目の引数（つまりオプション引数）に、'media-root-dir'というキーで、サーバー上にあるメディアファイルのフォルダへのルートからの絶対パスを指定しておきます。たとえば、\n\n                \n                    'media-root-dir' => '/var/www/images',\n                \n\n                となっていたとします。あるページファイルで使われている定義ファイルのパスがcontext.phpだったとします。すると、次の部分URLが、メディアを返します。ここで背後では、MediaAccessクラスが使われており、このクラスがメディアに対するプロキシになっているとも言えます。\n\n                \n                    context.php?media=ch1/shot345.png\n                \n\n                たとえば、IMGタグのSRC属性に上記のURLを記述すれば、media-root-dirと合成して、「/var/www/images/ch1/shot345.png」というファイルをアクセスし、その内容を取り出して、適切なMIMEタイプのヘッダとともに出力をします。\n                前記のURLにある画像ファイル名「shot345.png」がフィールドpicfileにあるような場合には、ページファイルの要素には以下のような記述ができます。media=は決められたキーワードです。\n\n                \n                    <img src=\";context.php?media=ch1/\"; data-im=\";table@picfile@#src\"; />\n                \n\n                このとき、定義ファイルで認証が必要な設定になっていると、SRC属性のURLからの取得時にMediaAccessクラス内部で、認証の確認を行います。ここで、一般の認証時に使っているクレデンシャルをそのまま使うことが実はできません。一般の認証では、1つのアクセスごとに異なるチャレンジデータを使うことで、認証の乗っ取りをしにくくしています。しかし、そのためにメディア処理ではその仕組みが使えません。なぜなら、メディアへのアクセスは並列的にブラウザから行うからです。\n                そこで、メディアアクセス時の認証のためだけのクレデンシャルを生成させるようにしています。たとえば、直前のimgタグ要素の場合、tableという名前のコンテキストからの取得となりますが、そのコンテキスト定義（IM_Entry関数の第1引数）の'authentication'キー内部の'media-handling'キーの値をtrueにします。すると、このコンテキストのデータを取得するときに、サーバー側からメディア用のクレデンシャルを出力します。\n                IMGタグ要素などから実際にメディア取得を定義ファイルに対して行うとき、media=があれば、MediaAccessクラスに処理をまかせます。そのとき、クレデンシャルがクッキーに記録されてサーバー側に到達し、それを発行したクレデンシャルと比較することで認証が通っているかどうかを判定します。つまり、コンテキストが得られるということは認証が通っているわけで、その信頼関係をもとに秘密の合い言葉をやりとりします。このクレデンシャルは繰り返し使われる可能性があります。クッキーに記録し、時間が来れば消去するようにはなっているものの、クレデンシャルを盗まれるのはそれだけでメディアアクセスを可能にしてしまうことになります。従って、HTTPS（SSL）でのサーバー運用は必須とも言えるでしょう。\n            \n            \n                普通のHTMLでMediaAccessを経由させる\n                Webページを作って画像を埋め込むと、<img src=\";img/cover.jpg\"; /> などと記述します。これをMediaAccessクラスを使ってデータの取り出しを行いたいとしたら、ソースを全部変更しないといけないのかというとそうではありません。リダイレクトを使うことで、HTMLソースはそのままに、MediaAccessクラスを使うことができます。たとえば、.htaccessファイルを作り、たとえば次のような記述を作ります。\n\n                \n                    RedirectMatch img/(.+) http://host.name/myapp/context.php?media=$1\n                \n\n                すると、<img src=\";img/cover.jpg\"; /> は、<img src=\";http://host.name/myapp/context.php?media=cover.jpg\"; /> と同じことになるわけです。\n                部分パスと絶対パス、それらを消したり追加したりといろいろ複雑にはなりますが、このスタティックなメディアを認証した上で表示できるようにしたのがMediaAccessの最初のインプリメントでした。\n            \n            \n                FileMakerのオブジェクトフィールドを参照する\n                オブジェクトフィールドはデータベースごとに扱いが異なり、統一的にはやりにくい処理ではあります。MediaAccessクラスでは、FileMaker Serverをターゲットにオブジェクトフィールドに対応する機能を作成しました。\n                FileMakerはFXを経由し、XML共有の仕組みを使います。テキスト型や数値型は、基本的にテキストでフィールドにあるデータが得られます。一方、オブジェクトフィールドはオブジェクトそのもののデータではなく、フィールドのデータに応じた以下のような「テキスト」が得られます。\n\n                \n                    /fmi/xml/cnt/photo.jpg\nhttp://server:16000/…\n                \n\n                PDFは完全なURLで、FileMaker Serverに16000ポートで接続して取り出すことが可能です。JPEGなどの画像の場合は、URLのパスに相当するものが得られますが、たとえばIMGタグのSRC属性にそのまま指定が可能な文字列になります。\n                いずれにしても、両方ともURLであると解釈すればいいわけです。この仕組みはFileMaker Serverに限らず、一般的なアクセスにも使えます。つまり、media=URLと指定をした場合は、そのURLにアクセスしたデータをMediaAccessクラスが取得し、さらにクラスを呼び出した元にそのデータを返します。/fmi/xml/cntで始まる物だけは特別にURLであるという処理が組み込まれています。また、URLかどうかはそれ以外には、httpあるいはhttpsで開始するものかどうかで判定しています。\n            \n            \n                MediaAccessでのアクセス権\n                認証が成立したらすべて参照可能となり、成立しなければ参照不可という単純なものなら非常に話が早く、前に説明したmedia-tokenの仕組みで事は足りるのです。なお、データはCRUDの4つの側面がありますが、メディアに関しては「編集」というのはWeb世界ではかなり難易度が高い世界であり、MediaAccessクラスはほぼ参照のみのサポートになっています。\n                ここで、メディアそのものがログインしたユーザごとのアクセス権を持たせたい場合が出てきます。レコードについては、特定のフィールドにユーザ名やグループ名を入力することで、そのユーザやグループに所属したユーザでないと参照や更新ができない仕組みを持っています。フィールドのデータはそれでいいのですが、メディアは実体はレコードと別に有ります。ここで、個々のメディアをコンテキストのレコードと結合させ、レコードごとのアクセス権をメディアにまで及ぼす仕組みを組み込みました。\n                まず、IM_Entry関数の2つ目の引数（オプション引数）に、キーが'media-context'で値がコンテキスト名（コンテキストのnameキーに対する値）を与えます。すると、メディアはこのコンテキストにある特定のレコードの、1つのフィールドのようなふるまいになります。\n\n                \n                    'media-context' => 'context-name',\n                \n\n                実際にメディアにアクセスするパスは次のような形式にします。つまり、コンテキスト名、レコードの検索条件をパスに入れます。最初のfilesは特に意味はなく、相対パスの最初のキーワードです。context-nameは、media-contextの値と同じでなければなりません。そのコンテキストのkeyキーに対する値、つまり主キーがpidであるなら、たとえば、field=valueは、pid=312 のような値になります。\n\n                \n                    context.php?media=files/context-name/field=value/filename.png\n                \n\n                ここでもし、media-root-dirが /var/www/media であるなら、実際に\n\n                \n                    /var/www/media/files/context-name/pid=312/finename.png\n                \n\n                という絶対パスの画像ファイルが存在する必要があります。コンテキストの定義には、レコード単位のアクセス権設定があれば、メディアに対するアクセス権の認証の確認を行い、ユーザを特定します。pid=312のレコードがそのユーザにアクセス権があるのかどうかを確認することによって、アクセスの可否を決めます。従って、適当にpid=316などとパスを変えても、その条件で検索されたレコードが他のユーザに対する権利があるものであれば、400番台のレスポンスを返してデータは返しません。認証の確認を行い、そのユーザに対するアクセス権がないものは出力しないという仕様によりアクセス権は定義した通りに適用されます。\n                pid=312を、age=45のようにできると言えばできますが、おそらく、そういうディレクトリは存在せず、漏洩にはならないでしょう。\n                ファイルのアップロードのコンポーネントは、コンテキスト名やレコード検索条件のパスを自動的に作成するようにも作られています。\n                メディア関連処理は、開発している側で「必要の合った」状況しかうまく動かない可能性があります。ぜひとも、いろいろ試してフィードバックをください。\n            \n            \n                データ生成を指定したクラスにさせ生成結果を返す\n                URLを使用して、別のシステムにデータを取りに行くことができるということはかなり汎用的になります。しかしながら、別システムとの連動ということになり、開発はやや大変になると同時にセキュリティ面への配慮する場面も増えることになります。そこで、INTER-Mediatorで完結させるために、定義ファイルの呼び出しにおいて、\n\n                \n                    context.php?media=class://ClassName/context/criteria\n                \n\n                という呼び出しができます。この場合、ClassNameは定義ファイルと同じディレクトリなど、PHPが取得できる場所にあるクラスのファイル名です。ClassNameで指定したクラスには、processingというメソッドを記述します。そして、ヘッダを含めた応答すべてをこのメソッドの中で完結させます。\n\n                \n                    class ClassName {\n    function processing($contextData, $options) { }\n}\n                \n\n                スペック上はprocessingというメソッドがあればいいのですが、引数については、とりあえず作ったアプリケーションで必要なものを並べました。$contextDataは、パス内にあるcontextで指定したクラスに対して、パス内にあるcriteriaで指定した検索条件で得られたレコードないしはその配列が引数で渡されます。認証を行うと、1レコードに限定されるので、そのレコードの連想配列です。認証を行わないと単に検索条件となるので、連想配列の配列を返します。criteriaはたとえば「id=45」にすれば、idフィールドが45のレコードに絞り込みます。$optionには、定義ファイルのIM_Entryの2つ目の値が設定されます。\n                \n                この仕組みを作って作ったのが『FileMaker as a Relational Database』のサイトです。このサイトでは、書籍を購入した人にPDFおよびePubでの書籍を配布していますが、それぞれパーソナライズをしています。PDFはヘッダに購入者やメールアドレスを入れ込み、ePubでは特定のページに同じような内容のテキストを埋め込んで圧縮・アーカイブします。media=class://という記述は、そうしたドキュメント生成処理を記述できるような仕組みなのです。\n            \n        "
}, {
    "id": 28,
    "parent": "/ja/for-programmers/",
    "path": "/ja/for-programmers/serverextending.html",
    "title": "サーバーサイドの拡張（Ver.5.4-dev以降）",
    "breadcrumb": "サーバーサイドの拡張（Ver.5.4-dev以降）",
    "body": "\n        データコンバータクラスの利用方法\n            IM_Entry関数の第2引数で、'formatter'を利用して、特定のコンテキストのフィールドに対して、データベースの読み書き前後にフィルタを設定することができます。このときに使うクラスをデータコンバータクラスと呼びます。自分で作成もできますが、以下のものが最初から組み込まれています。自分で作成する場合はDataConverter_template.phpを参照してください\n            \n                \n                \n                \n                \n                \n                \n                \n                \n                \n                \n            DataConverter_AppendPrefix.php\n                parameterに指定した文字列を前につける\n            DataConverter_AppendSuffix.php\n                    parameterに指定した文字列を後につける\n                DataConverter_Currency.php\n                    parameterに指定した小数以下の桁数で、数値を通貨で表示する\n                DataConverter_FMDateTime.php\n                    FileMaker Serverの出力する「月/日/年」形式の日付や時刻を整える\n                DataConverter_HTMLString.php\n                    改行をBRタグ要素、そして<や>や&を参照形式に変換する。parameterにautolinkと指定するとURLにAタグ要素を付加してリンクに変換する。バージョン4.2以降においてparameterにnoescapeと指定すると参照形式への変換を無効にする。データベースへの書き込み時はそのままの文字列\n                DataConverter_MarkdownString\n                    マークダウン表記のテキストをHTMLに整形する。コンバーターを通したフィールドは、innerHTMLで受ける必要がある。現在サポートしているマークダウン表記は以下のとおり。\n\n\n\n\n\n\n\n\n行頭の記号動作*その行をHnタグで囲む。nは*の個数に対応する-その行を箇条書きにする。-を重ねて階層的に記述することも可能#クラスが「_im_markdown_p1」のPタグで囲む。#は2つおよび3つにも対応し、クラス名の末尾の数字と#の個数が対応する@@IMG[file]href属性がfileのIMGタグを生成すし、さらにクラスが「_im_markdown_para_img」のPタグで囲む|TABLEタグで表を作る。セルの区切りと末尾に|を入れる\n\n\n                DataConverter_MySQLDateTime.php\n                    MySQLの出力する「年-月-日」形式の日付や時刻を整える\n                DataConverter_Number.php\n                    parameterに指定した小数以下の桁数で、数値をカンマ付きで表示する\n                DataConverter_NumberBase.php\n                    NumberやCurrencyの基底クラス\n                DataConverter_NullZeroString.php\n                    書き込み時にデータが''ならNULLとする、読み込み時は逆変換\n                DataConverter_template.php\n                    データコンバータのクラスのテンプレート\n                \n            \n        \n         データベースアクセス処理の拡張クラスを定義する\n            データベース側の処理に割り込むには「データベースクラスを自作する」で説明する手法（「データアクセスクラスのサブクラスを利用する方法」と定義します）とここで説明する手法（「拡張処理クラスを定義する方法」とします）の2通りがあります。「データアクセスクラスのサブクラスを利用する方法」だと、すべてのコンテキストに対する処理を記述しなければなりません。言い換えれば、複数あるコンテキストの１つだけに対して処理を加えたい場合、そのコンテキストのときだけプログラムが実行されるようにする必要があります。コンテキストが増減したときのメンテナンスタスクが増えます。「拡張処理クラスを定義する方法」だと、特定のコンテキストにだけ利用されるクラスを指定するので、「コンテキストごとに分岐させる」処理は不要です。必要な処理だけを記述する「拡張処理クラスを定義する方法」を使う方がプログラムの作成は容易でしょう。\n            IM_Entry関数の第一引数、つまりコンテキストの中に「extending-class」でクラス名を指定します。ここで指定したクラス名は任意のものでかまいませんが、そのクラスをPHPが認識できる場所に記述しておく必要があります。クラスは以下のようなインタフェースをインプリメントする必要があります。つまり、CRUDに対応する4種類のデータアクセス処理の前後にメソッドを含めることができるのです。\n            interface Extending_Interface_BeforeRead {\n    public function doBeforeReadFromDB();\n}\ninterface Extending_Interface_AfterRead {\n    public function doAfterReadFromDB($result);\n}\ninterface Extending_Interface_AfterRead_WithNavigation {\n    public function doAfterReadFromDB( $result);\n    public function countQueryResult();\n    public function getTotalCount();\n}\ninterface Extending_Interface_BeforeUpdate {\n    public function doBeforeUpdateDB();\n}\ninterface Extending_Interface_AfterUpdate {\n    public function doAfterUpdateToDB($result);\n}\ninterface Extending_Interface_BeforeCreate {\n    public function doBeforeCreateToDB();\n}\ninterface Extending_Interface_AfterCreate{\n    public function doAfterCreateToDB($result);\n}\ninterface Extending_Interface_BeforeDelete {\n    public function doBeforeDeleteFromDB();\n}\ninterface Extending_Interface_AfterDelete {\n    public function doAfterDeleteFromDB($result);\n}\ninterface Extending_Interface_BeforeCopy {\n    public function doBeforeCopyInDB();\n}\ninterface Extending_Interface_AfterCopy{\n    public function doAfterCopyInDB($result);\n}\n\n            \n            以下は、データベースからレコードを取得した後に呼び出されるクラスの定義例です。MyProgramというクラス名は任意ですが、2つのメソッドはインタフェースに決められたものを定義します。doAfterGetFromDBはデータベースからデータを取得した後に呼び出されます。引数$resultにはデータベースからの取得した結果が、連想配列の配列の形式で入っています。1レコードがフィールド名をキーとした連想配列になっており、レコードの数だけその配列があります。たとえば集計処理などを行い、同様に連想配列の配列にして結果を返します。このとき、ナビゲーションを使ってページ送りの処理をしているのなら、「レコードの個数」をcountQueryResultメソッドで返す必要があります。ナビゲーションがない場合にはこのメソッドの実装は不要です。また、ナビゲーションを使う場合でも、レコード総数がdoAfterGetFromDBの処理の後でも変わらないのであれば、countQueryResultメソッドは不要です。PHPではoptionのメソッドの定義をインタフェースできないので、定義上はコメントでこのメソッドを記載しています。\n            class MyProgram implements Extending_Interface_AfterRead {\n\tfunction doAfterReadFromDB($result) {\n\t\tforeach( $result as $record ) {\n\t\t\tforeach( $record as $field => $value ) {\n\t\t\t\t:\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n}\n\n            \n            countQueryResultメソッドを記述する場合の例を以下に示します。countQueryResultはdoAfterGetFromDBよりも後に呼び出されます。countQueryResultによって返されるのは、実際のレコード数ではなく、検索条件に合ったレコード数です。つまり、1万個のレコードのうち40個を表示している場合には、1万という数値を返す必要があります。doAfterGetFromDBで集計処理などをすると、1万レコードを取得して、それが20個などになると思います。その場合は20個を返さないといけません。この場合、自分でメンバ変数（dataCount）を定義して、そこに値を残しておくのが分かりやすい方法でしょう。\nclass MyProgram implements Extending_Interface_AfterRead_WithNavigation {\n\tvar $dataCount;\n\t\n\tfunction doAfterReadFromDB($result) {\n\t\t\t:\n\t\t$thisthis->dataCount = count( $result );\n\t\t$return result;\n\t}\n\t\n\tfunction countQueryResult() {\n\t\t$return $this->dataCount;\n\t}\n}\n\n            \n            それぞれのメソッドの$dataSourceNameはコンテキスト名の文字列が入っています。2つのコンテキストでクラスを共有するような場合には分岐のための手がかりになります。doAfterNewToDBの2つ目の引数$resultは、新たに作成したレコードのキーフィールドの値が設定されています。この値はdoAfterNewToDBメソッドでの返り値にしなければなりません。doAfterDeleteFromDBとdoAfterSetToDBメソッドの2つ目の引数はデータベース処理が失敗したかどうかをbooleanで示され、trueなら処理が成功です。これらのメソッドでもやはり引数で得られた値を返さないといけません。\n            開発者が作成するクラスで「DB_UseSharedObjects」クラスの子クラスにした場合は、他のオブジェクトへの参照が得られます。メソッドが呼び出された段階で、メンバ変数はオブジェクトを参照した状態になります。\n            DB_UseSharedObjectsを継承したときに利用できるメンバ変数\n                \n                    \n                    \n                    \n                    \n                メンバ変数\n                    参照するもの\n                $this->dbSettings\n                        DB_Settingsクラスのインスタンス\n                    $this->logger\n                        DB_Loggerクラスのインスタンス\n                    $this->authCommon\n                        DB_AuthCommonクラスのインスタンス\n                    $this->formatter\n                        DB_Formattersクラスのインスタンス\n                    \n            \n        \n       データベースクラスを自作する\n            データベースクラスを独自に作成する場合には、以下のようなPHPのクラスが基本となります。もちろん、データベースクラスを1から作れるのですが、たぶん、そういうニーズはまずないと思います。データベースをPDOで使うならINTER-MediatorのDB_PDO.php、FileMaer Serverを使うならDB_FileMaker_FX.phpを拡張したクラスを定義します。基底クラスの方のファイルも読み込みが必要です。以下の例は、INTER-Mediatorフォルダと同じフォルダに、このデータベースクラスのファイルがあるというわけです。自分が作るクラスでも、最初にDBをつけないといけません。IM_Entry関数の引数などでの設定は、この場合DB_をのぞいた「MyOriginalDB」を指定します。\n            require_once( \"INTER-Mediator/DB_PDO.php\" );\nclass DB_MyOriginalDB extends DB_PDO.php {\n\tpublic function readFromDB() {\n\t\t/* ここにプログラムを追加できる */\n\t\t$result = super::readFromDB();\n\t\t/* ここにプログラムを追加できる */\n\t\t$this->mainTableCount = count( $result ); //レコード数\n\t\treturn $result;\n\t}\n\n\tpublic function countQueryResult()  {\n\t\treturn super::countQueryResult();\n\t}\n\n\tpublic function getTotalCount()  {\n\t\treturn super::getTotalCount();\n\t}\n\n\tpublic function updateDB() {\n\t\t/* ここにプログラムを追加できる */\n\t\t$result = super::updateDB();\n\t\t/* ここにプログラムを追加できる */\n\t\treturn $result;\n\t}\n\t\n\tpublic function createInDB($bypassAuth) {\n\t\t/* ここにプログラムを追加できる */\n\t\t$lastKeyValue = super::createInDB($bypassAuth);\n\t\t/* ここにプログラムを追加できる */\n\t    return $lastKeyValue;\n\t}\n\t\n\tpublic function deleteFromDB() {\n\t\t/* ここにプログラムを追加できる */\n\t     $result = super::deleteFromDB();\n\t\t/* ここにプログラムを追加できる */\n\t\treturn $result;\n\t}\n\tpublic function copyInDB()  {\n\t     $result = super::copyInDB();\n\t\treturn $result;\n\t}\n}\n            自分で作るクラスでは、要はCRUDに対応した4つのメソッドをオーバーライドすることによって、独自の仕組みを組み込むことができます。また、4つのうち、特にプログラムの追加がない場合には、定義する必要はありません。いずれの関数も、コンテキスト名を引数に取ります。そして、現在処理しているコンテキスト名が設定されてこれらのメソッドを呼び出します。\n            readFromDBメソッドは、データベースからデータを取り出します。取り出し結果は連想配列の配列です。連想配列のキーがフィールド名になっています。そこから、特定のフィールドの値を元に集計をしたり、あるいは必要な値だけに取り除くなどの処理を、親クラスのreadFromDBメソッドを呼び出す後に入れればいいでしょう。リクエスト時と同じフィールド名を返す必要はなく（つまりINTER-Mediatorはそのチェックをしていない）、自由に連想配列の配列を作ります。そして、ページファイルの方で適切なフィールド名を指定すれば、集計結果が表示されます。なお、ページファイルで、一定レコード数ごとのページングをしているときには、mainTableCountメンバ変数にレコード数、つまり返す配列の要素数も指定します。何か問題が発生したのなら、array()を返します。以下のプログラムは売り上げのテーブルから集計を行う例です。\n            $result = super::readFromDB();\n$summary = array();\nforeach( $returnValue as $record ) {\n\t$summary[ $record[ 'itemNo' ]] += $record[ 'qty' ] * $record[ 'unitPrice' ];\n\t}\nreturn array( $summary );\n\n            \n            updateDBとdeleteFromDBメソッドは、いずれも値の更新や削除のときに呼び出されるメソッドです。返り値は論理値で、処理が成功すればtrueで失敗ならfalseです。createInDBは新規レコードの作成です。メソッドの返り値は、新たに作ったレコードのキーフィールドの値である必要があります。問題があれば返り値をfalseにします。\n        \n       サーバーサイドのプログラムで利用できるAPI\n以下、DB_ProxyはDB_Proxyクラスのオブジェクトへの参照を意味します。\nDB_Proxy->initialize($datasource, $options, $dbspec, $debug, $target = null)\nDB_Proxyクラスを初期化する。返り値はなし。生成したDB_Proxyクラスのオブジェクトに対して適用することで、さまざまな設定が反映されたオブジェクト群を形成する。\n\ninitializeメソッドの引数\n\n\n\n\n\n\n\n引数指定する内容$datasourceIM_Entry関数の第1引数と同様に、連想配列で表現されたコンテキストの配列。$optionsIM_Entry関数の第2引数と同様、さまざまな設定を含む連想配列。$dbspecIM_Entry関数の第3引数と同様、データベース接続に関する連想配列。$debugIM_Entry関数の第4引数と同様、falseならデバッグ出力なし、1ないしは2なら出力あり。$targetコンテキストのnameキーの値のひとつを文字列で指定する。省略することも可能。\n\nDB_Proxy->processingRequest($access, $bypassAuth)\n初期化したDB_Proxyクラスのオブジェクトに対して処理を行う。返り値はない。引数$bypassAuthは、認証やアクセス権設定を無視するが、この指定は慎重に行う必要がある。既定値はfalse。引数$accessに、行うデータベース処理を示す文字列を指定する。nullを指定したときや省略したときにはPOST時のパラメーターの\"access\"キーの値を使用する。$accessに指定できる値と動作は次の通り：'create'（レコードの作成）、'read'（データベースへのクエリー）、'update'（レコードの更新）、'delete'（レコードの削除）、'copy'（レコードの複製）、'challenge'（チャレンジの生成＝原則として何もしない）、'changepassword'（パスワード変更）、'unregister'（Pusherによるクライアント同期の登録解除）、'describe'（スキーマ情報を得る）。他に'select' 'new'が過去の互換性のために利用可能となっている。それ以外の文字列の場合は、特に何もしない。\nDB_Proxy->ignoringPost()\ninitializeメソッドではPOSTされたデータを取り込むが、その結果、処理拡張クラス内で新たにDB_Proxyクラスを生成してコンテキストを別途用意したとき、POSTデータの取り込みをしたくない場合も発生する。そのときにこのメソッドをinitializeメソッドよりも前に呼び出す。\nDB_Proxy->getDatabaseResult()\nデータベースからの検索結果などで、1レコードが連想配列として表現され、その連想配列がレコード数分ある配列が返される。利用可能なprocessingRequestメソッドの最初の引数は、create（作成されたレコード）、read（検索結果）、update（更新後のレコード）、copy（複製後のレコード）、describe（スキーマ情報）。\nDB_Proxy->getDatabaseResultCount()\nprocessingRequestメソッドの最初の引数がreadの場合、検索結果に含まれるレコード数を返す。コンテキストのrecordsキーが上限値となるが、実際に検索されたレコード数はそれより少ない場合もある。\nDB_Proxy->getDatabaseTotalCount()\nprocessingRequestメソッドの最初の引数がreadの場合、検索条件に合致したレコード数を返す。\nDB_Proxy->getDatabaseNewRecordKey()\nprocessingRequestメソッドの最初の引数がcreateあるいはcopyの場合、新たに作成されたレコードの主キーの値を返す。\nDB_Proxy->finishCommunication($notFinish)\n出力するためのさまざまな準備を行う。\nDB_Proxy->exportOutputDataAsJSON()\nJSON形式のテキストで各種データを出力する。\nDB_Logger->setDebugMessage($str, $level)\n引数$strに指定した文字列を、引数$levelに指定したレベルでのデバッグメッセージとして記録する。レベルは1ないしは2のみをサポートし、引数$levelを省略すると1になる。\nDB_Logger->setErrorMessage($str)\n引数$strに指定した文字列を、エラーメッセージとして記録する。\nDB_Logger->getDebugMessages()\n記録されたデバッグメッセージを要素として含む配列を返す。\nDB_Logger->getErrorMessages()\n記録されたエラーメッセージを要素として含む配列を返す。\nDB_Settings->setDataSourceName($dataSourceName)\n引数に指定した文字列をnameキーの値として持つコンテキストを選択する。\nDB_Settings->getDataSourceName()\n現在、選択されているコンテキストのnameキーに対する値。\nDB_Settings->getDataSourceTargetArray()\n現在、選択されているコンテキストの定義内容を連想配列で返す。\nDB_Settings->getDataSourceDefinition($dataSourceName)\n引数に指定した文字列をnameキーの値として持つコンテキスト定義の連想配列を返す。\nDB_Settings->getEntityForRetrieve()\nクエリー処理に利用するエンティティ名を返す。つまり、viewキーの値が指定されていればその値、指定されていない場合にはnameキーの値が返される。\nDB_Settings->getEntityForUpdate()\n更新処理に利用するエンティティ名を返す。つまり、tableキーの値が指定されていればその値、指定されていない場合にはnameキーの値が返される。\nDB_Settings->setStart($st)\n検索結果の最初のいくつ目から結果として取り出すかを、引数の数値で指定する。クライアントのINTERMediator.startFromの値が自動的に設定される。\nDB_Settings->getStart()\n検索結果の最初のいくつ目から結果として取り出すかが得られる。\nDB_Settings->setRecordCount($sk)\n検索結果の中から、最大でいくつのレコードを取り出すかを引数の数値で指定する。コンテキストのrecordsキーの値や、クライアントINTERMediator.pageSizeの値など、すでに決まっている値が指定される。\nDB_Settings->getRecordCount()\n検索結果の中から、最大でいくつのレコードを取り出すかが得られる。\nDB_Settings->getAggregationSelect()\nDB_Settings->setAggregationSelect($value)\n選択されているコンテキストに指定したaggregation-selectキーの設定と取得\nDB_Settings->getAggregationFrom()\nDB_Settings->setAggregationFrom($value)\n選択されているコンテキストに指定したaggregation-fromキーの設定と取得\nDB_Settings->getAggregationGroupBy()\nDB_Settings->setAggregationGroupBy($value)\n選択されているコンテキストに指定したaggregation-group-byキーの設定と取得\nDB_Settings->setDataSource($src)\n引数には定義ファイルのIM_Entry関数の第1引数の値を指定して、コンテキスト定義の配列をオブジェクトに記録する。\nDB_Settings->getDataSource()\n定義ファイルのIM_Entry関数の第1引数の値が返される。\nDB_Settings->setOptions($src)\n引数には定義ファイルのIM_Entry関数の第2引数の値を指定して、オプション指定の配列をオブジェクトに記録する。\nDB_Settings->getOptions()\n定義ファイルのIM_Entry関数の第2引数の値が返される。\nDB_Settings->setDbSpec($src)\n引数には定義ファイルのIM_Entry関数の第3引数の値を指定して、データベース設定の配列をオブジェクトに記録する。\nDB_Settings->getDbSpec()\n定義ファイルのIM_Entry関数の第3引数の値が返される。\nDB_Settings->setFieldsRequired($fieldsRequired)\nフィールドの配列として、引数の配列を設定する。このメソッドは、配列そのものを設定するが、addValueWithField、addTargetFieldメソッドにより、フィールド一覧を管理する配列へ要素が追加される。\nDB_Settings->getFieldsRequired()\nフィールドの配列を返す。\nDB_Settings->addTargetField($field)\nフィールドの配列の要素として、引数に指定した文字列を追加する。\nDB_Settings->getFieldOfIndex($ix)\nフィールドの配列から、引数に指定した番号の要素を返す。\nDB_Settings->setValue($values)\n値の配列として、引数の配列を設定する。\nDB_Settings->getValue()\n値の配列を返す。\nDB_Settings->addValue($value)\n値の配列の要素として、引数に指定した文字列を追加する。\nDB_Settings->addValueWithField($field, $value)\nフィールドの配列および値の配列の要素として、引数に指定した文字列をそれぞれ追加する。\nDB_Settings->getValuesWithFields()\nフィールドの配列にある値をキー、そのキーに対する値を要素にした連想配列を返す。\nDB_Settings->getValueOfField($targetField)\n引数に指定したフィールド名をフィールドの配列の何番目なのかを判別し、値の配列の同じ番号の要素を返す。つまり、フィールド名に対応した値を返す。\nDB_Settings->setForeignFieldAndValue($foreignFieldAndValue)\n引数を外部キーの値を保持する配列に指定する。引数は、field、valueをキーとした連想配列の配列である必要がある。\nDB_Settings->getForeignFieldAndValue()\n外部キーの値を保持する配列を返す。返される値は、field、valueをキーとした連想配列の配列。\nDB_Settings->addForeignValue($field, $value)\n引数に指定したフィールド名と値を、外部キーの値を保持する配列に追加する。\nDB_Settings->getForeignKeysValue($targetField)\n外部キーの値を保持する配列から、引数に指定したフィールドに対する値を返す。ない場合はnullが返る。\nDB_Settings->addExtraCriteria($field, $operator, $value)\n追加的な検索条件を保持する配列に、引数の3つの要素を持つ連想配列として追加する。\nDB_Settings->getExtraCriteria()\n追加的な検索条件を保持する配列を返す。\nDB_Settings->unsetExtraCriteria($index)\n追加的な検索条件を保持する配列の中にある引数に指定したインデックスの要素を削除する。\nDB_Settings->getCriteriaValue($targetField)\n追加的な検索条件を保持する配列から、引数に指定した文字列をfieldキーの値として持つ最初の要素を特定し、その要素のvalueキーの値を返す。\nDB_Settings->getCriteriaOperator($targetField)\n追加的な検索条件を保持する配列から、引数に指定した文字列をfieldキーの値として持つ最初の要素を特定し、その要素のoperatorキーの値を返す。\nDB_Settings->setGlobalInContext($contextName, $operation, $field, $value)\n引数に指定したコンテキストに、残りの引数で指定した設定内容を持つglobalキーの連想配列を追加する。もちろん、FileMaker Serverのみで意味のある機能である。\nDB_Settings->setPrimaryKeyOnly($primaryKeyOnly)\nDB_Settings->getPrimaryKeyOnly()\n検索条件の中から、主キー（コンテキストのkeyキー）で指定されたものだけを利用する設定とその状態の取得。なお、主キーのみを利用する検索は、データベースの更新前に楽観的ロックの仕組みを利用して、現在の値を取り出す場合に利用している。\nDB_Settings->addExtraSortKey($field, $direction)\n追加のソート条件を記録した配列に、引数にしていたフィールドと基準（昇順ないしは降順）を追加する。\nDB_Settings->getExtraSortKey()\n追加のソート条件を記録した配列を得る。\nDB_Settings->addAssociated($name, $field, $value)\nレコードのコピーにおいて、関連するコンテキストに対する設定を追加する。\nDB_Settings->getAssociated()\nレコードのコピーにおいて使用される関連するコンテキストに対する配列を得る。\nDB_Settings->setDbSpecServer($str)\nDB_Settings->getDbSpecServer()\nDB_Settings->setDbSpecPort($str)\nDB_Settings->getDbSpecPort()\nDB_Settings->setDbSpecUser($str)\nDB_Settings->getDbSpecUser()\nDB_Settings->setDbSpecPassword($str)\nDB_Settings->getDbSpecPassword()\nDB_Settings->setDbSpecDataType($str)\nDB_Settings->getDbSpecDataType()\nDB_Settings->setDbSpecDatabase($str)\nDB_Settings->getDbSpecDatabase()\nDB_Settings->setDbSpecProtocol($str)\nDB_Settings->getDbSpecProtocol()\nDB_Settings->setDbSpecDSN($str)\nDB_Settings->getDbSpecDSN()\nDB_Settings->setDbSpecOption($str)\nDB_Settings->getDbSpecOption()\nデータベース処理に関する設定を行ったり取り出したりするメソッド。\nDB_Settings->setCurrentUser($str)\nDB_Settings->getCurrentUser()\nクライアントから申告されたユーザー名の設定及び取得と行うメソッド。\nDB_Settings->setUserAndPasswordForAccess($user, $pass)\nDB_Settings->getAccessUser()\nDB_Settings->getAccessPassword()\nクライアントから申告されたユーザー名とパスワードの設定及び取得と行うメソッド。ネイティブ認証時にチャレンジに対応するレスポンスによって返されたユーザー名とパスワードが設定され、それ以外の時には設定されない。\nDB_Settings->setAuthentication($authentication)\nDB_Settings->getAuthentication()\nIM_Entry関数の第2引数（オプション設定）の、authenticationキーに対する値を記録あるいは取り出す。\nDB_Settings->getAuthenticationItem($key)\nIM_Entry関数の第2引数（オプション設定）のauthenticationキーに対する値に対し、さらに引数の文字列のキーの値を取り出す。もし、引数に与えたキーに対する値が定義されていない場合で、引数がテーブル名の場合には、規定のテーブル名を返す。あるいは認証継続時間の場合には既定値として8時間が返される。\nDB_Settings->getUserTable()\n認証に使用するテーブル名を返す。定義ファイル等で未設定の場合には既定値のauthuserが返される。\nDB_Settings->getGroupTable()\nグループ管理に使用するテーブル名を返す。定義ファイル等で未設定の場合には既定値のauthgroupが返される。\nDB_Settings->getCorrTable()\nグループ所属記録に使用するテーブル名を返す。定義ファイル等で未設定の場合には既定値のauthcorrが返される。\nDB_Settings->getHashTable()\n認証でのチャレンジ等を記録するためのテーブル名を返す。定義ファイル等で未設定の場合には既定値のissuedhashが返される。\nDB_Settings->getExpiringSeconds()\n認証結果を保持する時間を返す。定義ファイル等で未設定の場合には既定値の8時間が返される。\nDB_Settings->setRequireAuthentication($requireAuthentication)\nDB_Settings->getRequireAuthentication()\nゲッターは、定義ファイルの内容から、認証が必要かどうかを求めた結果を返す。セッターはprocessingRequestメソッド内で判定結果を記録するために利用される。\nDB_Settings->setRequireAuthorization($requireAuthorization)\nDB_Settings->getRequireAuthorization()\nゲッターは、定義ファイルの内容から、アクセス権の判定が必要かどうかを求めた結果を返す。セッターはprocessingRequestメソッド内で判定結果を記録するために利用される。\nDB_Settings->setDBNative($isDBNative)\nDB_Settings->isDBNative()\nゲッターは、定義ファイルの内容から、ネイティブ認証を行うかどうかを求めた結果を返す。セッターはprocessingRequestメソッド内で判定結果を記録するために利用される。\nDB_Settings->setEmailAsAccount($emailAsAccount)\nDB_Settings->getEmailAsAccount()\nゲッターは、定義ファイルの内容から、電子メールを認証時のユーザー名として使用できるかどうかを返す。セッターはprocessingRequestメソッド内で設定を記録するために利用される。\nDB_Settings->getLDAPSettings()\nparams.phpファイルで定義されたLDAPの設定値を持つ配列を返す。要素は順番に、サーバー名、ポート番号、検索ベース、コンテナ名、ユーザー名のキー名。\nDB_Settings->setLDAPExpiringSeconds($sec)\nDB_Settings->getLDAPExpiringSeconds()\nゲッターは、params.phpファイルの内容から得られたLDAP認証の継続時間を返す。セッターは設定を記録するために利用される。\nDB_Settings->setSeparator($sep)\nDB_Settings->getSeparator()\nターゲット指定の区切り文字（通常は「@」）を記録したり取得するメソッド。設定しない場合には、＠が返される。\nDB_Settings->setSmtpConfiguration($config)\nDB_Settings->getSmtpConfiguration()\nIM_Entry関数の第2引数（オプション設定）の、smtpキーに対する値を記録あるいは取り出す。\n\n        \n        "
}, {
    "id": 29,
    "parent": "/ja/for-programmers/",
    "path": "/ja/for-programmers/commitcode.html",
    "title": "ソースコードの投稿",
    "breadcrumb": "ソースコードの投稿",
    "body": "\n            \n                はじめに\n                \n                    INTER-Mediatorへのソースコードを投稿する場合の手順をまとめておきます。INTER-Mediatorのコミッターや、あるいはバグレポートの1つの方法として、ソースコードの投稿を歓迎します。手順は、Webサイトを利用した、いちばん手軽な方法が中心です。\n            \n            \n                ソースコード投稿の考え方\n                INTER-Mediatorはオープンソースプロジェクトであり、コミュニティを形成することで、開発が進行する手法を取り入れています。多くの方々によってソースコードがレビューされることで、システム全体が洗練され、セキュリティ的な問題点が解消されることが期待できます。また、新たな機能やバグ修正等のソースコードの投稿を受け付けることで、システムの継続的な進化も期待できます。そのために、INTER-Mediatorでは、GitHubを利用した「Pull Request」によるソースコードの投稿を広く受け付けることとします。\n            \n            \n                GitHubの組織「INTER-Mediator」\n\n                INTER-Mediatorは、GitHub上に「INTER-Mediator」という名称の組織を作成しており、そこにあるレポジトリが「マスターレポジトリ」となります。コミッターの開発結果はこのマスターレポジトリにまとめられますが、まとめる作業は、INTER-Mediator Directive Committeeのメンバーによって行われます。レポジトリの1つ「INTER-Mediator」は、フレームワーク本体やサンプルプログラムなどのソフトウエア全般がまとめられています。「INTER-Mediator_WebSite」は、INTER-MediatorのWebサイトのソースです。「INTER-Mediator」はForkをしてPull Requestを送る手法を基本とします。「INTER-Mediator_WebSite」はINTER-Mediator Directive Committeeメンバによる書き込み権限を与えることで、Forkをしないで単一のレポジトリでの運用を基本とします。したがって、本文書に書かれた内容は、フレームワーク本体の「INTER-Mediator/INTER-Mediator」というレポジトリの運用方法を記載したものとなります。\n                \n\n                \n                \n            \n            \n                GitHubアプリケーションを使ったPull Request\n                GitHubはバージョン管理システムのgitをベースにしており、すべてはgitのコマンドでできると言えますが、コマンドでの処理は習得に時間がかかると同時に失敗しやすいということもあります。しかしながら、GitHubは専用アプリケーションをリリースしており、そのアプリケーションを利用することで、ソースコードの投稿を簡単にできるようになっています。ここでは、なるべくGitHubアプリケーションと、GitHubのサイトを利用するということで、ソースコードを取得し、修正後に投稿する流れを説明します。\n                組織で管理しているマスターレポジトリは「INTER-Mediator/INTER-Mediator」と記載します。Gitの表記にしたがって「組織名/レポジトリ名」でレポジトリを記述することにします。ここで、GitHubのあるユーザmsykが、INTER-Mediator本体のレポジトリに対して、ソースコードの追加等を行い、その開発結果を投稿しようとします。\n\n                ソースコードの取得を最初に行いますが、その作業を「マスターレポジトリをForkする」などと呼ばれます。Forkにより、レポジトリの複製を自分自身のアカウントの領域に作成をします。マスターレポジトリへの書き込み権限を持つ人は限られていますが、パブリックなプロジェクトなので、逆にソースコードは誰でも取得できます。したがって、GitHubにアカウントがあれば、誰でもForkができることになります。GitHubにユーザmsykでログインをして作成した、ユーザmsykのINTER-Mediatorフレームワーク本体は、「msyk/INTER-Mediator」と記述をします。さらに、現実には、自分のアカウントにあるリモートのレポジトリのクローンを作業者のMac/PCの中にローカルのレポジトリとして作成をします。ソースコードの改変をする前に、まず、ここまでの準備が必要です。概念図は以下のとおりで、左側のマスターレポジトリをForkして、あるユーザのリモートレポジトリを作成し、そのクローンのレポジトリがローカルにあるという状態です。ここで、masterはブランチ名で、「A」はある状態を示します。この後に、ローカルのレポジトリのソースコードを変更した結果、状態が「B」になるというような図が出てきます。\n\n                \n                \n\n                Forkする\n\n                Forkをするには、GitHubに自分のアカウント（この場合はmsyk）でログインをします。そして、組織のページに移動して、マスタレポジトリのトップページを表示します。組織のマスターレポジトリは、レポジトリ名が「INTER-Mediator/INTER-Mediator」となっていることから、判別できます。そして、右上にある「Fork」のボタンをクリックします。これだけで、自分の領域にマスターレポジトリの複製のレポジトリが作成されます。なお、単に複製するだけでなく、マスターレポジトリが元々のオリジナルであることもきちんと記録されています。\n\n                \n                \n                \n                    「Fork」ボタンをクリックした後、画面が遷移して、自分自身の複製したレポジトリのページに移動しています。レポジトリ名が「msyk/INTER-Mediator」となっていて、ユーザmsykにINTER-Mediatorというレポジトリが作られたことがわかります。この段階では、マスターと同一のレポジトリです。\n\n                \n                \n\n                ローカルにクローンを作成する\n                さらに自分のレポジトリのクローンを自分のMac/PCに作成します。ここで、クローンはコマンドラインで作る方法などいろいろありますが、使用しているパソコンにGitHubアプリケーションをインストールしておけば、レポジトリのページの「Clone in Desktop」のボタンをクリックし、そしてローカルレポジトリを作るフォルダを指定するだけで、作成することができます。\n\n                \n                \n\n                コマンドラインで作るときには、ローカルレポジトリを作りたいフォルダをカレントフォルダにして、「git clone [レポジトリのURL]」と入力します。レポジトリのURLは、やはりレポジトリのページ右側にある「HTTPS clone URL」の部分のURLを指定しますが、コピーボタンがあるので、URLをコピーし、コマンドライン入力中にペースとすれば良いでしょう。\n\n                変更結果をPull Requestする\n                自分のローカルのレポジトリ内で、ファイルを修正したとします。その修正処理はmasterでもいいですが、独自に作成したブランチでもかまいません。以下の図では、「readme-file-modify」というローカルのブランチに、変更結果が存在する状態です。そして、GitHubアプリケーションで、ツールバーの右から2つ目のボタンをクリックすることで、Pull Requestを作成します。パネルをクリックすると、右側に「Pull Request」の薄青い背景のパネルが表示されます。ここで、最初のテキストボックスに概要、そして、広いテキストフィールドにはある程度の説明を入力します。\n\n                \n                \n\n                タイトルの直下の部分で、マージを希望する先のマスターレポジトリのブランチを指定してください。右側はローカルで現在選択されているブランチができていて、ここは変更できません。右側はクリックするとドロップダウンリストが表示され、レポジトリを選択できます。ローカルと同じ名前のブランチの場合で、マスターリポジトリにブランチがない場合、そのブランチはマスターレポジトリに作られます。「Send Pull Request」ボタンをクリックします。このPull Requestは、Forkしたレポジトリの元のレポジトリに送り届けられます。\n\n                \n                \n\n                リクエストでは、取り込み先のブランチを選択できます。通常、最終的に変更結果はmasterに統合されるので、完成した機能やあるいはバグの修正となると、masterに統合することでかまいません。一方、機能そのものが一部しか実現していないものの、その結果を他のデベロッパーにも見てもらいたいといった理由があれば、ブランチにPull Requestを送ってください。その後の統合作業については、ディスカッションの上進めましょう。\n                Pull Requestが終了するとメッセージが表示され、GitHubのサイトへのリンクも見えています。ここでは#220という番号も見えています。GitHubアプリケーションを使えば、Pull Requestはこのように簡単に作成できます。\n\n                \n                \n            \n            \n                マスターレポジトリの更新結果の取り込み\n                Pull Requestによって、複数の開発者からのPull Requestが行われると、当然のこととしてマスターレポジトリはどんどん更新され、それぞれのユーザのレポジトリは以前の状態のままになります。Pull Requestを出したユーザは、自分と同じ状態にマスターレポジトリが更新されたので、同一の状態になっています。しかしながら、別のアカウント（以下の図にあるsomeone）が、msykによるPull Requestを発行する前にForkして、自分アカウントにレジストリーを作っていたとしたら、組織のアカウントは状態Bになっても、someoneの方は状態Aのままになります。someoneのレポジトリは状態Bにしたいと考えます。\n\n                    \n                    \n\n                    一時期はGitHubアプリケーションの右上にある「Sync」ボタンをクリックするだけで、自分のローカルのレポジトリを、Forkした元のマスターレポジトリと同じ状態にできましたが、これは「バグ」だったようで、その後にこの作業は自動的にできなくなっています。Syncは、ローカルとその元になっているレポジトリの間だけの同期です。\n                    Forkした元のレポジトリの更新結果を受け入れるには、以下のようにコマンドラインで作業をします。コマンドは、カレントディレクトリが、ローカルレポジトリのフォルダのルートになっている状態で入力します。最初のgit remote -vを見ると、自分自身のGitHub上のレポジトリに対してorignという名前が付けられ、加えて、Fork元のレポジトリは、「INTER-Mediator」という名前が付けられています。よくある作業例ではupstremという名前付けが一般的ですが、この「INTER-Mediator」は、GitHubアプリケーションが自動的に定義を加えています。そして、fetchでFork元のレポジトリを取り込んで、現在のブランチ（ここでは、ローカルレポジトリのmasterが選択されているとする）に、Fork元のレポジトリのmasterブランチの更新結果をマージします。\n\n                    \n\n                    $ git remote -v\nINTER-Mediator  https://github.com/INTER-Mediator/INTER-Mediator.git (fetch)\nINTER-Mediator  https://github.com/INTER-Mediator/INTER-Mediator.git (push)\norigin  https://github.com/msyk/INTER-Mediator.git (fetch)\norigin  https://github.com/msyk/INTER-Mediator.git (push)\n$ git fetch INTER-Mediator\n$ git merge INTER-Mediator/master\nUpdating 757ee4a..e41aabd\nFast-forward\n INTER-Mediator-UnitTest/sha1-test.js |  10 +++++\n LICENSE                              |   4 ++\n dist-docs/License.txt                |  29 ++++++++++++++\n dist-docs/buildup.sh                 |   2 +-\n dist-docs/change_log.txt             |   2 +\n dist-docs/readme.txt                 |   4 +-\n dist-docs/vm-for-trial/index.html    |   8 ++--\n lib/js_lib/sha1.js                   | 185 ----------------------------------------------------------------------------------------\n lib/js_lib/tinySHA1.js               |   1 +\n 9 files changed, 53 insertions(+), 192 deletions(-)\n create mode 100644 INTER-Mediator-UnitTest/sha1-test.js\n create mode 100644 LICENSE\n delete mode 100644 lib/js_lib/sha1.js\n create mode 100644 lib/js_lib/tinySHA1.js\n                    \n            \n            \n                GitHubのWebサイトからPull Requestを送る\n                ここまでにGitHubアプリケーションを使用した方法で、投稿から更新結果の受け取りまでを説明しました。ここからは、これらの作業をGitHubアプリケーションを使わないで行う方法を説明します。\n\n                変更結果を自分のレポジトリにpush\n\n                Pull RequestをGitHubアプリケーションを使わないで行うには、まず、変更結果を、自分のレポジトリに反映させます。\n\n                \n                \n                ローカルのレポジトリであらたなブランチを作ったり、あるいはマスターレポジトリにすでにブランチがある場合には、そのブランチを現在利用するブランチとしてプログラムの追加や変更を行います。ブランチの切り替えは、GitHubアプリケーションのツールバーでBranchesのボタンをクリックし、ブランチの一覧にある右端の▼をクリックして、「Switch to This Branch」を選択します。プログラムの変更を行った後は、GitHubアプリケーションのツールバーでChangesを選択し、CommitとSyncを行います。Syncにより現在のブランチへのpushも行います。\n\n                ローカルのレポジトリではmasterブランチのまま作業をして、それを自分のリモートレポジトリにpushするときに、新たなブランチを作成するの良いでしょう。たとえば、PHPStormで作業をしているのであれば、ブランチに含めたいファイルを選択したり、あるいはルートのフォルダを選択するなどして、VCSメニューからCommit Changesを選択します。するとコミットされるファイルの一覧と、コミットメッセージが見えるダイアログボックスが表示されます。メッセージを書き込んだ上で、Commitボタンにマウスポインタを移動させるとポップアップメニューが出るので「Commit and Push」を選択します。すると、さらにGit Pushと書かれたダイアログボックスが表示されるので、その下の部分のチェックボックスをオンにして、右側のテキストフィールドに、新たなブランチ名をキータイプします。すると、コミット結果が新たなブランチにpushされ、リモートレポジトリにここで入力した名前のブランチが作成されています。\n\n                \n                \n                \n                \n                Pull Requestの作成\n\n                ここまでの作業で、変更結果は、自分のリモートレポジトリ側には反映されていますが、これをマスターに反映するためには、Pull Requestをマスターレポジトリに対して要求します。以下の図では、new-funcというブランチに、改変結果が記録されているので、そのブランチをマスターレポジトリへ取り込んでもらうということを示しています。\n\n                \n                \n                ここまでの作業で改変した結果は自分自身のリモートレポジトリにあります。自分のアカウントでログインをして、自分のリモートレポジトリのページを開きます。ここで、ファイルリストの上の部分に、薄い黄色の枠で、Your recently pushed branches:という記述があれば、そこにある「Compare & pull request」ボタンをクリックします。もし、出ていないようであれば、ファイルリストの上部の「branch: master」などと書かれいる部分からブランチを選択して、その左の緑色のボタンをクリックして、移動したページで「Create Pull Request」ボタンをクリックします。\n\n                \n                \n                Pull Requestを作成するページになります。ここで、追加した機能の概要などを記載して「Create pull request」ボタンをクリックします。作業はこれだけです。このユーザ側のレポジトリは、マスターリポジトリからForkしたものなので、このPull Requestは、マスターレポジトリ側に送られます。\n\n                \n                \n            \n            \n                Pull Requestの受け入れ\n\n                マスターレポジトリ側での受け入れ作業は、INTER-Mediator Directive Committeeで行います。Pull Requestがあれば、それをいったんマスターレポジトリにpullします。その段階では、リクエストを送ったのと同じブランチ名のものがマスターレポジトリにできあがります。そして、動作の検証やコードのレビューを行います。masterではないブランチでPull Requstがあったものは、masterへマージします。この場合、マスターレポジトリでPull Requestを行い、それを受け入れればmasterに反映されるということになります。\n\n                \n                \n                \n                \n                受け付けられたPull Requestはマスターレポジトリ側はでは次のように見えます。\n\n                \n                \n            \n            \n                マスターレポジトリからの部分的な受け入れ\n\n                GitHubアプリケーションを使えばSyncによりマスターレジストリの内容を即座にローカルに取り込むことができます。その作業をコマンドだけで行う方法を、以下に記述します。ローカルレポジトリをマスターとは異なる状態で保持する必要がある場合などには、この方法を応用して、必要な更新だけを取り込むようにします。以下、青色で太字が入力するコマンドで、#で始まるグレーの文字は説明です。\n\n                # Forkした自分のレポジトリをローカル側にクローンを作る（すでに作成済みなら不要）\n$ git clone https://github.com/msayukinii/INTER-Mediator.git\nCloning into 'INTER-Mediator'...\nremote: Counting objects: 7408, done.\nremote: Compressing objects: 100% (2387/2387), done.\nremote: Total 7408 (delta 4983), reused 7408 (delta 4983)\nReceiving objects: 100% (7408/7408), 8.04 MiB | 1.71 MiB/s, done.\nResolving deltas: 100% (4983/4983), done.\nChecking connectivity... done.\n# ローカルレポジトリのルートをカレントディレクトリにする\n$ cd INTER-Mediator/\n# 現在、masterブランチが選択されている。自分のレポジトリにはmaster以外に# targeting-generalizationというブランチもあり、ローカル側にもそのブランチはある\n$ git branch -a\n* master\n  targeting-generalization\n  remotes/origin/HEAD -> origin/master\n  remotes/origin/master\n  remotes/origin/targeting-generalization\n# リモートレポジトリの一覧を見る。自分のリモートレポジトリが見えている\n$ git remote -v\norigin https://github.com/msayukinii/INTER-Mediator.git (fetch)\norigin https://github.com/msayukinii/INTER-Mediator.git (push)\n# 新たに、マスターリポジトリをupstreamという名前でローカルリポジトリに登録する\n$ git remote add upstream https://github.com/INTER-Mediator/INTER-Mediator.git\n# originだけでなくupstreamも管理対象のリモートレポジトリとして登録された\n$ git remote -v\norigin https://github.com/msayukinii/INTER-Mediator.git (fetch)\norigin https://github.com/msayukinii/INTER-Mediator.git (push)\nupstream https://github.com/INTER-Mediator/INTER-Mediator.git (fetch)\nupstream https://github.com/INTER-Mediator/INTER-Mediator.git (push)\n# upstreamで指定されるレポジトリの内容を取り込む\n$ git fetch upstream\nremote: Counting objects: 13, done.\nremote: Compressing objects: 100% (10/10), done.\nremote: Total 13 (delta 4), reused 7 (delta 3)\nUnpacking objects: 100% (13/13), done.\nFrom https://github.com/INTER-Mediator/INTER-Mediator\n* [new branch] master -> upstream/master\n* [new branch] targeting-generalization -> upstream/targeting-generalization\n# remotes/upstreamの2つのブランチが新たに加わった\n$ git branch -a\n* master\n  targeting-generalization\n  remotes/origin/HEAD -> origin/master\n  remotes/origin/master\n  remotes/origin/targeting-generalization\n  remotes/upstream/master\n  remotes/upstream/targeting-generalization\n# upstream/masterを現在のローカルのmasterにマージする。これで、ローカルのmasterは、マスターレポジトリのmasterと同一の内容になった\n$ git merge upstream/master\nUpdating 10e5c96..720ff24\nFast-forward\nDB_Null.php | 177 +++++++++++++++\nINTER-Mediator-Element.js | 27 ---------------\nREADME.md | 2 +-\nSamples/templates/definition_file_full.php | 1 +\n4 files changed, 179 insertions(+), 28 deletions(-)\ncreate mode 100644 DB_Null.php\n# 自分のリモートレポジトリのmasterに、ローカルの内容をpushすることで、リモート側にも反映される。ただし、この作業は必須ではない\n$ git push origin master\n# さらにマスターレポジトリ側の別のブランチを取り込みたいのなら、まず、ローカル側を受け入れるブランチに切り替える\n$ git checkout targeting-generalization\nSwitched to branch 'targeting-generalization'\nYour branch is ahead of 'origin/targeting-generalization' by 2 commits.\n  (use \"git push\" to publish your local commits)\n# すでにマスターレポジトリのブランチは取り込んであるので、マージすれば、このブランチもマスターレポジトリの内容と同じになる\n$ git merge upstream/targeting-generalization\nAlready up-to-date!\nMerge made by the 'recursive' strategy.\n                \n                上位の一連のコマンドの流れを図示すると次のようになります。一度、upstreamで参照を作っておけば、以後は、fetchしてmergeすることで、マスターレポジトリの内容をローカルのmasterに取り込むことができます。\n                \n                \n                最初に前提として「masterが正」であるということを記述しましたが、場合によっては、機能が完成する前にレビューや共同作業目的で、ブランチのPull Requestが発生するかど思われます。そういうブランチはマスターレポジトリに残したままになり、fetchによってupstreamにも取り込まれます。こちらは必要に応じてマージすればいいと思われます。また、共同で新たな機能を作る場合、各自がForkしたレポジトリで作業するのは、更新結果の配布に時間がかかることも予想されます。その場合、共同開発している中の1人のForkしたレポジトリに他の開発者も書き込み権限を与えて登録して、単一のレポジトリで各自がcommit/pushするという開発モデルの方が効率がいいと思われます。\n            \n        "
}]
